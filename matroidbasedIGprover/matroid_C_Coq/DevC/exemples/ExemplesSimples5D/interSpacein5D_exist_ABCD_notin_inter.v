Load "preamble5D.v".


(* dans la couche 0 *)
Lemma LAC : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: C ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AC requis par la preuve de (?)AC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 -2 et -4*)
assert(HACm2 : rk(A :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HACp2mtmp : rk(A :: C :: p2 :: nil) >= 2) by (solve_hyps_min HACp2eq HACp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p2 :: nil) (A :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: A :: p2 :: nil) ((A :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACp2mtmp;try rewrite HT2 in HACp2mtmp.
	assert(HT := rule_2 (A :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HACp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

assert(HACM : rk(A :: C ::  nil) <= 2) (* dim : 5 *) by (solve_hyps_max HACeq HACM2).
assert(HACm : rk(A :: C ::  nil) >= 1) by (solve_hyps_min HACeq HACm1).
intuition.
Qed.

(* dans constructLemma(), requis par LCp1 *)
(* dans constructLemma(), requis par LCDEp1 *)
(* dans la couche 0 *)
Lemma LABCDEp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: p1 ::  nil) = 5.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDEp1 requis par la preuve de (?)ABCDEp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCDp1 requis par la preuve de (?)ABCDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDp1 requis par la preuve de (?)ABCDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCDp1M4 : rk(A :: B :: C :: D :: p1 :: nil) <= 4).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: p1 :: nil) (D :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: C :: p1 :: nil) ((D :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HDMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1 requis par la preuve de (?)ABCDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCDEp1M5 : rk(A :: B :: C :: D :: E :: p1 :: nil) <= 5).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCDp1Mtmp : rk(A :: B :: C :: D :: p1 :: nil) <= 4) by (solve_hyps_max HABCDp1eq HABCDp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: nil) (E :: A :: B :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: D :: p1 :: nil) (nil) 1 4 0 HEMtmp HABCDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1m5 : rk(A :: B :: C :: D :: E :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

assert(HABCDEp1M : rk(A :: B :: C :: D :: E :: p1 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HABCDEp1m : rk(A :: B :: C :: D :: E :: p1 ::  nil) >= 1) by (solve_hyps_min HABCDEp1eq HABCDEp1m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LCDEp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(C :: D :: E :: p1 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour CDEp1 requis par la preuve de (?)CDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour BCDEp1 requis par la preuve de (?)CDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour BCDEp1 requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEDpp1 requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEDpp1 requis par la preuve de (?)ABCDEDpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEDpp1m5 : rk(A :: B :: C :: D :: E :: Dp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour BCDEp1 requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BE requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECp requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp2 requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp2 requis par la preuve de (?)ABCDECpp2 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp2m5 : rk(A :: B :: C :: D :: E :: Cp :: p2 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p2 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ACDEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCDEApp2 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp2m5 : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ACDEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp2 requis par la preuve de (?)ACDp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACDp2M3 : rk(A :: C :: D :: p2 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p2 :: nil) (D :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p2 :: nil) ((D :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HDMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp2M4 : rk(A :: C :: D :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp2Mtmp : rk(A :: C :: D :: p2 :: nil) <= 3) by (solve_hyps_max HACDp2eq HACDp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p2 :: nil) (E :: A :: C :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p2 :: nil) ((E :: nil) ++ (A :: C :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p2 :: nil) (nil) 1 3 0 HEMtmp HACDp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp2m3 : rk(A :: C :: D :: E :: p2 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 5 0 2 HABCDEApp2mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(HABCDECpp2mtmp : rk(A :: B :: C :: D :: E :: Cp :: p2 :: nil) >= 5) by (solve_hyps_min HABCDECpp2eq HABCDECpp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: Cp :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p2 :: nil) (A :: B :: Cp :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: C :: D :: E :: p2 :: nil) ((A :: B :: Cp :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp2mtmp;try rewrite HT2 in HABCDECpp2mtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: C :: D :: E :: p2 :: nil) (A :: nil) 5 1 4 HABCDECpp2mtmp HAmtmp HACDEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ACAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACAp requis par la preuve de (?)ACAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACApm2 : rk(A :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDApm2 : rk(A :: C :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HACDApm3 : rk(A :: C :: D :: Ap :: nil) >= 3).
{
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HABEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: p2 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm2 : rk(A :: C :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm3 : rk(A :: C :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HACDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACDEApm4 : rk(A :: C :: D :: E :: Ap :: nil) >= 4).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 5 1 2 HABCDEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDEApBpm3 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDEApmtmp : rk(A :: C :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HACDEApeq HACDEApm4).
	assert(Hincl : incl (A :: C :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (A :: C :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HACDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : B :: Bp ::   de rang : 1 et 2 *)
assert(HACDEApBpm4 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HBBpMtmp : rk(B :: Bp :: nil) <= 2) by (solve_hyps_max HBBpeq HBBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil) ((B :: Bp :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HBBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HACApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACEApm2 : rk(A :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACEApm3 : rk(A :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: C :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACEApBpm2 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACEApmtmp : rk(A :: C :: E :: Ap :: nil) >= 3) by (solve_hyps_min HACEApeq HACEApm3).
	assert(Hincl : incl (A :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil) (A :: C :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HACEApBpm3 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HACEApBpMtmp : rk(A :: C :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACEApBpeq HACEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: C :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpmtmp HACmtmp HACEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: B :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HABECpm2 : rk(A :: B :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: B :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour BCDEp1 requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : B :: E ::  de rang :  1 et 2 	 A : A :: B :: E :: Cp ::   de rang : 2 et 4 *)
assert(HBCDEp1m2 : rk(B :: C :: D :: E :: p1 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HBEmtmp : rk(B :: E :: nil) >= 1) by (solve_hyps_min HBEeq HBEm1).
	assert(Hincl : incl (B :: E :: nil) (list_inter (A :: B :: E :: Cp :: nil) (B :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: B :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: B :: C :: D :: E :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (B :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (B :: C :: D :: E :: p1 :: nil) (B :: E :: nil) 5 1 4 HABCDECpp1mtmp HBEmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Dp :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : A :: Dp ::   de rang : 1 et 2 *)
assert(HBCDEp1m3 : rk(B :: C :: D :: E :: p1 :: nil) >= 3).
{
	assert(HADpMtmp : rk(A :: Dp :: nil) <= 2) by (solve_hyps_max HADpeq HADpM2).
	assert(HABCDEDpp1mtmp : rk(A :: B :: C :: D :: E :: Dp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEDpp1eq HABCDEDpp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: Dp :: nil) (B :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Dp :: p1 :: nil) (A :: Dp :: B :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: Dp :: B :: C :: D :: E :: p1 :: nil) ((A :: Dp :: nil) ++ (B :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEDpp1mtmp;try rewrite HT2 in HABCDEDpp1mtmp.
	assert(HT := rule_4 (A :: Dp :: nil) (B :: C :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEDpp1mtmp Hmtmp HADpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 4 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 ::  de rang :  5 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: p1 ::   de rang : 2 et 2 *)
assert(HBCDEp1m4 : rk(B :: C :: D :: E :: p1 :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 2) by (solve_hyps_max HAp1eq HAp1M2).
	assert(HABCDEp1eq : rk(A :: B :: C :: D :: E :: p1 :: nil) = 5) by (apply LABCDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HABCDEp1mtmp : rk(A :: B :: C :: D :: E :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEp1eq HABCDEp1m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: p1 :: nil) (B :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: nil) (A :: p1 :: B :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: D :: E :: p1 :: nil) ((A :: p1 :: nil) ++ (B :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1mtmp;try rewrite HT2 in HABCDEp1mtmp.
	assert(HT := rule_4 (A :: p1 :: nil) (B :: C :: D :: E :: p1 :: nil) (p1 :: nil) 5 1 2 HABCDEp1mtmp Hp1mtmp HAp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour CDEp1 requis par la preuve de (?)CDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour CDEp1 requis par la preuve de (?)CDEp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : A :: B :: E :: Cp ::   de rang : 2 et 4 *)
assert(HCDEp1m2 : rk(C :: D :: E :: p1 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (A :: B :: E :: Cp :: nil) (C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: C :: D :: E :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (C :: D :: E :: p1 :: nil) (E :: nil) 5 1 4 HABCDECpp1mtmp HEmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : B :: C :: D :: E :: p1 ::  de rang :  4 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HCDEp1m3 : rk(C :: D :: E :: p1 :: nil) >= 3).
{
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HBCDEp1mtmp : rk(B :: C :: D :: E :: p1 :: nil) >= 4) by (solve_hyps_min HBCDEp1eq HBCDEp1m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (B :: C :: D :: E :: p1 :: nil) (B :: p1 :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: C :: D :: E :: p1 :: nil) ((B :: p1 :: nil) ++ (C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HBCDEp1mtmp;try rewrite HT2 in HBCDEp1mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (C :: D :: E :: p1 :: nil) (p1 :: nil) 4 1 2 HBCDEp1mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 ::  de rang :  5 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HCDEp1m4 : rk(C :: D :: E :: p1 :: nil) >= 4).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEp1eq : rk(A :: B :: C :: D :: E :: p1 :: nil) = 5) by (apply LABCDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HABCDEp1mtmp : rk(A :: B :: C :: D :: E :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEp1eq HABCDEp1m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: B :: p1 :: nil) (C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: nil) (A :: B :: p1 :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: C :: D :: E :: p1 :: nil) ((A :: B :: p1 :: nil) ++ (C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1mtmp;try rewrite HT2 in HABCDEp1mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (C :: D :: E :: p1 :: nil) (p1 :: nil) 5 1 2 HABCDEp1mtmp Hp1mtmp HABp1Mtmp Hincl); apply HT.
}

assert(HCDEp1M : rk(C :: D :: E :: p1 ::  nil) <= 4) (* dim : 5 *) by (solve_hyps_max HCDEp1eq HCDEp1M4).
assert(HCDEp1m : rk(C :: D :: E :: p1 ::  nil) >= 1) by (solve_hyps_min HCDEp1eq HCDEp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par LCp1 *)
(* dans la couche 0 *)
Lemma LCp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(C :: p1 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour DEp1 requis par la preuve de (?)Cp1 pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)DEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour DEp1 requis par la preuve de (?)DEp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: D :: E :: p1 ::  de rang :  3 et 4 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HDEp1m2 : rk(D :: E :: p1 :: nil) >= 2).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABDEp1mtmp : rk(A :: B :: D :: E :: p1 :: nil) >= 3) by (solve_hyps_min HABDEp1eq HABDEp1m3).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: B :: p1 :: nil) (D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (A :: B :: p1 :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: D :: E :: p1 :: nil) ((A :: B :: p1 :: nil) ++ (D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEp1mtmp;try rewrite HT2 in HABDEp1mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (D :: E :: p1 :: nil) (p1 :: nil) 3 1 2 HABDEp1mtmp Hp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour Cp1 requis par la preuve de (?)Cp1 pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 4 -2 et 5*)
assert(HCp1m2 : rk(C :: p1 :: nil) >= 2).
{
	assert(HDEp1Mtmp : rk(D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HDEp1eq HDEp1M3).
	assert(HCDEp1eq : rk(C :: D :: E :: p1 :: nil) = 4) by (apply LCDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCDEp1mtmp : rk(C :: D :: E :: p1 :: nil) >= 4) by (solve_hyps_min HCDEp1eq HCDEp1m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (C :: D :: E :: p1 :: nil) (C :: p1 :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: D :: E :: p1 :: nil) ((C :: p1 :: nil) ++ (D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HCDEp1mtmp;try rewrite HT2 in HCDEp1mtmp.
	assert(HT := rule_2 (C :: p1 :: nil) (D :: E :: p1 :: nil) (p1 :: nil) 4 1 3 HCDEp1mtmp Hp1mtmp HDEp1Mtmp Hincl);apply HT.
}

assert(HCp1M : rk(C :: p1 ::  nil) <= 2) (* dim : 5 *) by (solve_hyps_max HCp1eq HCp1M2).
assert(HCp1m : rk(C :: p1 ::  nil) >= 1) by (solve_hyps_min HCp1eq HCp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par LACp1 *)
(* dans la couche 0 *)
Lemma LACDEp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: C :: D :: E :: p1 ::  nil) = 5.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1 requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1 requis par la preuve de (?)ABCDEApBpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCDEApp2 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp2m5 : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp2 requis par la preuve de (?)ACDp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACDp2M3 : rk(A :: C :: D :: p2 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p2 :: nil) (D :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p2 :: nil) ((D :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HDMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp2M4 : rk(A :: C :: D :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp2Mtmp : rk(A :: C :: D :: p2 :: nil) <= 3) by (solve_hyps_max HACDp2eq HACDp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p2 :: nil) (E :: A :: C :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p2 :: nil) ((E :: nil) ++ (A :: C :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p2 :: nil) (nil) 1 3 0 HEMtmp HACDp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp2M5 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HACDEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp2m4 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp2 requis par la preuve de (?)ADp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp2M2 : rk(A :: D :: p2 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p2 :: nil) (D :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p2 :: nil) ((D :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p2 :: nil) (nil) 1 1 0 HDMtmp HAp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp2M3 : rk(A :: D :: E :: p2 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp2Mtmp : rk(A :: D :: p2 :: nil) <= 2) by (solve_hyps_max HADp2eq HADp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: nil) (E :: A :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p2 :: nil) ((E :: nil) ++ (A :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p2 :: nil) (nil) 1 2 0 HEMtmp HADp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p2 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp2m2 : rk(A :: D :: E :: p2 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp2mtmp : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HACDEApp2eq HACDEApp2m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p2 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp2mtmp;try rewrite HT2 in HACDEApp2mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (nil) 4 0 2 HACDEApp2mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: p2 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp2Mtmp : rk(A :: D :: E :: p2 :: nil) <= 3) by (solve_hyps_max HADEp2eq HADEp2M3).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (A :: nil) 5 1 3 HABCDEApp2mtmp HAmtmp HADEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp2m3 : rk(A :: C :: D :: E :: p2 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 5 0 2 HABCDEApp2mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((A :: B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (A :: nil) 5 1 4 HABCDEApp2mtmp HAmtmp HACDEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp2 requis par la preuve de (?)ABCEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp2M4 : rk(A :: B :: C :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp2Mtmp : rk(A :: B :: C :: p2 :: nil) <= 3) by (solve_hyps_max HABCp2eq HABCp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p2 :: nil) (E :: A :: B :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p2 :: nil) ((E :: nil) ++ (A :: B :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p2 :: nil) (nil) 1 3 0 HEMtmp HABCp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp2M5 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp2Mtmp : rk(A :: B :: C :: E :: p2 :: nil) <= 4) by (solve_hyps_max HABCEp2eq HABCEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: A :: B :: C :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HABCEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m2 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m3 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp2m4 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCEApp2mtmp : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HABCEApp2eq HABCEApp2m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (A :: B :: C :: E :: Ap :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p2 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp2mtmp;try rewrite HT2 in HABCEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil) (A :: nil) 4 1 1 HABCEApp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1m2 : rk(A :: C :: D :: E :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1eq HABCDEApBpp1m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1mtmp;try rewrite HT2 in HABCDEApBpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1m3 : rk(A :: C :: D :: E :: p1 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDECpp1mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 4 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 ::  de rang :  5 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1m4 : rk(A :: C :: D :: E :: p1 :: nil) >= 4).
{
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1eq : rk(A :: B :: C :: D :: E :: p1 :: nil) = 5) by (apply LABCDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HABCDEp1mtmp : rk(A :: B :: C :: D :: E :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEp1eq HABCDEp1m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1mtmp;try rewrite HT2 in HABCDEp1mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: nil) (p1 :: nil) 5 1 2 HABCDEp1mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 5) *)
(* marque des antécédents AUB AiB A: 4 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 ::  de rang :  5 et 5 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1m5 : rk(A :: C :: D :: E :: p1 :: nil) >= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEp1eq : rk(A :: B :: C :: D :: E :: p1 :: nil) = 5) by (apply LABCDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HABCDEp1mtmp : rk(A :: B :: C :: D :: E :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEp1eq HABCDEp1m5).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p1 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1mtmp;try rewrite HT2 in HABCDEp1mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: nil) (A :: p1 :: nil) 5 2 2 HABCDEp1mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

assert(HACDEp1M : rk(A :: C :: D :: E :: p1 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max HACDEp1eq HACDEp1M5).
assert(HACDEp1m : rk(A :: C :: D :: E :: p1 ::  nil) >= 1) by (solve_hyps_min HACDEp1eq HACDEp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par LACp1 *)
(* dans la couche 0 *)
Lemma LDEp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(D :: E :: p1 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour DEp1 requis par la preuve de (?)DEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)DEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour DEp1 requis par la preuve de (?)DEp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: D :: E :: p1 ::  de rang :  3 et 4 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HDEp1m2 : rk(D :: E :: p1 :: nil) >= 2).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABDEp1mtmp : rk(A :: B :: D :: E :: p1 :: nil) >= 3) by (solve_hyps_min HABDEp1eq HABDEp1m3).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: B :: p1 :: nil) (D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (A :: B :: p1 :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: D :: E :: p1 :: nil) ((A :: B :: p1 :: nil) ++ (D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEp1mtmp;try rewrite HT2 in HABDEp1mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (D :: E :: p1 :: nil) (p1 :: nil) 3 1 2 HABDEp1mtmp Hp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 3) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : C :: D :: E :: p1 ::  de rang :  4 et 4 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HDEp1m3 : rk(D :: E :: p1 :: nil) >= 3).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HCDEp1eq : rk(C :: D :: E :: p1 :: nil) = 4) by (apply LCDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCDEp1mtmp : rk(C :: D :: E :: p1 :: nil) >= 4) by (solve_hyps_min HCDEp1eq HCDEp1m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (C :: D :: E :: p1 :: nil) (C :: p1 :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: D :: E :: p1 :: nil) ((C :: p1 :: nil) ++ (D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HCDEp1mtmp;try rewrite HT2 in HCDEp1mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (D :: E :: p1 :: nil) (p1 :: nil) 4 1 2 HCDEp1mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

assert(HDEp1M : rk(D :: E :: p1 ::  nil) <= 3) (* dim : 5 *) by (solve_hyps_max HDEp1eq HDEp1M3).
assert(HDEp1m : rk(D :: E :: p1 ::  nil) >= 1) by (solve_hyps_min HDEp1eq HDEp1m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LACp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: C :: p1 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HACp1m2 : rk(A :: C :: p1 :: nil) >= 2).
{
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p1 :: nil) (A :: C :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p1 :: nil) (A :: C :: p1 :: nil) 2 2 HAp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 4 -2 et 4*)
assert(HACp1m3 : rk(A :: C :: p1 :: nil) >= 3).
{
	assert(HDEp1eq : rk(D :: E :: p1 :: nil) = 3) by (apply LDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HDEp1Mtmp : rk(D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HDEp1eq HDEp1M3).
	assert(HACDEp1eq : rk(A :: C :: D :: E :: p1 :: nil) = 5) by (apply LACDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACDEp1mtmp : rk(A :: C :: D :: E :: p1 :: nil) >= 5) by (solve_hyps_min HACDEp1eq HACDEp1m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: C :: p1 :: nil) (D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (A :: C :: p1 :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: p1 :: D :: E :: p1 :: nil) ((A :: C :: p1 :: nil) ++ (D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1mtmp;try rewrite HT2 in HACDEp1mtmp.
	assert(HT := rule_2 (A :: C :: p1 :: nil) (D :: E :: p1 :: nil) (p1 :: nil) 5 1 3 HACDEp1mtmp Hp1mtmp HDEp1Mtmp Hincl);apply HT.
}

assert(HACp1M : rk(A :: C :: p1 ::  nil) <= 3) (* dim : 5 *) by (solve_hyps_max HACp1eq HACp1M3).
assert(HACp1m : rk(A :: C :: p1 ::  nil) >= 1) by (solve_hyps_min HACp1eq HACp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par LDp1 *)
(* dans la couche 0 *)
Lemma LADEp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: D :: E :: p1 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCECp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ACAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACAp requis par la preuve de (?)ACAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACApm2 : rk(A :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDApm2 : rk(A :: C :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HACDApm3 : rk(A :: C :: D :: Ap :: nil) >= 3).
{
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HABEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: p2 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm2 : rk(A :: C :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm3 : rk(A :: C :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HACDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACDEApm4 : rk(A :: C :: D :: E :: Ap :: nil) >= 4).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 5 1 2 HABCDEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDEApBpm3 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDEApmtmp : rk(A :: C :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HACDEApeq HACDEApm4).
	assert(Hincl : incl (A :: C :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (A :: C :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HACDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : B :: Bp ::   de rang : 1 et 2 *)
assert(HACDEApBpm4 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HBBpMtmp : rk(B :: Bp :: nil) <= 2) by (solve_hyps_max HBBpeq HBBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil) ((B :: Bp :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HBBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDApBpm2 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil) (A :: C :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HACDApBpm3 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HACDApBpMtmp : rk(A :: C :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACDApBpeq HACDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: C :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpp1mtmp HACmtmp HACDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCCp requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HBCCpm2 : rk(B :: C :: Cp :: nil) >= 2).
{
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil) ((B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (B :: nil) 5 1 4 HABCDECpp1mtmp HBmtmp HABDEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HACApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACEApm2 : rk(A :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACEApm3 : rk(A :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: C :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACEApBpm2 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACEApmtmp : rk(A :: C :: E :: Ap :: nil) >= 3) by (solve_hyps_min HACEApeq HACEApm3).
	assert(Hincl : incl (A :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil) (A :: C :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HACEApBpm3 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HACEApBpMtmp : rk(A :: C :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACEApBpeq HACEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: C :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpmtmp HACmtmp HACEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : B :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HBCECpm2 : rk(B :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HBCCpmtmp : rk(B :: C :: Cp :: nil) >= 2) by (solve_hyps_min HBCCpeq HBCCpm2).
	assert(Hincl : incl (B :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (B :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil) (B :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HBCCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HBCECpm3 : rk(B :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (B :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: B :: p1 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (B :: nil) 4 1 2 HABCECpp1mtmp HBmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: nil) (E :: nil) 5 1 4 HABCDECpp1mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: D :: E :: p1 ::  de rang :  3 et 4 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1m3 : rk(A :: D :: E :: p1 :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABDEp1mtmp : rk(A :: B :: D :: E :: p1 :: nil) >= 3) by (solve_hyps_min HABDEp1eq HABDEp1m3).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (A :: B :: p1 :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: D :: E :: p1 :: nil) ((A :: B :: p1 :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEp1mtmp;try rewrite HT2 in HABDEp1mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: nil) (A :: p1 :: nil) 3 2 2 HABDEp1mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 ::  de rang :  5 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1m4 : rk(A :: D :: E :: p1 :: nil) >= 4).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1eq : rk(A :: C :: D :: E :: p1 :: nil) = 5) by (apply LACDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACDEp1mtmp : rk(A :: C :: D :: E :: p1 :: nil) >= 5) by (solve_hyps_min HACDEp1eq HACDEp1m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (C :: p1 :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1mtmp;try rewrite HT2 in HACDEp1mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: nil) (p1 :: nil) 5 1 2 HACDEp1mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

assert(HADEp1M : rk(A :: D :: E :: p1 ::  nil) <= 4) (* dim : 5 *) by (solve_hyps_max HADEp1eq HADEp1M4).
assert(HADEp1m : rk(A :: D :: E :: p1 ::  nil) >= 1) by (solve_hyps_min HADEp1eq HADEp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par LDp1 *)
(* dans la couche 0 *)
Lemma LDp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(D :: p1 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour AEp1 requis par la preuve de (?)Dp1 pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HAEp1m2 : rk(A :: E :: p1 :: nil) >= 2).
{
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p1 :: nil) (A :: E :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p1 :: nil) (A :: E :: p1 :: nil) 2 2 HAp1mtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour Dp1 requis par la preuve de (?)Dp1 pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 4 -2 et 5*)
assert(HDp1m2 : rk(D :: p1 :: nil) >= 2).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 3) by (solve_hyps_max HAEp1eq HAEp1M3).
	assert(HADEp1eq : rk(A :: D :: E :: p1 :: nil) = 4) by (apply LADEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADEp1mtmp : rk(A :: D :: E :: p1 :: nil) >= 4) by (solve_hyps_min HADEp1eq HADEp1m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (D :: p1 :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: A :: E :: p1 :: nil) ((D :: p1 :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1mtmp;try rewrite HT2 in HADEp1mtmp.
	assert(HT := rule_2 (D :: p1 :: nil) (A :: E :: p1 :: nil) (p1 :: nil) 4 1 3 HADEp1mtmp Hp1mtmp HAEp1Mtmp Hincl);apply HT.
}

assert(HDp1M : rk(D :: p1 ::  nil) <= 2) (* dim : 5 *) by (solve_hyps_max HDp1eq HDp1M2).
assert(HDp1m : rk(D :: p1 ::  nil) >= 1) by (solve_hyps_min HDp1eq HDp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par LADp1 *)
(* dans la couche 0 *)
Lemma LADp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: D :: p1 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour Ep1 requis par la preuve de (?)ADp1 pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HADp1m2 : rk(A :: D :: p1 :: nil) >= 2).
{
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p1 :: nil) (A :: D :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p1 :: nil) (A :: D :: p1 :: nil) 2 2 HAp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 4 -2 et 5*)
assert(HADp1m3 : rk(A :: D :: p1 :: nil) >= 3).
{
	assert(HEp1Mtmp : rk(E :: p1 :: nil) <= 2) by (solve_hyps_max HEp1eq HEp1M2).
	assert(HADEp1eq : rk(A :: D :: E :: p1 :: nil) = 4) by (apply LADEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADEp1mtmp : rk(A :: D :: E :: p1 :: nil) >= 4) by (solve_hyps_min HADEp1eq HADEp1m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: D :: p1 :: nil) (E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (A :: D :: p1 :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p1 :: E :: p1 :: nil) ((A :: D :: p1 :: nil) ++ (E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1mtmp;try rewrite HT2 in HADEp1mtmp.
	assert(HT := rule_2 (A :: D :: p1 :: nil) (E :: p1 :: nil) (p1 :: nil) 4 1 2 HADEp1mtmp Hp1mtmp HEp1Mtmp Hincl);apply HT.
}

assert(HADp1M : rk(A :: D :: p1 ::  nil) <= 3) (* dim : 5 *) by (solve_hyps_max HADp1eq HADp1M3).
assert(HADp1m : rk(A :: D :: p1 ::  nil) >= 1) by (solve_hyps_min HADp1eq HADp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par LABDp1 *)
(* dans la couche 0 *)
Lemma LABDEp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: B :: D :: E :: p1 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 ::  de rang :  5 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HABDEp1m4 : rk(A :: B :: D :: E :: p1 :: nil) >= 4).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HABCDEp1eq : rk(A :: B :: C :: D :: E :: p1 :: nil) = 5) by (apply LABCDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HABCDEp1mtmp : rk(A :: B :: C :: D :: E :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEp1eq HABCDEp1m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: nil) (C :: p1 :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: B :: D :: E :: p1 :: nil) ((C :: p1 :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1mtmp;try rewrite HT2 in HABCDEp1mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: B :: D :: E :: p1 :: nil) (p1 :: nil) 5 1 2 HABCDEp1mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

assert(HABDEp1M : rk(A :: B :: D :: E :: p1 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max HABDEp1eq HABDEp1M5).
assert(HABDEp1m : rk(A :: B :: D :: E :: p1 ::  nil) >= 1) by (solve_hyps_min HABDEp1eq HABDEp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par LABDp1 *)
(* dans la couche 0 *)
Lemma LEp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(E :: p1 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour Ep1 requis par la preuve de (?)Ep1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 2) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: D :: E :: p1 ::  de rang :  4 et 4 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: D :: p1 ::   de rang : 3 et 3 *)
assert(HEp1m2 : rk(E :: p1 :: nil) >= 2).
{
	assert(HADp1eq : rk(A :: D :: p1 :: nil) = 3) by (apply LADp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 3) by (solve_hyps_max HADp1eq HADp1M3).
	assert(HADEp1eq : rk(A :: D :: E :: p1 :: nil) = 4) by (apply LADEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADEp1mtmp : rk(A :: D :: E :: p1 :: nil) >= 4) by (solve_hyps_min HADEp1eq HADEp1m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: D :: p1 :: nil) (E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (A :: D :: p1 :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p1 :: E :: p1 :: nil) ((A :: D :: p1 :: nil) ++ (E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1mtmp;try rewrite HT2 in HADEp1mtmp.
	assert(HT := rule_4 (A :: D :: p1 :: nil) (E :: p1 :: nil) (p1 :: nil) 4 1 3 HADEp1mtmp Hp1mtmp HADp1Mtmp Hincl); apply HT.
}

assert(HEp1M : rk(E :: p1 ::  nil) <= 2) (* dim : 5 *) by (solve_hyps_max HEp1eq HEp1M2).
assert(HEp1m : rk(E :: p1 ::  nil) >= 1) by (solve_hyps_min HEp1eq HEp1m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LABDp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: B :: D :: p1 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABDp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABDp1m2 : rk(A :: B :: D :: p1 :: nil) >= 2).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: Ap :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (E :: Ap :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: D :: p1 :: nil) ((E :: Ap :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: D :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HEApMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 4 -2 et 4*)
assert(HABDp1m3 : rk(A :: B :: D :: p1 :: nil) >= 3).
{
	assert(HEp1eq : rk(E :: p1 :: nil) = 2) by (apply LEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HEp1Mtmp : rk(E :: p1 :: nil) <= 2) by (solve_hyps_max HEp1eq HEp1M2).
	assert(HABDEp1eq : rk(A :: B :: D :: E :: p1 :: nil) = 4) by (apply LABDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HABDEp1mtmp : rk(A :: B :: D :: E :: p1 :: nil) >= 4) by (solve_hyps_min HABDEp1eq HABDEp1m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: B :: D :: p1 :: nil) (E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (A :: B :: D :: p1 :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: p1 :: E :: p1 :: nil) ((A :: B :: D :: p1 :: nil) ++ (E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEp1mtmp;try rewrite HT2 in HABDEp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: p1 :: nil) (E :: p1 :: nil) (p1 :: nil) 4 1 2 HABDEp1mtmp Hp1mtmp HEp1Mtmp Hincl);apply HT.
}

assert(HABDp1M : rk(A :: B :: D :: p1 ::  nil) <= 4) (* dim : 5 *) by (solve_hyps_max HABDp1eq HABDp1M4).
assert(HABDp1m : rk(A :: B :: D :: p1 ::  nil) >= 1) by (solve_hyps_min HABDp1eq HABDp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par Lp2p3 *)
(* dans constructLemma(), requis par LAEp2p3p4 *)
(* dans constructLemma(), requis par LADEp2p3p4 *)
(* dans la couche 0 *)
Lemma LAEp2p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: E :: p2 :: p4 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour AEp2p4 requis par la preuve de (?)AEp2p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour AEp2p4 requis par la preuve de (?)AEp2p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ADEp1p2p4 requis par la preuve de (?)AEp2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p2p4 requis par la preuve de (?)ABCDEp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p2p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p4 requis par la preuve de (?)ABCDECpp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p2p4 requis par la preuve de (?)ABCDEApBpp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p2p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCDEApp2 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp2m5 : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp2 requis par la preuve de (?)ACDp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACDp2M3 : rk(A :: C :: D :: p2 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p2 :: nil) (D :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p2 :: nil) ((D :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HDMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp2M4 : rk(A :: C :: D :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp2Mtmp : rk(A :: C :: D :: p2 :: nil) <= 3) by (solve_hyps_max HACDp2eq HACDp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p2 :: nil) (E :: A :: C :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p2 :: nil) ((E :: nil) ++ (A :: C :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p2 :: nil) (nil) 1 3 0 HEMtmp HACDp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp2M5 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HACDEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp2m4 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp2 requis par la preuve de (?)ADp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp2M2 : rk(A :: D :: p2 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p2 :: nil) (D :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p2 :: nil) ((D :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p2 :: nil) (nil) 1 1 0 HDMtmp HAp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp2M3 : rk(A :: D :: E :: p2 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp2Mtmp : rk(A :: D :: p2 :: nil) <= 2) by (solve_hyps_max HADp2eq HADp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: nil) (E :: A :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p2 :: nil) ((E :: nil) ++ (A :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p2 :: nil) (nil) 1 2 0 HEMtmp HADp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p2 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp2m2 : rk(A :: D :: E :: p2 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp2mtmp : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HACDEApp2eq HACDEApp2m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p2 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp2mtmp;try rewrite HT2 in HACDEApp2mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (nil) 4 0 2 HACDEApp2mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: p2 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp2Mtmp : rk(A :: D :: E :: p2 :: nil) <= 3) by (solve_hyps_max HADEp2eq HADEp2M3).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (A :: nil) 5 1 3 HABCDEApp2mtmp HAmtmp HADEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp2m3 : rk(A :: C :: D :: E :: p2 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 5 0 2 HABCDEApp2mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((A :: B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (A :: nil) 5 1 4 HABCDEApp2mtmp HAmtmp HACDEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp2 requis par la preuve de (?)ABCEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp2M4 : rk(A :: B :: C :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp2Mtmp : rk(A :: B :: C :: p2 :: nil) <= 3) by (solve_hyps_max HABCp2eq HABCp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p2 :: nil) (E :: A :: B :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p2 :: nil) ((E :: nil) ++ (A :: B :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p2 :: nil) (nil) 1 3 0 HEMtmp HABCp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp2M5 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp2Mtmp : rk(A :: B :: C :: E :: p2 :: nil) <= 4) by (solve_hyps_max HABCEp2eq HABCEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: A :: B :: C :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HABCEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m2 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m3 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp2m4 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCEApp2mtmp : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HABCEApp2eq HABCEApp2m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (A :: B :: C :: E :: Ap :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p2 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp2mtmp;try rewrite HT2 in HABCEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil) (A :: nil) 4 1 1 HABCEApp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p2p4m2 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p2p4eq HABCDEApBpp1p2p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p2p4mtmp;try rewrite HT2 in HABCDEApBpp1p2p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p2p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p2p4m3 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p4eq HABCDECpp1p2p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p4mtmp;try rewrite HT2 in HABCDECpp1p2p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p2p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p4m4 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 4).
{
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p2p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p4eq HABCDEp1p2p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p4mtmp;try rewrite HT2 in HABCDEp1p2p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p2p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p4m5 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEp1p2p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p4eq HABCDEp1p2p4m5).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p4mtmp;try rewrite HT2 in HABCDEp1p2p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: p1 :: nil) 5 2 2 HABCDEp1p2p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ADEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEDpp1p2p4 requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEDpp1p2p4 requis par la preuve de (?)ABCDEDpp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEDpp1p2p4m5 : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CDp requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDEp1p2p4 requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AE requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACECp requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACAp requis par la preuve de (?)ACAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACApm2 : rk(A :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDApm2 : rk(A :: C :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HACDApm3 : rk(A :: C :: D :: Ap :: nil) >= 3).
{
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HABEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm2 : rk(A :: C :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm3 : rk(A :: C :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HACDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACDEApm4 : rk(A :: C :: D :: E :: Ap :: nil) >= 4).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 5 1 2 HABCDEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDEApBpm3 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDEApmtmp : rk(A :: C :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HACDEApeq HACDEApm4).
	assert(Hincl : incl (A :: C :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (A :: C :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HACDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : B :: Bp ::   de rang : 1 et 2 *)
assert(HACDEApBpm4 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HBBpMtmp : rk(B :: Bp :: nil) <= 2) by (solve_hyps_max HBBpeq HBBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil) ((B :: Bp :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HBBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDApBpm2 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil) (A :: C :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HACDApBpm3 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HACDApBpMtmp : rk(A :: C :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACDApBpeq HACDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: C :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpp1mtmp HACmtmp HACDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ACCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACCp requis par la preuve de (?)ACCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACCpm2 : rk(A :: C :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: C :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HACApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACEApm2 : rk(A :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACEApm3 : rk(A :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: C :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACEApBpm2 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACEApmtmp : rk(A :: C :: E :: Ap :: nil) >= 3) by (solve_hyps_min HACEApeq HACEApm3).
	assert(Hincl : incl (A :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil) (A :: C :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HACEApBpm3 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HACEApBpMtmp : rk(A :: C :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACEApBpeq HACEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: C :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpmtmp HACmtmp HACEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HACECpm2 : rk(A :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HACCpmtmp : rk(A :: C :: Cp :: nil) >= 2) by (solve_hyps_min HACCpeq HACCpm2).
	assert(Hincl : incl (A :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil) (A :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HACCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACECpm3 : rk(A :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: p1 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCECpp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEp1p2p4 requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : A :: E ::  de rang :  1 et 2 	 A : A :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABDEp1p2p4m2 : rk(A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) >= 2).
{
	assert(HACECpMtmp : rk(A :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HACECpeq HACECpM4).
	assert(HABCDECpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p4eq HABCDECpp1p2p4m5).
	assert(HAEmtmp : rk(A :: E :: nil) >= 1) by (solve_hyps_min HAEeq HAEm1).
	assert(Hincl : incl (A :: E :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p4mtmp;try rewrite HT2 in HABCDECpp1p2p4mtmp.
	assert(HT := rule_4 (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: E :: nil) 5 1 4 HABCDECpp1p2p4mtmp HAEmtmp HACECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Dp ::   de rang : 1 et 2 *)
assert(HABDEp1p2p4m3 : rk(A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) >= 3).
{
	assert(HCDpMtmp : rk(C :: Dp :: nil) <= 2) by (solve_hyps_max HCDpeq HCDpM2).
	assert(HABCDEDpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEDpp1p2p4eq HABCDEDpp1p2p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 :: nil) (C :: Dp :: A :: B :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Dp :: A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) ((C :: Dp :: nil) ++ (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEDpp1p2p4mtmp;try rewrite HT2 in HABCDEDpp1p2p4mtmp.
	assert(HT := rule_4 (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) (nil) 5 0 2 HABCDEDpp1p2p4mtmp Hmtmp HCDpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCECp requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCCp requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HBCCpm2 : rk(B :: C :: Cp :: nil) >= 2).
{
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil) ((B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (B :: nil) 5 1 4 HABCDECpp1mtmp HBmtmp HABDEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : B :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HBCECpm2 : rk(B :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HBCCpmtmp : rk(B :: C :: Cp :: nil) >= 2) by (solve_hyps_min HBCCpeq HBCCpm2).
	assert(Hincl : incl (B :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (B :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil) (B :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HBCCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HBCECpm3 : rk(B :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (B :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: B :: p1 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (B :: nil) 4 1 2 HABCECpp1mtmp HBmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1p2p4m2 : rk(A :: D :: E :: p1 :: p2 :: p4 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p4eq HABCDECpp1p2p4m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p4 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p4mtmp;try rewrite HT2 in HABCDECpp1p2p4mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil) (E :: nil) 5 1 4 HABCDECpp1p2p4mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: D :: E :: p1 :: p2 :: p4 ::  de rang :  3 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p2p4m3 : rk(A :: D :: E :: p1 :: p2 :: p4 :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABDEp1p2p4mtmp : rk(A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) >= 3) by (solve_hyps_min HABDEp1p2p4eq HABDEp1p2p4m3).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: B :: p1 :: A :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEp1p2p4mtmp;try rewrite HT2 in HABDEp1p2p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: p1 :: nil) 3 2 2 HABDEp1p2p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p2p4m4 : rk(A :: D :: E :: p1 :: p2 :: p4 :: nil) >= 4).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p2p4mtmp : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HACDEp1p2p4eq HACDEp1p2p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: p2 :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p2p4mtmp;try rewrite HT2 in HACDEp1p2p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil) (p1 :: nil) 5 1 2 HACDEp1p2p4mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour AEp2p4 requis par la preuve de (?)AEp2p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: D :: E :: p1 :: p2 :: p4 ::  de rang :  4 et 6 	 AiB : A ::  de rang :  1 et 1 	 A : A :: D :: p1 ::   de rang : 3 et 3 *)
assert(HAEp2p4m2 : rk(A :: E :: p2 :: p4 :: nil) >= 2).
{
	assert(HADp1eq : rk(A :: D :: p1 :: nil) = 3) by (apply LADp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 3) by (solve_hyps_max HADp1eq HADp1M3).
	assert(HADEp1p2p4mtmp : rk(A :: D :: E :: p1 :: p2 :: p4 :: nil) >= 4) by (solve_hyps_min HADEp1p2p4eq HADEp1p2p4m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: D :: p1 :: nil) (A :: E :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: D :: p1 :: A :: E :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p1 :: A :: E :: p2 :: p4 :: nil) ((A :: D :: p1 :: nil) ++ (A :: E :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1p2p4mtmp;try rewrite HT2 in HADEp1p2p4mtmp.
	assert(HT := rule_4 (A :: D :: p1 :: nil) (A :: E :: p2 :: p4 :: nil) (A :: nil) 4 1 3 HADEp1p2p4mtmp HAmtmp HADp1Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp2p4M3 : rk(A :: E :: p2 :: p4 :: nil) <= 3).
{
	assert(Hp2Mtmp : rk(p2 :: nil) <= 1) by (solve_hyps_max Hp2eq Hp2M1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p2 :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p2 :: p4 :: nil) (p2 :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p2 :: A :: E :: p4 :: nil) ((p2 :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p2 :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 Hp2Mtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 -4 et -2*)
assert(HAEp2p4M2 : rk(A :: E :: p2 :: p4 :: nil) <= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p2 :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p2 :: p4 :: nil) (A :: p2 :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: A :: E :: p4 :: nil) ((A :: p2 :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (A :: E :: p4 :: nil) (A :: nil) 1 2 1 HAp2Mtmp HAEp4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

assert(HAEp2p4M : rk(A :: E :: p2 :: p4 ::  nil) <= 4) (* dim : 5 *) by (solve_hyps_max HAEp2p4eq HAEp2p4M4).
assert(HAEp2p4m : rk(A :: E :: p2 :: p4 ::  nil) >= 1) by (solve_hyps_min HAEp2p4eq HAEp2p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LADEp2p3p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: D :: E :: p2 :: p3 :: p4 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ADEp2p3p4 requis par la preuve de (?)ADEp2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 3 pour ADEp2p4 requis par la preuve de (?)ADEp2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 3 pour ADEp4 requis par la preuve de (?)ADEp2p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 5 pour ACDEp1p4 requis par la preuve de (?)ADEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 5 pour ABCDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp4 requis par la preuve de (?)ABCDEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ACDEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ABCDEApp4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp4m5 : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp4 requis par la preuve de (?)ACDEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACEp4 requis par la preuve de (?)ACDEp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACEp4 requis par la preuve de (?)ACEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEp4 requis par la preuve de (?)ACEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACEp4M3 : rk(A :: C :: E :: p4 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: E :: p4 :: nil) (C :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: E :: p4 :: nil) ((C :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HCMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HACEp4m2 : rk(A :: C :: E :: p4 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: C :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: C :: E :: p4 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp4 requis par la preuve de (?)ACDEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp4M4 : rk(A :: C :: D :: E :: p4 :: nil) <= 4).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACEp4Mtmp : rk(A :: C :: E :: p4 :: nil) <= 3) by (solve_hyps_max HACEp4eq HACEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p4 :: nil) (D :: A :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: E :: p4 :: nil) ((D :: nil) ++ (A :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: E :: p4 :: nil) (nil) 1 3 0 HDMtmp HACEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp4m3 : rk(A :: C :: D :: E :: p4 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp4mtmp : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApp4eq HABCDEApp4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p4 :: nil) (B :: Ap :: A :: C :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p4 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp4mtmp;try rewrite HT2 in HABCDEApp4mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p4 :: nil) (nil) 5 0 2 HABCDEApp4mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p4 requis par la preuve de (?)ABCDEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p4 requis par la preuve de (?)ABCDEp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HABCDEp1p4M5 : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) <= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HACDEp4Mtmp : rk(A :: C :: D :: E :: p4 :: nil) <= 4) by (solve_hyps_max HACDEp4eq HACDEp4M4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p4 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p4 :: nil) (A :: nil) 2 4 1 HABp1Mtmp HACDEp4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p4 requis par la preuve de (?)ABCDECpp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p4 requis par la preuve de (?)ABCDEApBpp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCDEApp2 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp2m5 : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp2 requis par la preuve de (?)ACDp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACDp2M3 : rk(A :: C :: D :: p2 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p2 :: nil) (D :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p2 :: nil) ((D :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HDMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp2M4 : rk(A :: C :: D :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp2Mtmp : rk(A :: C :: D :: p2 :: nil) <= 3) by (solve_hyps_max HACDp2eq HACDp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p2 :: nil) (E :: A :: C :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p2 :: nil) ((E :: nil) ++ (A :: C :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p2 :: nil) (nil) 1 3 0 HEMtmp HACDp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp2M5 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HACDEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp2m4 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp2 requis par la preuve de (?)ADp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp2M2 : rk(A :: D :: p2 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p2 :: nil) (D :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p2 :: nil) ((D :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p2 :: nil) (nil) 1 1 0 HDMtmp HAp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp2M3 : rk(A :: D :: E :: p2 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp2Mtmp : rk(A :: D :: p2 :: nil) <= 2) by (solve_hyps_max HADp2eq HADp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: nil) (E :: A :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p2 :: nil) ((E :: nil) ++ (A :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p2 :: nil) (nil) 1 2 0 HEMtmp HADp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p2 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp2m2 : rk(A :: D :: E :: p2 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp2mtmp : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HACDEApp2eq HACDEApp2m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p2 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp2mtmp;try rewrite HT2 in HACDEApp2mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (nil) 4 0 2 HACDEApp2mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: p2 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp2Mtmp : rk(A :: D :: E :: p2 :: nil) <= 3) by (solve_hyps_max HADEp2eq HADEp2M3).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (A :: nil) 5 1 3 HABCDEApp2mtmp HAmtmp HADEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp2m3 : rk(A :: C :: D :: E :: p2 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 5 0 2 HABCDEApp2mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((A :: B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (A :: nil) 5 1 4 HABCDEApp2mtmp HAmtmp HACDEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp2 requis par la preuve de (?)ABCEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp2M4 : rk(A :: B :: C :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp2Mtmp : rk(A :: B :: C :: p2 :: nil) <= 3) by (solve_hyps_max HABCp2eq HABCp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p2 :: nil) (E :: A :: B :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p2 :: nil) ((E :: nil) ++ (A :: B :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p2 :: nil) (nil) 1 3 0 HEMtmp HABCp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp2M5 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp2Mtmp : rk(A :: B :: C :: E :: p2 :: nil) <= 4) by (solve_hyps_max HABCEp2eq HABCEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: A :: B :: C :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HABCEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m2 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m3 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp2m4 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCEApp2mtmp : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HABCEApp2eq HABCEApp2m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (A :: B :: C :: E :: Ap :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p2 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp2mtmp;try rewrite HT2 in HABCEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil) (A :: nil) 4 1 1 HABCEApp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p4m2 : rk(A :: C :: D :: E :: p1 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p4eq HABCDEApBpp1p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p4mtmp;try rewrite HT2 in HABCDEApBpp1p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p4m3 : rk(A :: C :: D :: E :: p1 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p4eq HABCDECpp1p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p4mtmp;try rewrite HT2 in HABCDECpp1p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1p4M5 : rk(A :: C :: D :: E :: p1 :: p4 :: nil) <= 5).
{
	assert(Hp1Mtmp : rk(p1 :: nil) <= 1) by (solve_hyps_max Hp1eq Hp1M1).
	assert(HACDEp4Mtmp : rk(A :: C :: D :: E :: p4 :: nil) <= 4) by (solve_hyps_max HACDEp4eq HACDEp4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: nil) (A :: C :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p4 :: nil) (p1 :: A :: C :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: A :: C :: D :: E :: p4 :: nil) ((p1 :: nil) ++ (A :: C :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: nil) (A :: C :: D :: E :: p4 :: nil) (nil) 1 4 0 Hp1Mtmp HACDEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p4m4 : rk(A :: C :: D :: E :: p1 :: p4 :: nil) >= 4).
{
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p4eq HABCDEp1p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p4mtmp;try rewrite HT2 in HABCDEp1p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 5) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p4 ::  de rang :  5 et 5 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p4m5 : rk(A :: C :: D :: E :: p1 :: p4 :: nil) >= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEp1p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p4eq HABCDEp1p4m5).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p4 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p4mtmp;try rewrite HT2 in HABCDEp1p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil) (A :: p1 :: nil) 5 2 2 HABCDEp1p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp4 requis par la preuve de (?)ADEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp4 requis par la preuve de (?)ADEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp4 requis par la preuve de (?)ACDEApp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp4 requis par la preuve de (?)ACDEApp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp4M5 : rk(A :: C :: D :: E :: Ap :: p4 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp4Mtmp : rk(A :: C :: D :: E :: p4 :: nil) <= 4) by (solve_hyps_max HACDEp4eq HACDEp4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p4 :: nil) (Ap :: A :: C :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p4 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p4 :: nil) (nil) 1 4 0 HApMtmp HACDEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p4 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp4m4 : rk(A :: C :: D :: E :: Ap :: p4 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp4mtmp : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApp4eq HABCDEApp4m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p4 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p4 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp4mtmp;try rewrite HT2 in HABCDEApp4mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p4 :: nil) (Ap :: nil) 5 1 2 HABCDEApp4mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp4 requis par la preuve de (?)ADEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp4 requis par la preuve de (?)ADEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADEp4M3 : rk(A :: D :: E :: p4 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p4 :: nil) (D :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: E :: p4 :: nil) ((D :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HDMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p4 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp4m2 : rk(A :: D :: E :: p4 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp4mtmp : rk(A :: C :: D :: E :: Ap :: p4 :: nil) >= 4) by (solve_hyps_min HACDEApp4eq HACDEApp4m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p4 :: nil) (C :: Ap :: A :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p4 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp4mtmp;try rewrite HT2 in HACDEApp4mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p4 :: nil) (nil) 4 0 2 HACDEApp4mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p4 ::  de rang :  5 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp4m3 : rk(A :: D :: E :: p4 :: nil) >= 3).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p4mtmp : rk(A :: C :: D :: E :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HACDEp1p4eq HACDEp1p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p4mtmp;try rewrite HT2 in HACDEp1p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p4 :: nil) (nil) 5 0 2 HACDEp1p4mtmp Hmtmp HCp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ADEp2p4 requis par la preuve de (?)ADEp2p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ADEp2p4 requis par la preuve de (?)ADEp2p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ADEp2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p2p4 requis par la preuve de (?)ABCDEp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p2p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p4 requis par la preuve de (?)ABCDECpp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p2p4 requis par la preuve de (?)ABCDEApBpp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p2p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p2p4m2 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p2p4eq HABCDEApBpp1p2p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p2p4mtmp;try rewrite HT2 in HABCDEApBpp1p2p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p2p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p2p4m3 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p4eq HABCDECpp1p2p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p4mtmp;try rewrite HT2 in HABCDECpp1p2p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p2p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p4m4 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 4).
{
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p2p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p4eq HABCDEp1p2p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p4mtmp;try rewrite HT2 in HABCDEp1p2p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p2p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p4m5 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEp1p2p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p4eq HABCDEp1p2p4m5).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p4mtmp;try rewrite HT2 in HABCDEp1p2p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: p1 :: nil) 5 2 2 HABCDEp1p2p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ADEp2p4 requis par la preuve de (?)ADEp2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp2p4 requis par la preuve de (?)ADEp2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp2p4 requis par la preuve de (?)ABCDECpp2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp2p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCECp requis par la preuve de (?)ADEp2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACAp requis par la preuve de (?)ACAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACApm2 : rk(A :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDApm2 : rk(A :: C :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HACDApm3 : rk(A :: C :: D :: Ap :: nil) >= 3).
{
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HABEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm2 : rk(A :: C :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm3 : rk(A :: C :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HACDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACDEApm4 : rk(A :: C :: D :: E :: Ap :: nil) >= 4).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 5 1 2 HABCDEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDEApBpm3 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDEApmtmp : rk(A :: C :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HACDEApeq HACDEApm4).
	assert(Hincl : incl (A :: C :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (A :: C :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HACDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : B :: Bp ::   de rang : 1 et 2 *)
assert(HACDEApBpm4 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HBBpMtmp : rk(B :: Bp :: nil) <= 2) by (solve_hyps_max HBBpeq HBBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil) ((B :: Bp :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HBBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDApBpm2 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil) (A :: C :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HACDApBpm3 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HACDApBpMtmp : rk(A :: C :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACDApBpeq HACDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: C :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpp1mtmp HACmtmp HACDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCCp requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HBCCpm2 : rk(B :: C :: Cp :: nil) >= 2).
{
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil) ((B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (B :: nil) 5 1 4 HABCDECpp1mtmp HBmtmp HABDEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HACApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACEApm2 : rk(A :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACEApm3 : rk(A :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: C :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACEApBpm2 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACEApmtmp : rk(A :: C :: E :: Ap :: nil) >= 3) by (solve_hyps_min HACEApeq HACEApm3).
	assert(Hincl : incl (A :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil) (A :: C :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HACEApBpm3 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HACEApBpMtmp : rk(A :: C :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACEApBpeq HACEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: C :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpmtmp HACmtmp HACEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : B :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HBCECpm2 : rk(B :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HBCCpmtmp : rk(B :: C :: Cp :: nil) >= 2) by (solve_hyps_min HBCCpeq HBCCpm2).
	assert(Hincl : incl (B :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (B :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil) (B :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HBCCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HBCECpm3 : rk(B :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (B :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: B :: p1 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (B :: nil) 4 1 2 HABCECpp1mtmp HBmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ADEp2p4 requis par la preuve de (?)ADEp2p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp2p4m2 : rk(A :: D :: E :: p2 :: p4 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp2p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp2p4eq HABCDECpp2p4m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p2 :: p4 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p2 :: p4 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp2p4mtmp;try rewrite HT2 in HABCDECpp2p4mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p2 :: p4 :: nil) (E :: nil) 5 1 4 HABCDECpp2p4mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -1 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp2p4m3 : rk(A :: D :: E :: p2 :: p4 :: nil) >= 3).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p2p4mtmp : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HACDEp1p2p4eq HACDEp1p2p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p2 :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p2p4mtmp;try rewrite HT2 in HACDEp1p2p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p2 :: p4 :: nil) (nil) 5 0 2 HACDEp1p2p4mtmp Hmtmp HCp1Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp2p4M4 : rk(A :: D :: E :: p2 :: p4 :: nil) <= 4).
{
	assert(Hp2Mtmp : rk(p2 :: nil) <= 1) by (solve_hyps_max Hp2eq Hp2M1).
	assert(HADEp4Mtmp : rk(A :: D :: E :: p4 :: nil) <= 3) by (solve_hyps_max HADEp4eq HADEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p2 :: nil) (A :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: p4 :: nil) (p2 :: A :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p2 :: A :: D :: E :: p4 :: nil) ((p2 :: nil) ++ (A :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p2 :: nil) (A :: D :: E :: p4 :: nil) (nil) 1 3 0 Hp2Mtmp HADEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HADEp2p4M3 : rk(A :: D :: E :: p2 :: p4 :: nil) <= 3).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HADEp4Mtmp : rk(A :: D :: E :: p4 :: nil) <= 3) by (solve_hyps_max HADEp4eq HADEp4M3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p2 :: nil) (A :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: p4 :: nil) (A :: p2 :: A :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: A :: D :: E :: p4 :: nil) ((A :: p2 :: nil) ++ (A :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (A :: D :: E :: p4 :: nil) (A :: nil) 1 3 1 HAp2Mtmp HADEp4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ADEp2p3p4 requis par la preuve de (?)ADEp2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour DEp3p4 requis par la preuve de (?)ADEp2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)DEp3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p3p4 requis par la preuve de (?)ABCDEp1p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p3p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p3p4 requis par la preuve de (?)ABCDECpp1p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p3p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p3p4 requis par la preuve de (?)ABCDEApBpp1p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p3p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p3p4m2 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p3p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p3p4eq HABCDEApBpp1p3p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p3p4mtmp;try rewrite HT2 in HABCDEApBpp1p3p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p3p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p3p4m3 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p4eq HABCDECpp1p3p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p4mtmp;try rewrite HT2 in HABCDECpp1p3p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p3p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p3p4m4 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 4).
{
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p3p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p3p4eq HABCDEp1p3p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p3p4mtmp;try rewrite HT2 in HABCDEp1p3p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p3p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p3p4m5 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEp1p3p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p3p4eq HABCDEp1p3p4m5).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p3p4mtmp;try rewrite HT2 in HABCDEp1p3p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: p1 :: nil) 5 2 2 HABCDEp1p3p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour DEp3p4 requis par la preuve de (?)DEp3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : A :: C :: p1 ::   de rang : 3 et 3 *)
assert(HDEp3p4m2 : rk(D :: E :: p3 :: p4 :: nil) >= 2).
{
	assert(HACp1eq : rk(A :: C :: p1 :: nil) = 3) by (apply LACp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 3) by (solve_hyps_max HACp1eq HACp1M3).
	assert(HACDEp1p3p4mtmp : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HACDEp1p3p4eq HACDEp1p3p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: C :: p1 :: nil) (D :: E :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: C :: p1 :: D :: E :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: p1 :: D :: E :: p3 :: p4 :: nil) ((A :: C :: p1 :: nil) ++ (D :: E :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p3p4mtmp;try rewrite HT2 in HACDEp1p3p4mtmp.
	assert(HT := rule_4 (A :: C :: p1 :: nil) (D :: E :: p3 :: p4 :: nil) (nil) 5 0 3 HACDEp1p3p4mtmp Hmtmp HACp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ADEp2p3p4 requis par la preuve de (?)ADEp2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ADEp2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p2p3p4 requis par la preuve de (?)ABCDEp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p2p3p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p3p4 requis par la preuve de (?)ABCDECpp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p3p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p2p3p4 requis par la preuve de (?)ABCDEApBpp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p2p3p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p2p3p4m2 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p2p3p4eq HABCDEApBpp1p2p3p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p2p3p4mtmp;try rewrite HT2 in HABCDEApBpp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p2p3p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p2p3p4m3 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p4eq HABCDECpp1p2p3p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p4mtmp;try rewrite HT2 in HABCDECpp1p2p3p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p2p3p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p3p4m4 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 4).
{
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p3p4eq HABCDEp1p2p3p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p3p4mtmp;try rewrite HT2 in HABCDEp1p2p3p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p2p3p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p3p4m5 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p3p4eq HABCDEp1p2p3p4m5).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p3p4mtmp;try rewrite HT2 in HABCDEp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p1 :: nil) 5 2 2 HABCDEp1p2p3p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADEp2p3p4 requis par la preuve de (?)ADEp2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp2p3p4 requis par la preuve de (?)ADEp2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp2p3p4 requis par la preuve de (?)ABCDECpp2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp2p3p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADEp2p3p4 requis par la preuve de (?)ADEp2p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp2p3p4m2 : rk(A :: D :: E :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp2p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp2p3p4eq HABCDECpp2p3p4m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p2 :: p3 :: p4 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p2 :: p3 :: p4 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp2p3p4mtmp;try rewrite HT2 in HABCDECpp2p3p4mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p2 :: p3 :: p4 :: nil) (E :: nil) 5 1 4 HABCDECpp2p3p4mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp2p3p4m3 : rk(A :: D :: E :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p2p3p4mtmp : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HACDEp1p2p3p4eq HACDEp1p2p3p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p2 :: p3 :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p2p3p4mtmp;try rewrite HT2 in HACDEp1p2p3p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p2 :: p3 :: p4 :: nil) (nil) 5 0 2 HACDEp1p2p3p4mtmp Hmtmp HCp1Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HADEp2p3p4M5 : rk(A :: D :: E :: p2 :: p3 :: p4 :: nil) <= 5).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HDEp3p4Mtmp : rk(D :: E :: p3 :: p4 :: nil) <= 4) by (solve_hyps_max HDEp3p4eq HDEp3p4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p2 :: nil) (D :: E :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: p3 :: p4 :: nil) (A :: p2 :: D :: E :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: D :: E :: p3 :: p4 :: nil) ((A :: p2 :: nil) ++ (D :: E :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (D :: E :: p3 :: p4 :: nil) (nil) 1 4 0 HAp2Mtmp HDEp3p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp2p3p4M4 : rk(A :: D :: E :: p2 :: p3 :: p4 :: nil) <= 4).
{
	assert(Hp3Mtmp : rk(p3 :: nil) <= 1) by (solve_hyps_max Hp3eq Hp3M1).
	assert(HADEp2p4Mtmp : rk(A :: D :: E :: p2 :: p4 :: nil) <= 3) by (solve_hyps_max HADEp2p4eq HADEp2p4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p3 :: nil) (A :: D :: E :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: p3 :: p4 :: nil) (p3 :: A :: D :: E :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p3 :: A :: D :: E :: p2 :: p4 :: nil) ((p3 :: nil) ++ (A :: D :: E :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p3 :: nil) (A :: D :: E :: p2 :: p4 :: nil) (nil) 1 3 0 Hp3Mtmp HADEp2p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 4 et -2*)
assert(HADEp2p3p4M3 : rk(A :: D :: E :: p2 :: p3 :: p4 :: nil) <= 3).
{
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(HAEp2p4eq : rk(A :: E :: p2 :: p4 :: nil) = 2) by (apply LAEp2p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HAEp2p4Mtmp : rk(A :: E :: p2 :: p4 :: nil) <= 2) by (solve_hyps_max HAEp2p4eq HAEp2p4M2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: D :: p3 :: nil) (A :: E :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: p3 :: p4 :: nil) (A :: D :: p3 :: A :: E :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p3 :: A :: E :: p2 :: p4 :: nil) ((A :: D :: p3 :: nil) ++ (A :: E :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: D :: p3 :: nil) (A :: E :: p2 :: p4 :: nil) (A :: nil) 2 2 1 HADp3Mtmp HAEp2p4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

assert(HADEp2p3p4M : rk(A :: D :: E :: p2 :: p3 :: p4 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HADEp2p3p4m : rk(A :: D :: E :: p2 :: p3 :: p4 ::  nil) >= 1) by (solve_hyps_min HADEp2p3p4eq HADEp2p3p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LAEp2p3p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: E :: p2 :: p3 :: p4 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour AEp2p3p4 requis par la preuve de (?)AEp2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour AEp2p3p4 requis par la preuve de (?)AEp2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour Ep3p4 requis par la preuve de (?)AEp2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour AEp2p3p4 requis par la preuve de (?)AEp2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ADEp1p2p3p4 requis par la preuve de (?)AEp2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p2p3p4 requis par la preuve de (?)ABCDEp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p2p3p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p3p4 requis par la preuve de (?)ABCDECpp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p3p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p2p3p4 requis par la preuve de (?)ABCDEApBpp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p2p3p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCDEApp2 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp2m5 : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp2 requis par la preuve de (?)ACDp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACDp2M3 : rk(A :: C :: D :: p2 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p2 :: nil) (D :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p2 :: nil) ((D :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HDMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp2M4 : rk(A :: C :: D :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp2Mtmp : rk(A :: C :: D :: p2 :: nil) <= 3) by (solve_hyps_max HACDp2eq HACDp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p2 :: nil) (E :: A :: C :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p2 :: nil) ((E :: nil) ++ (A :: C :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p2 :: nil) (nil) 1 3 0 HEMtmp HACDp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp2M5 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HACDEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp2m4 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp2 requis par la preuve de (?)ADp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp2M2 : rk(A :: D :: p2 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p2 :: nil) (D :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p2 :: nil) ((D :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p2 :: nil) (nil) 1 1 0 HDMtmp HAp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp2M3 : rk(A :: D :: E :: p2 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp2Mtmp : rk(A :: D :: p2 :: nil) <= 2) by (solve_hyps_max HADp2eq HADp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: nil) (E :: A :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p2 :: nil) ((E :: nil) ++ (A :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p2 :: nil) (nil) 1 2 0 HEMtmp HADp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p2 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp2m2 : rk(A :: D :: E :: p2 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp2mtmp : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HACDEApp2eq HACDEApp2m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p2 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp2mtmp;try rewrite HT2 in HACDEApp2mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (nil) 4 0 2 HACDEApp2mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: p2 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp2Mtmp : rk(A :: D :: E :: p2 :: nil) <= 3) by (solve_hyps_max HADEp2eq HADEp2M3).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (A :: nil) 5 1 3 HABCDEApp2mtmp HAmtmp HADEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp2m3 : rk(A :: C :: D :: E :: p2 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 5 0 2 HABCDEApp2mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((A :: B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (A :: nil) 5 1 4 HABCDEApp2mtmp HAmtmp HACDEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp2 requis par la preuve de (?)ABCEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp2M4 : rk(A :: B :: C :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp2Mtmp : rk(A :: B :: C :: p2 :: nil) <= 3) by (solve_hyps_max HABCp2eq HABCp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p2 :: nil) (E :: A :: B :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p2 :: nil) ((E :: nil) ++ (A :: B :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p2 :: nil) (nil) 1 3 0 HEMtmp HABCp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp2M5 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp2Mtmp : rk(A :: B :: C :: E :: p2 :: nil) <= 4) by (solve_hyps_max HABCEp2eq HABCEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: A :: B :: C :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HABCEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m2 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m3 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp2m4 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCEApp2mtmp : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HABCEApp2eq HABCEApp2m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (A :: B :: C :: E :: Ap :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p2 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp2mtmp;try rewrite HT2 in HABCEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil) (A :: nil) 4 1 1 HABCEApp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p2p3p4m2 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p2p3p4eq HABCDEApBpp1p2p3p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p2p3p4mtmp;try rewrite HT2 in HABCDEApBpp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p2p3p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p2p3p4m3 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p4eq HABCDECpp1p2p3p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p4mtmp;try rewrite HT2 in HABCDECpp1p2p3p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p2p3p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p3p4m4 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 4).
{
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p3p4eq HABCDEp1p2p3p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p3p4mtmp;try rewrite HT2 in HABCDEp1p2p3p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p2p3p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p3p4m5 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p3p4eq HABCDEp1p2p3p4m5).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p3p4mtmp;try rewrite HT2 in HABCDEp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p1 :: nil) 5 2 2 HABCDEp1p2p3p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ADEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEDpp1p2p3p4 requis par la preuve de (?)ABDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEDpp1p2p3p4 requis par la preuve de (?)ABCDEDpp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEDpp1p2p3p4m5 : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CDp requis par la preuve de (?)ABDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDEp1p2p3p4 requis par la preuve de (?)ABDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AE requis par la preuve de (?)ABDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACECp requis par la preuve de (?)ABDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACAp requis par la preuve de (?)ACAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACApm2 : rk(A :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDApm2 : rk(A :: C :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HACDApm3 : rk(A :: C :: D :: Ap :: nil) >= 3).
{
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HABEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm2 : rk(A :: C :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm3 : rk(A :: C :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HACDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACDEApm4 : rk(A :: C :: D :: E :: Ap :: nil) >= 4).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 5 1 2 HABCDEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDEApBpm3 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDEApmtmp : rk(A :: C :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HACDEApeq HACDEApm4).
	assert(Hincl : incl (A :: C :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (A :: C :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HACDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : B :: Bp ::   de rang : 1 et 2 *)
assert(HACDEApBpm4 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HBBpMtmp : rk(B :: Bp :: nil) <= 2) by (solve_hyps_max HBBpeq HBBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil) ((B :: Bp :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HBBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDApBpm2 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil) (A :: C :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HACDApBpm3 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HACDApBpMtmp : rk(A :: C :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACDApBpeq HACDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: C :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpp1mtmp HACmtmp HACDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ACCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACCp requis par la preuve de (?)ACCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACCpm2 : rk(A :: C :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: C :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HACApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACEApm2 : rk(A :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACEApm3 : rk(A :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: C :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACEApBpm2 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACEApmtmp : rk(A :: C :: E :: Ap :: nil) >= 3) by (solve_hyps_min HACEApeq HACEApm3).
	assert(Hincl : incl (A :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil) (A :: C :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HACEApBpm3 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HACEApBpMtmp : rk(A :: C :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACEApBpeq HACEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: C :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpmtmp HACmtmp HACEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HACECpm2 : rk(A :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HACCpmtmp : rk(A :: C :: Cp :: nil) >= 2) by (solve_hyps_min HACCpeq HACCpm2).
	assert(Hincl : incl (A :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil) (A :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HACCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACECpm3 : rk(A :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: p1 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCECpp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEp1p2p3p4 requis par la preuve de (?)ABDEp1p2p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: E ::  de rang :  1 et 2 	 A : A :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABDEp1p2p3p4m2 : rk(A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HACECpMtmp : rk(A :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HACECpeq HACECpM4).
	assert(HABCDECpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p4eq HABCDECpp1p2p3p4m5).
	assert(HAEmtmp : rk(A :: E :: nil) >= 1) by (solve_hyps_min HAEeq HAEm1).
	assert(Hincl : incl (A :: E :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p4mtmp;try rewrite HT2 in HABCDECpp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: E :: nil) 5 1 4 HABCDECpp1p2p3p4mtmp HAEmtmp HACECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Dp ::   de rang : 1 et 2 *)
assert(HABDEp1p2p3p4m3 : rk(A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HCDpMtmp : rk(C :: Dp :: nil) <= 2) by (solve_hyps_max HCDpeq HCDpM2).
	assert(HABCDEDpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEDpp1p2p3p4eq HABCDEDpp1p2p3p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 :: nil) (C :: Dp :: A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Dp :: A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((C :: Dp :: nil) ++ (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEDpp1p2p3p4mtmp;try rewrite HT2 in HABCDEDpp1p2p3p4mtmp.
	assert(HT := rule_4 (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (nil) 5 0 2 HABCDEDpp1p2p3p4mtmp Hmtmp HCDpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCECp requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCCp requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HBCCpm2 : rk(B :: C :: Cp :: nil) >= 2).
{
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil) ((B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (B :: nil) 5 1 4 HABCDECpp1mtmp HBmtmp HABDEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : B :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HBCECpm2 : rk(B :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HBCCpmtmp : rk(B :: C :: Cp :: nil) >= 2) by (solve_hyps_min HBCCpeq HBCCpm2).
	assert(Hincl : incl (B :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (B :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil) (B :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HBCCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HBCECpm3 : rk(B :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (B :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: B :: p1 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (B :: nil) 4 1 2 HABCECpp1mtmp HBmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1p2p3p4m2 : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p4eq HABCDECpp1p2p3p4m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p4mtmp;try rewrite HT2 in HABCDECpp1p2p3p4mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (E :: nil) 5 1 4 HABCDECpp1p2p3p4mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  3 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p2p3p4m3 : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABDEp1p2p3p4mtmp : rk(A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 3) by (solve_hyps_min HABDEp1p2p3p4eq HABDEp1p2p3p4m3).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: B :: p1 :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEp1p2p3p4mtmp;try rewrite HT2 in HABDEp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p1 :: nil) 3 2 2 HABDEp1p2p3p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p2p3p4m4 : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 4).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p2p3p4mtmp : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HACDEp1p2p3p4eq HACDEp1p2p3p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p2p3p4mtmp;try rewrite HT2 in HACDEp1p2p3p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (p1 :: nil) 5 1 2 HACDEp1p2p3p4mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour AEp2p3p4 requis par la preuve de (?)AEp2p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  4 et 6 	 AiB : A ::  de rang :  1 et 1 	 A : A :: D :: p1 ::   de rang : 3 et 3 *)
assert(HAEp2p3p4m2 : rk(A :: E :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HADp1eq : rk(A :: D :: p1 :: nil) = 3) by (apply LADp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 3) by (solve_hyps_max HADp1eq HADp1M3).
	assert(HADEp1p2p3p4mtmp : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 4) by (solve_hyps_min HADEp1p2p3p4eq HADEp1p2p3p4m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: D :: p1 :: nil) (A :: E :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: D :: p1 :: A :: E :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p1 :: A :: E :: p2 :: p3 :: p4 :: nil) ((A :: D :: p1 :: nil) ++ (A :: E :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1p2p3p4mtmp;try rewrite HT2 in HADEp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: D :: p1 :: nil) (A :: E :: p2 :: p3 :: p4 :: nil) (A :: nil) 4 1 3 HADEp1p2p3p4mtmp HAmtmp HADp1Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HAEp2p3p4M4 : rk(A :: E :: p2 :: p3 :: p4 :: nil) <= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HEp3p4Mtmp : rk(E :: p3 :: p4 :: nil) <= 3) by (solve_hyps_max HEp3p4eq HEp3p4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p2 :: nil) (E :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p2 :: p3 :: p4 :: nil) (A :: p2 :: E :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: E :: p3 :: p4 :: nil) ((A :: p2 :: nil) ++ (E :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (E :: p3 :: p4 :: nil) (nil) 1 3 0 HAp2Mtmp HEp3p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 4 et 5*)
assert(HAEp2p3p4M3 : rk(A :: E :: p2 :: p3 :: p4 :: nil) <= 3).
{
	assert(Hp3Mtmp : rk(p3 :: nil) <= 1) by (solve_hyps_max Hp3eq Hp3M1).
	assert(HAEp2p4eq : rk(A :: E :: p2 :: p4 :: nil) = 2) by (apply LAEp2p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HAEp2p4Mtmp : rk(A :: E :: p2 :: p4 :: nil) <= 2) by (solve_hyps_max HAEp2p4eq HAEp2p4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p3 :: nil) (A :: E :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p2 :: p3 :: p4 :: nil) (p3 :: A :: E :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p3 :: A :: E :: p2 :: p4 :: nil) ((p3 :: nil) ++ (A :: E :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p3 :: nil) (A :: E :: p2 :: p4 :: nil) (nil) 1 2 0 Hp3Mtmp HAEp2p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 3) *)
(* marque des antécédents AUB AiB A: 4 -4 et -4*)
(* ensembles concernés AUB : A :: D :: E :: p2 :: p3 :: p4 ::  de rang :  3 et 3 	 AiB : A :: p3 ::  de rang :  2 et 2 	 A : A :: D :: p3 ::   de rang : 2 et 2 *)
assert(HAEp2p3p4m3 : rk(A :: E :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(HADEp2p3p4eq : rk(A :: D :: E :: p2 :: p3 :: p4 :: nil) = 3) by (apply LADEp2p3p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADEp2p3p4mtmp : rk(A :: D :: E :: p2 :: p3 :: p4 :: nil) >= 3) by (solve_hyps_min HADEp2p3p4eq HADEp2p3p4m3).
	assert(HAp3mtmp : rk(A :: p3 :: nil) >= 2) by (solve_hyps_min HAp3eq HAp3m2).
	assert(Hincl : incl (A :: p3 :: nil) (list_inter (A :: D :: p3 :: nil) (A :: E :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: p3 :: p4 :: nil) (A :: D :: p3 :: A :: E :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p3 :: A :: E :: p2 :: p3 :: p4 :: nil) ((A :: D :: p3 :: nil) ++ (A :: E :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp2p3p4mtmp;try rewrite HT2 in HADEp2p3p4mtmp.
	assert(HT := rule_4 (A :: D :: p3 :: nil) (A :: E :: p2 :: p3 :: p4 :: nil) (A :: p3 :: nil) 3 2 2 HADEp2p3p4mtmp HAp3mtmp HADp3Mtmp Hincl); apply HT.
}

assert(HAEp2p3p4M : rk(A :: E :: p2 :: p3 :: p4 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max HAEp2p3p4eq HAEp2p3p4M5).
assert(HAEp2p3p4m : rk(A :: E :: p2 :: p3 :: p4 ::  nil) >= 1) by (solve_hyps_min HAEp2p3p4eq HAEp2p3p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma Lp2p3 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(p2 :: p3 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour p2p3 requis par la preuve de (?)p2p3 pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 4 -2 et 4*)
assert(Hp2p3m2 : rk(p2 :: p3 :: nil) >= 2).
{
	assert(HAEp2p4eq : rk(A :: E :: p2 :: p4 :: nil) = 2) by (apply LAEp2p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HAEp2p4Mtmp : rk(A :: E :: p2 :: p4 :: nil) <= 2) by (solve_hyps_max HAEp2p4eq HAEp2p4M2).
	assert(HAEp2p3p4eq : rk(A :: E :: p2 :: p3 :: p4 :: nil) = 3) by (apply LAEp2p3p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HAEp2p3p4mtmp : rk(A :: E :: p2 :: p3 :: p4 :: nil) >= 3) by (solve_hyps_min HAEp2p3p4eq HAEp2p3p4m3).
	assert(Hp2mtmp : rk(p2 :: nil) >= 1) by (solve_hyps_min Hp2eq Hp2m1).
	assert(Hincl : incl (p2 :: nil) (list_inter (p2 :: p3 :: nil) (A :: E :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p2 :: p3 :: p4 :: nil) (p2 :: p3 :: A :: E :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p2 :: p3 :: A :: E :: p2 :: p4 :: nil) ((p2 :: p3 :: nil) ++ (A :: E :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HAEp2p3p4mtmp;try rewrite HT2 in HAEp2p3p4mtmp.
	assert(HT := rule_2 (p2 :: p3 :: nil) (A :: E :: p2 :: p4 :: nil) (p2 :: nil) 3 1 2 HAEp2p3p4mtmp Hp2mtmp HAEp2p4Mtmp Hincl);apply HT.
}

assert(Hp2p3M : rk(p2 :: p3 ::  nil) <= 2) (* dim : 5 *) by (solve_hyps_max Hp2p3eq Hp2p3M2).
assert(Hp2p3m : rk(p2 :: p3 ::  nil) >= 1) by (solve_hyps_min Hp2p3eq Hp2p3m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LAp2p3 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: p2 :: p3 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour Ap2p3 requis par la preuve de (?)Ap2p3 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour Ap2p3 requis par la preuve de (?)Ap2p3 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 -2 et 5*)
assert(HAp2p3M2 : rk(A :: p2 :: p3 :: nil) <= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hp3Mtmp : rk(p3 :: nil) <= 1) by (solve_hyps_max Hp3eq Hp3M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p2 :: nil) (p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p2 :: p3 :: nil) (A :: p2 :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: p3 :: nil) ((A :: p2 :: nil) ++ (p3 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (p3 :: nil) (nil) 1 1 0 HAp2Mtmp Hp3Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HAp2p3m2 : rk(A :: p2 :: p3 :: nil) >= 2).
{
	assert(HAp3mtmp : rk(A :: p3 :: nil) >= 2) by (solve_hyps_min HAp3eq HAp3m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p3 :: nil) (A :: p2 :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p3 :: nil) (A :: p2 :: p3 :: nil) 2 2 HAp3mtmp Hcomp Hincl);apply HT.
}

assert(HAp2p3M : rk(A :: p2 :: p3 ::  nil) <= 3) (* dim : 5 *) by (solve_hyps_max HAp2p3eq HAp2p3M3).
assert(HAp2p3m : rk(A :: p2 :: p3 ::  nil) >= 1) by (solve_hyps_min HAp2p3eq HAp2p3m1).
intuition.
Qed.

(* dans constructLemma(), requis par LADEp4 *)
(* dans constructLemma(), requis par LACDEp1p4 *)
(* dans constructLemma(), requis par LABCDEp1p4 *)
(* dans la couche 0 *)
Lemma LABCDEp1p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: p1 :: p4 ::  nil) = 5.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp4 requis par la preuve de (?)ABCDEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ACDEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ABCDEApp4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp4m5 : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp4 requis par la preuve de (?)ACDEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACEp4 requis par la preuve de (?)ACDEp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACEp4 requis par la preuve de (?)ACEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEp4 requis par la preuve de (?)ACEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACEp4M3 : rk(A :: C :: E :: p4 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: E :: p4 :: nil) (C :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: E :: p4 :: nil) ((C :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HCMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HACEp4m2 : rk(A :: C :: E :: p4 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: C :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: C :: E :: p4 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp4 requis par la preuve de (?)ACDEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp4M4 : rk(A :: C :: D :: E :: p4 :: nil) <= 4).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACEp4Mtmp : rk(A :: C :: E :: p4 :: nil) <= 3) by (solve_hyps_max HACEp4eq HACEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p4 :: nil) (D :: A :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: E :: p4 :: nil) ((D :: nil) ++ (A :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: E :: p4 :: nil) (nil) 1 3 0 HDMtmp HACEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp4m3 : rk(A :: C :: D :: E :: p4 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp4mtmp : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApp4eq HABCDEApp4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p4 :: nil) (B :: Ap :: A :: C :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p4 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp4mtmp;try rewrite HT2 in HABCDEApp4mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p4 :: nil) (nil) 5 0 2 HABCDEApp4mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p4 requis par la preuve de (?)ABCDEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p4 requis par la preuve de (?)ABCDEp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HABCDEp1p4M5 : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) <= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HACDEp4Mtmp : rk(A :: C :: D :: E :: p4 :: nil) <= 4) by (solve_hyps_max HACDEp4eq HACDEp4M4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p4 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p4 :: nil) (A :: nil) 2 4 1 HABp1Mtmp HACDEp4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

assert(HABCDEp1p4M : rk(A :: B :: C :: D :: E :: p1 :: p4 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HABCDEp1p4m : rk(A :: B :: C :: D :: E :: p1 :: p4 ::  nil) >= 1) by (solve_hyps_min HABCDEp1p4eq HABCDEp1p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LACDEp1p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: C :: D :: E :: p1 :: p4 ::  nil) = 5.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p4 requis par la preuve de (?)ABCDEp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp4 requis par la preuve de (?)ACDEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ACDEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ABCDEApp4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp4m5 : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp4 requis par la preuve de (?)ACDEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACEp4 requis par la preuve de (?)ACDEp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACEp4 requis par la preuve de (?)ACEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEp4 requis par la preuve de (?)ACEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACEp4M3 : rk(A :: C :: E :: p4 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: E :: p4 :: nil) (C :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: E :: p4 :: nil) ((C :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HCMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HACEp4m2 : rk(A :: C :: E :: p4 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: C :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: C :: E :: p4 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp4 requis par la preuve de (?)ACDEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp4M4 : rk(A :: C :: D :: E :: p4 :: nil) <= 4).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACEp4Mtmp : rk(A :: C :: E :: p4 :: nil) <= 3) by (solve_hyps_max HACEp4eq HACEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p4 :: nil) (D :: A :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: E :: p4 :: nil) ((D :: nil) ++ (A :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: E :: p4 :: nil) (nil) 1 3 0 HDMtmp HACEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp4m3 : rk(A :: C :: D :: E :: p4 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp4mtmp : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApp4eq HABCDEApp4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p4 :: nil) (B :: Ap :: A :: C :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p4 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp4mtmp;try rewrite HT2 in HABCDEApp4mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p4 :: nil) (nil) 5 0 2 HABCDEApp4mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p4 requis par la preuve de (?)ABCDECpp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p4 requis par la preuve de (?)ABCDEApBpp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCDEApp2 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp2m5 : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp2 requis par la preuve de (?)ACDp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACDp2M3 : rk(A :: C :: D :: p2 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p2 :: nil) (D :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p2 :: nil) ((D :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HDMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp2M4 : rk(A :: C :: D :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp2Mtmp : rk(A :: C :: D :: p2 :: nil) <= 3) by (solve_hyps_max HACDp2eq HACDp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p2 :: nil) (E :: A :: C :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p2 :: nil) ((E :: nil) ++ (A :: C :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p2 :: nil) (nil) 1 3 0 HEMtmp HACDp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp2M5 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HACDEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp2m4 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp2 requis par la preuve de (?)ADp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp2M2 : rk(A :: D :: p2 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p2 :: nil) (D :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p2 :: nil) ((D :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p2 :: nil) (nil) 1 1 0 HDMtmp HAp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp2M3 : rk(A :: D :: E :: p2 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp2Mtmp : rk(A :: D :: p2 :: nil) <= 2) by (solve_hyps_max HADp2eq HADp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: nil) (E :: A :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p2 :: nil) ((E :: nil) ++ (A :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p2 :: nil) (nil) 1 2 0 HEMtmp HADp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p2 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp2m2 : rk(A :: D :: E :: p2 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp2mtmp : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HACDEApp2eq HACDEApp2m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p2 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp2mtmp;try rewrite HT2 in HACDEApp2mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (nil) 4 0 2 HACDEApp2mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: p2 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp2Mtmp : rk(A :: D :: E :: p2 :: nil) <= 3) by (solve_hyps_max HADEp2eq HADEp2M3).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (A :: nil) 5 1 3 HABCDEApp2mtmp HAmtmp HADEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp2m3 : rk(A :: C :: D :: E :: p2 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 5 0 2 HABCDEApp2mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((A :: B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (A :: nil) 5 1 4 HABCDEApp2mtmp HAmtmp HACDEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp2 requis par la preuve de (?)ABCEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp2M4 : rk(A :: B :: C :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp2Mtmp : rk(A :: B :: C :: p2 :: nil) <= 3) by (solve_hyps_max HABCp2eq HABCp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p2 :: nil) (E :: A :: B :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p2 :: nil) ((E :: nil) ++ (A :: B :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p2 :: nil) (nil) 1 3 0 HEMtmp HABCp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp2M5 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp2Mtmp : rk(A :: B :: C :: E :: p2 :: nil) <= 4) by (solve_hyps_max HABCEp2eq HABCEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: A :: B :: C :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HABCEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m2 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m3 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp2m4 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCEApp2mtmp : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HABCEApp2eq HABCEApp2m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (A :: B :: C :: E :: Ap :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p2 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp2mtmp;try rewrite HT2 in HABCEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil) (A :: nil) 4 1 1 HABCEApp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p4m2 : rk(A :: C :: D :: E :: p1 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p4eq HABCDEApBpp1p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p4mtmp;try rewrite HT2 in HABCDEApBpp1p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p4m3 : rk(A :: C :: D :: E :: p1 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p4eq HABCDECpp1p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p4mtmp;try rewrite HT2 in HABCDECpp1p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1p4M5 : rk(A :: C :: D :: E :: p1 :: p4 :: nil) <= 5).
{
	assert(Hp1Mtmp : rk(p1 :: nil) <= 1) by (solve_hyps_max Hp1eq Hp1M1).
	assert(HACDEp4Mtmp : rk(A :: C :: D :: E :: p4 :: nil) <= 4) by (solve_hyps_max HACDEp4eq HACDEp4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: nil) (A :: C :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p4 :: nil) (p1 :: A :: C :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: A :: C :: D :: E :: p4 :: nil) ((p1 :: nil) ++ (A :: C :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: nil) (A :: C :: D :: E :: p4 :: nil) (nil) 1 4 0 Hp1Mtmp HACDEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p4m4 : rk(A :: C :: D :: E :: p1 :: p4 :: nil) >= 4).
{
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p4eq HABCDEp1p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p4mtmp;try rewrite HT2 in HABCDEp1p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 5) *)
(* marque des antécédents AUB AiB A: 4 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p4 ::  de rang :  5 et 5 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p4m5 : rk(A :: C :: D :: E :: p1 :: p4 :: nil) >= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEp1p4eq : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) = 5) by (apply LABCDEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HABCDEp1p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p4eq HABCDEp1p4m5).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p4 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p4mtmp;try rewrite HT2 in HABCDEp1p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil) (A :: p1 :: nil) 5 2 2 HABCDEp1p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

assert(HACDEp1p4M : rk(A :: C :: D :: E :: p1 :: p4 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HACDEp1p4m : rk(A :: C :: D :: E :: p1 :: p4 ::  nil) >= 1) by (solve_hyps_min HACDEp1p4eq HACDEp1p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LADEp4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: D :: E :: p4 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp4 requis par la preuve de (?)ADEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp4 requis par la preuve de (?)ADEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ACDEApp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ABCDEApp4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp4m5 : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp4 requis par la preuve de (?)ACDEApp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp4 requis par la preuve de (?)ACDEApp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACEp4 requis par la preuve de (?)ACDEp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACEp4 requis par la preuve de (?)ACEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEp4 requis par la preuve de (?)ACEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACEp4M3 : rk(A :: C :: E :: p4 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: E :: p4 :: nil) (C :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: E :: p4 :: nil) ((C :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HCMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HACEp4m2 : rk(A :: C :: E :: p4 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: C :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: C :: E :: p4 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp4 requis par la preuve de (?)ACDEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp4M4 : rk(A :: C :: D :: E :: p4 :: nil) <= 4).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACEp4Mtmp : rk(A :: C :: E :: p4 :: nil) <= 3) by (solve_hyps_max HACEp4eq HACEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p4 :: nil) (D :: A :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: E :: p4 :: nil) ((D :: nil) ++ (A :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: E :: p4 :: nil) (nil) 1 3 0 HDMtmp HACEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp4 requis par la preuve de (?)ACDEApp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp4M5 : rk(A :: C :: D :: E :: Ap :: p4 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp4Mtmp : rk(A :: C :: D :: E :: p4 :: nil) <= 4) by (solve_hyps_max HACDEp4eq HACDEp4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p4 :: nil) (Ap :: A :: C :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p4 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p4 :: nil) (nil) 1 4 0 HApMtmp HACDEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p4 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp4m4 : rk(A :: C :: D :: E :: Ap :: p4 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp4mtmp : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApp4eq HABCDEApp4m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p4 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p4 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp4mtmp;try rewrite HT2 in HABCDEApp4mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p4 :: nil) (Ap :: nil) 5 1 2 HABCDEApp4mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp4 requis par la preuve de (?)ADEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp4 requis par la preuve de (?)ADEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADEp4M3 : rk(A :: D :: E :: p4 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p4 :: nil) (D :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: E :: p4 :: nil) ((D :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HDMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p4 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp4m2 : rk(A :: D :: E :: p4 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp4mtmp : rk(A :: C :: D :: E :: Ap :: p4 :: nil) >= 4) by (solve_hyps_min HACDEApp4eq HACDEApp4m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p4 :: nil) (C :: Ap :: A :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p4 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp4mtmp;try rewrite HT2 in HACDEApp4mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p4 :: nil) (nil) 4 0 2 HACDEApp4mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 3) *)
(* marque des antécédents AUB AiB A: 4 -1 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p4 ::  de rang :  5 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp4m3 : rk(A :: D :: E :: p4 :: nil) >= 3).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p4eq : rk(A :: C :: D :: E :: p1 :: p4 :: nil) = 5) by (apply LACDEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACDEp1p4mtmp : rk(A :: C :: D :: E :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HACDEp1p4eq HACDEp1p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p4mtmp;try rewrite HT2 in HACDEp1p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p4 :: nil) (nil) 5 0 2 HACDEp1p4mtmp Hmtmp HCp1Mtmp Hincl); apply HT.
}

assert(HADEp4M : rk(A :: D :: E :: p4 ::  nil) <= 4) (* dim : 5 *) by (solve_hyps_max HADEp4eq HADEp4M4).
assert(HADEp4m : rk(A :: D :: E :: p4 ::  nil) >= 1) by (solve_hyps_min HADEp4eq HADEp4m1).
intuition.
Qed.

(* dans constructLemma(), requis par LAEp1p4 *)
(* dans la couche 0 *)
Lemma LADEp1p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: D :: E :: p1 :: p4 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ADEp1p4 requis par la preuve de (?)ADEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1p4 requis par la preuve de (?)ADEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp4 requis par la preuve de (?)ABDEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp4 requis par la preuve de (?)ADEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ACDEApp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ABCDEApp4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp4m5 : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp4 requis par la preuve de (?)ACDEApp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp4 requis par la preuve de (?)ACDEApp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACEp4 requis par la preuve de (?)ACDEp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACEp4 requis par la preuve de (?)ACEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEp4 requis par la preuve de (?)ACEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACEp4M3 : rk(A :: C :: E :: p4 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: E :: p4 :: nil) (C :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: E :: p4 :: nil) ((C :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HCMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HACEp4m2 : rk(A :: C :: E :: p4 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: C :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: C :: E :: p4 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp4 requis par la preuve de (?)ACDEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp4M4 : rk(A :: C :: D :: E :: p4 :: nil) <= 4).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACEp4Mtmp : rk(A :: C :: E :: p4 :: nil) <= 3) by (solve_hyps_max HACEp4eq HACEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p4 :: nil) (D :: A :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: E :: p4 :: nil) ((D :: nil) ++ (A :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: E :: p4 :: nil) (nil) 1 3 0 HDMtmp HACEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp4 requis par la preuve de (?)ACDEApp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp4M5 : rk(A :: C :: D :: E :: Ap :: p4 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp4Mtmp : rk(A :: C :: D :: E :: p4 :: nil) <= 4) by (solve_hyps_max HACDEp4eq HACDEp4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p4 :: nil) (Ap :: A :: C :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p4 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p4 :: nil) (nil) 1 4 0 HApMtmp HACDEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p4 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp4m4 : rk(A :: C :: D :: E :: Ap :: p4 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp4mtmp : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApp4eq HABCDEApp4m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p4 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p4 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp4mtmp;try rewrite HT2 in HABCDEApp4mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p4 :: nil) (Ap :: nil) 5 1 2 HABCDEApp4mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp4 requis par la preuve de (?)ADEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp4 requis par la preuve de (?)ADEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADEp4M3 : rk(A :: D :: E :: p4 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p4 :: nil) (D :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: E :: p4 :: nil) ((D :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HDMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p4 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp4m2 : rk(A :: D :: E :: p4 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp4mtmp : rk(A :: C :: D :: E :: Ap :: p4 :: nil) >= 4) by (solve_hyps_min HACDEApp4eq HACDEApp4m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p4 :: nil) (C :: Ap :: A :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p4 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp4mtmp;try rewrite HT2 in HACDEApp4mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p4 :: nil) (nil) 4 0 2 HACDEApp4mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEp1p4 requis par la preuve de (?)ABDEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp4 requis par la preuve de (?)ABDEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp4 requis par la preuve de (?)ABDEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp4 requis par la preuve de (?)ABDEp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp4 requis par la preuve de (?)ABEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp4M3 : rk(A :: B :: E :: p4 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p4 :: nil) (B :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: E :: p4 :: nil) ((B :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HBMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp4 requis par la preuve de (?)ABDEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp4M4 : rk(A :: B :: D :: E :: p4 :: nil) <= 4).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABEp4Mtmp : rk(A :: B :: E :: p4 :: nil) <= 3) by (solve_hyps_max HABEp4eq HABEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p4 :: nil) (D :: A :: B :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: E :: p4 :: nil) ((D :: nil) ++ (A :: B :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: E :: p4 :: nil) (nil) 1 3 0 HDMtmp HABEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp4m3 : rk(A :: B :: D :: E :: p4 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp4mtmp : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApp4eq HABCDEApp4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p4 :: nil) (C :: Ap :: A :: B :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p4 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp4mtmp;try rewrite HT2 in HABCDEApp4mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p4 :: nil) (nil) 5 0 2 HABCDEApp4mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEp1p4 requis par la preuve de (?)ABDEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEDpp1p4 requis par la preuve de (?)ABDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEDpp1p4 requis par la preuve de (?)ABCDEDpp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEDpp1p4m5 : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CDp requis par la preuve de (?)ABDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDEp1p4 requis par la preuve de (?)ABDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p4 requis par la preuve de (?)ABDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p4 requis par la preuve de (?)ABCDECpp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AE requis par la preuve de (?)ABDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACECp requis par la preuve de (?)ABDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ACAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACAp requis par la preuve de (?)ACAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACApm2 : rk(A :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDApm2 : rk(A :: C :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HACDApm3 : rk(A :: C :: D :: Ap :: nil) >= 3).
{
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HABEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: p2 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm2 : rk(A :: C :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm3 : rk(A :: C :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HACDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACDEApm4 : rk(A :: C :: D :: E :: Ap :: nil) >= 4).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 5 1 2 HABCDEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDEApBpm3 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDEApmtmp : rk(A :: C :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HACDEApeq HACDEApm4).
	assert(Hincl : incl (A :: C :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (A :: C :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HACDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : B :: Bp ::   de rang : 1 et 2 *)
assert(HACDEApBpm4 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HBBpMtmp : rk(B :: Bp :: nil) <= 2) by (solve_hyps_max HBBpeq HBBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil) ((B :: Bp :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HBBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDApBpm2 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil) (A :: C :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HACDApBpm3 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HACDApBpMtmp : rk(A :: C :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACDApBpeq HACDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: C :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpp1mtmp HACmtmp HACDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ACCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACCp requis par la preuve de (?)ACCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACCpm2 : rk(A :: C :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: C :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HACApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACEApm2 : rk(A :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACEApm3 : rk(A :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: C :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACEApBpm2 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACEApmtmp : rk(A :: C :: E :: Ap :: nil) >= 3) by (solve_hyps_min HACEApeq HACEApm3).
	assert(Hincl : incl (A :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil) (A :: C :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HACEApBpm3 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HACEApBpMtmp : rk(A :: C :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACEApBpeq HACEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: C :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpmtmp HACmtmp HACEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HACECpm2 : rk(A :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HACCpmtmp : rk(A :: C :: Cp :: nil) >= 2) by (solve_hyps_min HACCpeq HACCpm2).
	assert(Hincl : incl (A :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil) (A :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HACCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACECpm3 : rk(A :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: p1 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCECpp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEp1p4 requis par la preuve de (?)ABDEp1p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p4 ::  de rang :  5 et 6 	 AiB : A :: E ::  de rang :  1 et 2 	 A : A :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABDEp1p4m2 : rk(A :: B :: D :: E :: p1 :: p4 :: nil) >= 2).
{
	assert(HACECpMtmp : rk(A :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HACECpeq HACECpM4).
	assert(HABCDECpp1p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p4eq HABCDECpp1p4m5).
	assert(HAEmtmp : rk(A :: E :: nil) >= 1) by (solve_hyps_min HAEeq HAEm1).
	assert(Hincl : incl (A :: E :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p4 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p4mtmp;try rewrite HT2 in HABCDECpp1p4mtmp.
	assert(HT := rule_4 (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p4 :: nil) (A :: E :: nil) 5 1 4 HABCDECpp1p4mtmp HAEmtmp HACECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Dp :: p1 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Dp ::   de rang : 1 et 2 *)
assert(HABDEp1p4m3 : rk(A :: B :: D :: E :: p1 :: p4 :: nil) >= 3).
{
	assert(HCDpMtmp : rk(C :: Dp :: nil) <= 2) by (solve_hyps_max HCDpeq HCDpM2).
	assert(HABCDEDpp1p4mtmp : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEDpp1p4eq HABCDEDpp1p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Dp :: p1 :: p4 :: nil) (C :: Dp :: A :: B :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Dp :: A :: B :: D :: E :: p1 :: p4 :: nil) ((C :: Dp :: nil) ++ (A :: B :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEDpp1p4mtmp;try rewrite HT2 in HABCDEDpp1p4mtmp.
	assert(HT := rule_4 (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p4 :: nil) (nil) 5 0 2 HABCDEDpp1p4mtmp Hmtmp HCDpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1p4M5 : rk(A :: B :: D :: E :: p1 :: p4 :: nil) <= 5).
{
	assert(Hp1Mtmp : rk(p1 :: nil) <= 1) by (solve_hyps_max Hp1eq Hp1M1).
	assert(HABDEp4Mtmp : rk(A :: B :: D :: E :: p4 :: nil) <= 4) by (solve_hyps_max HABDEp4eq HABDEp4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: nil) (A :: B :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: p4 :: nil) (p1 :: A :: B :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: A :: B :: D :: E :: p4 :: nil) ((p1 :: nil) ++ (A :: B :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: nil) (A :: B :: D :: E :: p4 :: nil) (nil) 1 4 0 Hp1Mtmp HABDEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HABDEp1p4M4 : rk(A :: B :: D :: E :: p1 :: p4 :: nil) <= 4).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HADEp4Mtmp : rk(A :: D :: E :: p4 :: nil) <= 3) by (solve_hyps_max HADEp4eq HADEp4M3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: p1 :: nil) (A :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: p4 :: nil) (A :: B :: p1 :: A :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: D :: E :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: B :: p1 :: nil) (A :: D :: E :: p4 :: nil) (A :: nil) 2 3 1 HABp1Mtmp HADEp4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ADEp1p4 requis par la preuve de (?)ADEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ADEp1p4 requis par la preuve de (?)ADEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCECp requis par la preuve de (?)ADEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCCp requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HBCCpm2 : rk(B :: C :: Cp :: nil) >= 2).
{
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil) ((B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (B :: nil) 5 1 4 HABCDECpp1mtmp HBmtmp HABDEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : B :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HBCECpm2 : rk(B :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HBCCpmtmp : rk(B :: C :: Cp :: nil) >= 2) by (solve_hyps_min HBCCpeq HBCCpm2).
	assert(Hincl : incl (B :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (B :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil) (B :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HBCCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HBCECpm3 : rk(B :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (B :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: B :: p1 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (B :: nil) 4 1 2 HABCECpp1mtmp HBmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ADEp1p4 requis par la preuve de (?)ADEp1p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p4 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1p4m2 : rk(A :: D :: E :: p1 :: p4 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p4eq HABCDECpp1p4m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p4 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p4mtmp;try rewrite HT2 in HABCDECpp1p4mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p4 :: nil) (E :: nil) 5 1 4 HABCDECpp1p4mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1p4M4 : rk(A :: D :: E :: p1 :: p4 :: nil) <= 4).
{
	assert(Hp1Mtmp : rk(p1 :: nil) <= 1) by (solve_hyps_max Hp1eq Hp1M1).
	assert(HADEp4Mtmp : rk(A :: D :: E :: p4 :: nil) <= 3) by (solve_hyps_max HADEp4eq HADEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: nil) (A :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p4 :: nil) (p1 :: A :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: A :: D :: E :: p4 :: nil) ((p1 :: nil) ++ (A :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: nil) (A :: D :: E :: p4 :: nil) (nil) 1 3 0 Hp1Mtmp HADEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: D :: E :: p1 :: p4 ::  de rang :  3 et 4 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p4m3 : rk(A :: D :: E :: p1 :: p4 :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABDEp1p4mtmp : rk(A :: B :: D :: E :: p1 :: p4 :: nil) >= 3) by (solve_hyps_min HABDEp1p4eq HABDEp1p4m3).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: p4 :: nil) (A :: B :: p1 :: A :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: D :: E :: p1 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEp1p4mtmp;try rewrite HT2 in HABDEp1p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p4 :: nil) (A :: p1 :: nil) 3 2 2 HABDEp1p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p4 ::  de rang :  5 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p4m4 : rk(A :: D :: E :: p1 :: p4 :: nil) >= 4).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p4eq : rk(A :: C :: D :: E :: p1 :: p4 :: nil) = 5) by (apply LACDEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACDEp1p4mtmp : rk(A :: C :: D :: E :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HACDEp1p4eq HACDEp1p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p4mtmp;try rewrite HT2 in HACDEp1p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: p4 :: nil) (p1 :: nil) 5 1 2 HACDEp1p4mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

assert(HADEp1p4M : rk(A :: D :: E :: p1 :: p4 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max HADEp1p4eq HADEp1p4M5).
assert(HADEp1p4m : rk(A :: D :: E :: p1 :: p4 ::  nil) >= 1) by (solve_hyps_min HADEp1p4eq HADEp1p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LAEp1p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: E :: p1 :: p4 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour AEp1p4 requis par la preuve de (?)AEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1p4 requis par la preuve de (?)AEp1p4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour AEp1p4 requis par la preuve de (?)AEp1p4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1p4M3 : rk(A :: E :: p1 :: p4 :: nil) <= 3).
{
	assert(Hp1Mtmp : rk(p1 :: nil) <= 1) by (solve_hyps_max Hp1eq Hp1M1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p4 :: nil) (p1 :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: A :: E :: p4 :: nil) ((p1 :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 Hp1Mtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HAEp1p4m2 : rk(A :: E :: p1 :: p4 :: nil) >= 2).
{
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p1 :: nil) (A :: E :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p1 :: nil) (A :: E :: p1 :: p4 :: nil) 2 2 HAp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 3) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: D :: E :: p1 :: p4 ::  de rang :  4 et 4 	 AiB : p1 ::  de rang :  1 et 1 	 A : D :: p1 ::   de rang : 2 et 2 *)
assert(HAEp1p4m3 : rk(A :: E :: p1 :: p4 :: nil) >= 3).
{
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HDp1Mtmp : rk(D :: p1 :: nil) <= 2) by (solve_hyps_max HDp1eq HDp1M2).
	assert(HADEp1p4eq : rk(A :: D :: E :: p1 :: p4 :: nil) = 4) by (apply LADEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADEp1p4mtmp : rk(A :: D :: E :: p1 :: p4 :: nil) >= 4) by (solve_hyps_min HADEp1p4eq HADEp1p4m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (A :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p4 :: nil) (D :: p1 :: A :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: A :: E :: p1 :: p4 :: nil) ((D :: p1 :: nil) ++ (A :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1p4mtmp;try rewrite HT2 in HADEp1p4mtmp.
	assert(HT := rule_4 (D :: p1 :: nil) (A :: E :: p1 :: p4 :: nil) (p1 :: nil) 4 1 2 HADEp1p4mtmp Hp1mtmp HDp1Mtmp Hincl); apply HT.
}

assert(HAEp1p4M : rk(A :: E :: p1 :: p4 ::  nil) <= 4) (* dim : 5 *) by (solve_hyps_max HAEp1p4eq HAEp1p4M4).
assert(HAEp1p4m : rk(A :: E :: p1 :: p4 ::  nil) >= 1) by (solve_hyps_min HAEp1p4eq HAEp1p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LADEp2p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: D :: E :: p2 :: p4 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ADEp2p4 requis par la preuve de (?)ADEp2p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ADEp2p4 requis par la preuve de (?)ADEp2p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ADEp2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p2p4 requis par la preuve de (?)ABCDEp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p2p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p4 requis par la preuve de (?)ABCDECpp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p2p4 requis par la preuve de (?)ABCDEApBpp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p2p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCDEApp2 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp2m5 : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp2 requis par la preuve de (?)ACDp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACDp2M3 : rk(A :: C :: D :: p2 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p2 :: nil) (D :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p2 :: nil) ((D :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HDMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp2M4 : rk(A :: C :: D :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp2Mtmp : rk(A :: C :: D :: p2 :: nil) <= 3) by (solve_hyps_max HACDp2eq HACDp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p2 :: nil) (E :: A :: C :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p2 :: nil) ((E :: nil) ++ (A :: C :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p2 :: nil) (nil) 1 3 0 HEMtmp HACDp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp2M5 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HACDEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp2m4 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp2 requis par la preuve de (?)ADp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp2M2 : rk(A :: D :: p2 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p2 :: nil) (D :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p2 :: nil) ((D :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p2 :: nil) (nil) 1 1 0 HDMtmp HAp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp2M3 : rk(A :: D :: E :: p2 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp2Mtmp : rk(A :: D :: p2 :: nil) <= 2) by (solve_hyps_max HADp2eq HADp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: nil) (E :: A :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p2 :: nil) ((E :: nil) ++ (A :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p2 :: nil) (nil) 1 2 0 HEMtmp HADp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p2 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp2m2 : rk(A :: D :: E :: p2 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp2mtmp : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HACDEApp2eq HACDEApp2m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p2 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp2mtmp;try rewrite HT2 in HACDEApp2mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (nil) 4 0 2 HACDEApp2mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: p2 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp2Mtmp : rk(A :: D :: E :: p2 :: nil) <= 3) by (solve_hyps_max HADEp2eq HADEp2M3).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (A :: nil) 5 1 3 HABCDEApp2mtmp HAmtmp HADEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp2m3 : rk(A :: C :: D :: E :: p2 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 5 0 2 HABCDEApp2mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((A :: B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (A :: nil) 5 1 4 HABCDEApp2mtmp HAmtmp HACDEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp2 requis par la preuve de (?)ABCEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp2M4 : rk(A :: B :: C :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp2Mtmp : rk(A :: B :: C :: p2 :: nil) <= 3) by (solve_hyps_max HABCp2eq HABCp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p2 :: nil) (E :: A :: B :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p2 :: nil) ((E :: nil) ++ (A :: B :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p2 :: nil) (nil) 1 3 0 HEMtmp HABCp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp2M5 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp2Mtmp : rk(A :: B :: C :: E :: p2 :: nil) <= 4) by (solve_hyps_max HABCEp2eq HABCEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: A :: B :: C :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HABCEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m2 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m3 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp2m4 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCEApp2mtmp : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HABCEApp2eq HABCEApp2m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (A :: B :: C :: E :: Ap :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p2 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp2mtmp;try rewrite HT2 in HABCEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil) (A :: nil) 4 1 1 HABCEApp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p2p4m2 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p2p4eq HABCDEApBpp1p2p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p2p4mtmp;try rewrite HT2 in HABCDEApBpp1p2p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p2p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p2p4m3 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p4eq HABCDECpp1p2p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p4mtmp;try rewrite HT2 in HABCDECpp1p2p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p2p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p4m4 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 4).
{
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p2p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p4eq HABCDEp1p2p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p4mtmp;try rewrite HT2 in HABCDEp1p2p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p2p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p4m5 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEp1p2p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p4eq HABCDEp1p2p4m5).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p4mtmp;try rewrite HT2 in HABCDEp1p2p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: p1 :: nil) 5 2 2 HABCDEp1p2p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ADEp2p4 requis par la preuve de (?)ADEp2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp2p4 requis par la preuve de (?)ADEp2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp2p4 requis par la preuve de (?)ABCDECpp2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp2p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCECp requis par la preuve de (?)ADEp2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACAp requis par la preuve de (?)ACAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACApm2 : rk(A :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDApm2 : rk(A :: C :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HACDApm3 : rk(A :: C :: D :: Ap :: nil) >= 3).
{
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HABEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm2 : rk(A :: C :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm3 : rk(A :: C :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HACDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACDEApm4 : rk(A :: C :: D :: E :: Ap :: nil) >= 4).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 5 1 2 HABCDEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDEApBpm3 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDEApmtmp : rk(A :: C :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HACDEApeq HACDEApm4).
	assert(Hincl : incl (A :: C :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (A :: C :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HACDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : B :: Bp ::   de rang : 1 et 2 *)
assert(HACDEApBpm4 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HBBpMtmp : rk(B :: Bp :: nil) <= 2) by (solve_hyps_max HBBpeq HBBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil) ((B :: Bp :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HBBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDApBpm2 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil) (A :: C :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HACDApBpm3 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HACDApBpMtmp : rk(A :: C :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACDApBpeq HACDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: C :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpp1mtmp HACmtmp HACDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCCp requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HBCCpm2 : rk(B :: C :: Cp :: nil) >= 2).
{
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil) ((B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (B :: nil) 5 1 4 HABCDECpp1mtmp HBmtmp HABDEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HACApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACEApm2 : rk(A :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACEApm3 : rk(A :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: C :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACEApBpm2 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACEApmtmp : rk(A :: C :: E :: Ap :: nil) >= 3) by (solve_hyps_min HACEApeq HACEApm3).
	assert(Hincl : incl (A :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil) (A :: C :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HACEApBpm3 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HACEApBpMtmp : rk(A :: C :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACEApBpeq HACEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: C :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpmtmp HACmtmp HACEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : B :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HBCECpm2 : rk(B :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HBCCpmtmp : rk(B :: C :: Cp :: nil) >= 2) by (solve_hyps_min HBCCpeq HBCCpm2).
	assert(Hincl : incl (B :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (B :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil) (B :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HBCCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HBCECpm3 : rk(B :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (B :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: B :: p1 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (B :: nil) 4 1 2 HABCECpp1mtmp HBmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ADEp2p4 requis par la preuve de (?)ADEp2p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp2p4m2 : rk(A :: D :: E :: p2 :: p4 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp2p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp2p4eq HABCDECpp2p4m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p2 :: p4 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p2 :: p4 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp2p4mtmp;try rewrite HT2 in HABCDECpp2p4mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p2 :: p4 :: nil) (E :: nil) 5 1 4 HABCDECpp2p4mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -1 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp2p4m3 : rk(A :: D :: E :: p2 :: p4 :: nil) >= 3).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p2p4mtmp : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HACDEp1p2p4eq HACDEp1p2p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p2 :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p2p4mtmp;try rewrite HT2 in HACDEp1p2p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p2 :: p4 :: nil) (nil) 5 0 2 HACDEp1p2p4mtmp Hmtmp HCp1Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 4 et 5*)
assert(HADEp2p4M4 : rk(A :: D :: E :: p2 :: p4 :: nil) <= 4).
{
	assert(Hp2Mtmp : rk(p2 :: nil) <= 1) by (solve_hyps_max Hp2eq Hp2M1).
	assert(HADEp4eq : rk(A :: D :: E :: p4 :: nil) = 3) by (apply LADEp4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADEp4Mtmp : rk(A :: D :: E :: p4 :: nil) <= 3) by (solve_hyps_max HADEp4eq HADEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p2 :: nil) (A :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: p4 :: nil) (p2 :: A :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p2 :: A :: D :: E :: p4 :: nil) ((p2 :: nil) ++ (A :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p2 :: nil) (A :: D :: E :: p4 :: nil) (nil) 1 3 0 Hp2Mtmp HADEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 4 et -2*)
assert(HADEp2p4M3 : rk(A :: D :: E :: p2 :: p4 :: nil) <= 3).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HADEp4eq : rk(A :: D :: E :: p4 :: nil) = 3) by (apply LADEp4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADEp4Mtmp : rk(A :: D :: E :: p4 :: nil) <= 3) by (solve_hyps_max HADEp4eq HADEp4M3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p2 :: nil) (A :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: p4 :: nil) (A :: p2 :: A :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: A :: D :: E :: p4 :: nil) ((A :: p2 :: nil) ++ (A :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (A :: D :: E :: p4 :: nil) (A :: nil) 1 3 1 HAp2Mtmp HADEp4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

assert(HADEp2p4M : rk(A :: D :: E :: p2 :: p4 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max HADEp2p4eq HADEp2p4M5).
assert(HADEp2p4m : rk(A :: D :: E :: p2 :: p4 ::  nil) >= 1) by (solve_hyps_min HADEp2p4eq HADEp2p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LAEp1p2p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: E :: p1 :: p2 :: p4 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour AEp1p2p4 requis par la preuve de (?)AEp1p2p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour AEp1p2p4 requis par la preuve de (?)AEp1p2p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ADEp1p2p4 requis par la preuve de (?)AEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p2p4 requis par la preuve de (?)ABCDEp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p2p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p4 requis par la preuve de (?)ABCDECpp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p2p4 requis par la preuve de (?)ABCDEApBpp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p2p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCDEApp2 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp2m5 : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp2 requis par la preuve de (?)ACDp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACDp2M3 : rk(A :: C :: D :: p2 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p2 :: nil) (D :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p2 :: nil) ((D :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HDMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp2M4 : rk(A :: C :: D :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp2Mtmp : rk(A :: C :: D :: p2 :: nil) <= 3) by (solve_hyps_max HACDp2eq HACDp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p2 :: nil) (E :: A :: C :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p2 :: nil) ((E :: nil) ++ (A :: C :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p2 :: nil) (nil) 1 3 0 HEMtmp HACDp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp2M5 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HACDEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp2m4 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp2 requis par la preuve de (?)ADp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp2M2 : rk(A :: D :: p2 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p2 :: nil) (D :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p2 :: nil) ((D :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p2 :: nil) (nil) 1 1 0 HDMtmp HAp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp2M3 : rk(A :: D :: E :: p2 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp2Mtmp : rk(A :: D :: p2 :: nil) <= 2) by (solve_hyps_max HADp2eq HADp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: nil) (E :: A :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p2 :: nil) ((E :: nil) ++ (A :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p2 :: nil) (nil) 1 2 0 HEMtmp HADp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p2 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp2m2 : rk(A :: D :: E :: p2 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp2mtmp : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HACDEApp2eq HACDEApp2m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p2 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp2mtmp;try rewrite HT2 in HACDEApp2mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (nil) 4 0 2 HACDEApp2mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: p2 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp2Mtmp : rk(A :: D :: E :: p2 :: nil) <= 3) by (solve_hyps_max HADEp2eq HADEp2M3).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (A :: nil) 5 1 3 HABCDEApp2mtmp HAmtmp HADEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp2m3 : rk(A :: C :: D :: E :: p2 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 5 0 2 HABCDEApp2mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((A :: B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (A :: nil) 5 1 4 HABCDEApp2mtmp HAmtmp HACDEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp2 requis par la preuve de (?)ABCEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp2M4 : rk(A :: B :: C :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp2Mtmp : rk(A :: B :: C :: p2 :: nil) <= 3) by (solve_hyps_max HABCp2eq HABCp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p2 :: nil) (E :: A :: B :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p2 :: nil) ((E :: nil) ++ (A :: B :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p2 :: nil) (nil) 1 3 0 HEMtmp HABCp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp2M5 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp2Mtmp : rk(A :: B :: C :: E :: p2 :: nil) <= 4) by (solve_hyps_max HABCEp2eq HABCEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: A :: B :: C :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HABCEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m2 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m3 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp2m4 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCEApp2mtmp : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HABCEApp2eq HABCEApp2m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (A :: B :: C :: E :: Ap :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p2 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp2mtmp;try rewrite HT2 in HABCEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil) (A :: nil) 4 1 1 HABCEApp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p2p4m2 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p2p4eq HABCDEApBpp1p2p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p2p4mtmp;try rewrite HT2 in HABCDEApBpp1p2p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p2p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p2p4m3 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p4eq HABCDECpp1p2p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p4mtmp;try rewrite HT2 in HABCDECpp1p2p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p2p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p4m4 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 4).
{
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p2p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p4eq HABCDEp1p2p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p4mtmp;try rewrite HT2 in HABCDEp1p2p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p2p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p4m5 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEp1p2p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p4eq HABCDEp1p2p4m5).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p4mtmp;try rewrite HT2 in HABCDEp1p2p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: p1 :: nil) 5 2 2 HABCDEp1p2p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ADEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEDpp1p2p4 requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEDpp1p2p4 requis par la preuve de (?)ABCDEDpp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEDpp1p2p4m5 : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CDp requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDEp1p2p4 requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AE requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACECp requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACAp requis par la preuve de (?)ACAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACApm2 : rk(A :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDApm2 : rk(A :: C :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HACDApm3 : rk(A :: C :: D :: Ap :: nil) >= 3).
{
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HABEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm2 : rk(A :: C :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm3 : rk(A :: C :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HACDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACDEApm4 : rk(A :: C :: D :: E :: Ap :: nil) >= 4).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 5 1 2 HABCDEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDEApBpm3 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDEApmtmp : rk(A :: C :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HACDEApeq HACDEApm4).
	assert(Hincl : incl (A :: C :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (A :: C :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HACDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : B :: Bp ::   de rang : 1 et 2 *)
assert(HACDEApBpm4 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HBBpMtmp : rk(B :: Bp :: nil) <= 2) by (solve_hyps_max HBBpeq HBBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil) ((B :: Bp :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HBBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDApBpm2 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil) (A :: C :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HACDApBpm3 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HACDApBpMtmp : rk(A :: C :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACDApBpeq HACDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: C :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpp1mtmp HACmtmp HACDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ACCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACCp requis par la preuve de (?)ACCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACCpm2 : rk(A :: C :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: C :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HACApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACEApm2 : rk(A :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACEApm3 : rk(A :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: C :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACEApBpm2 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACEApmtmp : rk(A :: C :: E :: Ap :: nil) >= 3) by (solve_hyps_min HACEApeq HACEApm3).
	assert(Hincl : incl (A :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil) (A :: C :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HACEApBpm3 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HACEApBpMtmp : rk(A :: C :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACEApBpeq HACEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: C :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpmtmp HACmtmp HACEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HACECpm2 : rk(A :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HACCpmtmp : rk(A :: C :: Cp :: nil) >= 2) by (solve_hyps_min HACCpeq HACCpm2).
	assert(Hincl : incl (A :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil) (A :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HACCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACECpm3 : rk(A :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: p1 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCECpp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEp1p2p4 requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : A :: E ::  de rang :  1 et 2 	 A : A :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABDEp1p2p4m2 : rk(A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) >= 2).
{
	assert(HACECpMtmp : rk(A :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HACECpeq HACECpM4).
	assert(HABCDECpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p4eq HABCDECpp1p2p4m5).
	assert(HAEmtmp : rk(A :: E :: nil) >= 1) by (solve_hyps_min HAEeq HAEm1).
	assert(Hincl : incl (A :: E :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p4mtmp;try rewrite HT2 in HABCDECpp1p2p4mtmp.
	assert(HT := rule_4 (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: E :: nil) 5 1 4 HABCDECpp1p2p4mtmp HAEmtmp HACECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Dp ::   de rang : 1 et 2 *)
assert(HABDEp1p2p4m3 : rk(A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) >= 3).
{
	assert(HCDpMtmp : rk(C :: Dp :: nil) <= 2) by (solve_hyps_max HCDpeq HCDpM2).
	assert(HABCDEDpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEDpp1p2p4eq HABCDEDpp1p2p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 :: nil) (C :: Dp :: A :: B :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Dp :: A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) ((C :: Dp :: nil) ++ (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEDpp1p2p4mtmp;try rewrite HT2 in HABCDEDpp1p2p4mtmp.
	assert(HT := rule_4 (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) (nil) 5 0 2 HABCDEDpp1p2p4mtmp Hmtmp HCDpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCECp requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCCp requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HBCCpm2 : rk(B :: C :: Cp :: nil) >= 2).
{
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil) ((B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (B :: nil) 5 1 4 HABCDECpp1mtmp HBmtmp HABDEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : B :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HBCECpm2 : rk(B :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HBCCpmtmp : rk(B :: C :: Cp :: nil) >= 2) by (solve_hyps_min HBCCpeq HBCCpm2).
	assert(Hincl : incl (B :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (B :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil) (B :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HBCCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HBCECpm3 : rk(B :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (B :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: B :: p1 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (B :: nil) 4 1 2 HABCECpp1mtmp HBmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1p2p4m2 : rk(A :: D :: E :: p1 :: p2 :: p4 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p4eq HABCDECpp1p2p4m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p4 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p4mtmp;try rewrite HT2 in HABCDECpp1p2p4mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil) (E :: nil) 5 1 4 HABCDECpp1p2p4mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: D :: E :: p1 :: p2 :: p4 ::  de rang :  3 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p2p4m3 : rk(A :: D :: E :: p1 :: p2 :: p4 :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABDEp1p2p4mtmp : rk(A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) >= 3) by (solve_hyps_min HABDEp1p2p4eq HABDEp1p2p4m3).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: B :: p1 :: A :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEp1p2p4mtmp;try rewrite HT2 in HABDEp1p2p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: p1 :: nil) 3 2 2 HABDEp1p2p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p2p4m4 : rk(A :: D :: E :: p1 :: p2 :: p4 :: nil) >= 4).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p2p4mtmp : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HACDEp1p2p4eq HACDEp1p2p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: p2 :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p2p4mtmp;try rewrite HT2 in HACDEp1p2p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil) (p1 :: nil) 5 1 2 HACDEp1p2p4mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour AEp1p2p4 requis par la preuve de (?)AEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour AEp1p2p4 requis par la preuve de (?)AEp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HAEp1p2p4m2 : rk(A :: E :: p1 :: p2 :: p4 :: nil) >= 2).
{
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p1 :: nil) (A :: E :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p1 :: nil) (A :: E :: p1 :: p2 :: p4 :: nil) 2 2 HAp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: D :: E :: p1 :: p2 :: p4 ::  de rang :  4 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : D :: p1 ::   de rang : 2 et 2 *)
assert(HAEp1p2p4m3 : rk(A :: E :: p1 :: p2 :: p4 :: nil) >= 3).
{
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HDp1Mtmp : rk(D :: p1 :: nil) <= 2) by (solve_hyps_max HDp1eq HDp1M2).
	assert(HADEp1p2p4mtmp : rk(A :: D :: E :: p1 :: p2 :: p4 :: nil) >= 4) by (solve_hyps_min HADEp1p2p4eq HADEp1p2p4m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (A :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p2 :: p4 :: nil) (D :: p1 :: A :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: A :: E :: p1 :: p2 :: p4 :: nil) ((D :: p1 :: nil) ++ (A :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1p2p4mtmp;try rewrite HT2 in HADEp1p2p4mtmp.
	assert(HT := rule_4 (D :: p1 :: nil) (A :: E :: p1 :: p2 :: p4 :: nil) (p1 :: nil) 4 1 2 HADEp1p2p4mtmp Hp1mtmp HDp1Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 4 et 5*)
assert(HAEp1p2p4M4 : rk(A :: E :: p1 :: p2 :: p4 :: nil) <= 4).
{
	assert(Hp2Mtmp : rk(p2 :: nil) <= 1) by (solve_hyps_max Hp2eq Hp2M1).
	assert(HAEp1p4eq : rk(A :: E :: p1 :: p4 :: nil) = 3) by (apply LAEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HAEp1p4Mtmp : rk(A :: E :: p1 :: p4 :: nil) <= 3) by (solve_hyps_max HAEp1p4eq HAEp1p4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p2 :: nil) (A :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p2 :: p4 :: nil) (p2 :: A :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p2 :: A :: E :: p1 :: p4 :: nil) ((p2 :: nil) ++ (A :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p2 :: nil) (A :: E :: p1 :: p4 :: nil) (nil) 1 3 0 Hp2Mtmp HAEp1p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 4 et -2*)
assert(HAEp1p2p4M3 : rk(A :: E :: p1 :: p2 :: p4 :: nil) <= 3).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HAEp1p4eq : rk(A :: E :: p1 :: p4 :: nil) = 3) by (apply LAEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HAEp1p4Mtmp : rk(A :: E :: p1 :: p4 :: nil) <= 3) by (solve_hyps_max HAEp1p4eq HAEp1p4M3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p2 :: nil) (A :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p2 :: p4 :: nil) (A :: p2 :: A :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: A :: E :: p1 :: p4 :: nil) ((A :: p2 :: nil) ++ (A :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (A :: E :: p1 :: p4 :: nil) (A :: nil) 1 3 1 HAp2Mtmp HAEp1p4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

assert(HAEp1p2p4M : rk(A :: E :: p1 :: p2 :: p4 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max HAEp1p2p4eq HAEp1p2p4M5).
assert(HAEp1p2p4m : rk(A :: E :: p1 :: p2 :: p4 ::  nil) >= 1) by (solve_hyps_min HAEp1p2p4eq HAEp1p2p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LADEp1p2p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: D :: E :: p1 :: p2 :: p4 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ADEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ADEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p2p4 requis par la preuve de (?)ABCDEp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p2p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p4 requis par la preuve de (?)ABCDECpp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p2p4 requis par la preuve de (?)ABCDEApBpp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p2p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCDEApp2 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp2m5 : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp2 requis par la preuve de (?)ACDp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACDp2M3 : rk(A :: C :: D :: p2 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p2 :: nil) (D :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p2 :: nil) ((D :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HDMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp2M4 : rk(A :: C :: D :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp2Mtmp : rk(A :: C :: D :: p2 :: nil) <= 3) by (solve_hyps_max HACDp2eq HACDp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p2 :: nil) (E :: A :: C :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p2 :: nil) ((E :: nil) ++ (A :: C :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p2 :: nil) (nil) 1 3 0 HEMtmp HACDp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp2M5 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HACDEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp2m4 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp2 requis par la preuve de (?)ADp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp2M2 : rk(A :: D :: p2 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p2 :: nil) (D :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p2 :: nil) ((D :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p2 :: nil) (nil) 1 1 0 HDMtmp HAp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp2M3 : rk(A :: D :: E :: p2 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp2Mtmp : rk(A :: D :: p2 :: nil) <= 2) by (solve_hyps_max HADp2eq HADp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: nil) (E :: A :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p2 :: nil) ((E :: nil) ++ (A :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p2 :: nil) (nil) 1 2 0 HEMtmp HADp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p2 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp2m2 : rk(A :: D :: E :: p2 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp2mtmp : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HACDEApp2eq HACDEApp2m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p2 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp2mtmp;try rewrite HT2 in HACDEApp2mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (nil) 4 0 2 HACDEApp2mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: p2 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp2Mtmp : rk(A :: D :: E :: p2 :: nil) <= 3) by (solve_hyps_max HADEp2eq HADEp2M3).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (A :: nil) 5 1 3 HABCDEApp2mtmp HAmtmp HADEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp2m3 : rk(A :: C :: D :: E :: p2 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 5 0 2 HABCDEApp2mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((A :: B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (A :: nil) 5 1 4 HABCDEApp2mtmp HAmtmp HACDEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp2 requis par la preuve de (?)ABCEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp2M4 : rk(A :: B :: C :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp2Mtmp : rk(A :: B :: C :: p2 :: nil) <= 3) by (solve_hyps_max HABCp2eq HABCp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p2 :: nil) (E :: A :: B :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p2 :: nil) ((E :: nil) ++ (A :: B :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p2 :: nil) (nil) 1 3 0 HEMtmp HABCp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp2M5 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp2Mtmp : rk(A :: B :: C :: E :: p2 :: nil) <= 4) by (solve_hyps_max HABCEp2eq HABCEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: A :: B :: C :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HABCEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m2 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m3 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp2m4 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCEApp2mtmp : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HABCEApp2eq HABCEApp2m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (A :: B :: C :: E :: Ap :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p2 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp2mtmp;try rewrite HT2 in HABCEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil) (A :: nil) 4 1 1 HABCEApp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p2p4 requis par la preuve de (?)ACDEp1p2p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p2p4m2 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p2p4eq HABCDEApBpp1p2p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p2p4mtmp;try rewrite HT2 in HABCDEApBpp1p2p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p2p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p2p4m3 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p4eq HABCDECpp1p2p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p4mtmp;try rewrite HT2 in HABCDECpp1p2p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p2p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p4m4 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 4).
{
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p2p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p4eq HABCDEp1p2p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p4mtmp;try rewrite HT2 in HABCDEp1p2p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p2p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p4m5 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEp1p2p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p4eq HABCDEp1p2p4m5).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p4mtmp;try rewrite HT2 in HABCDEp1p2p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: p1 :: nil) 5 2 2 HABCDEp1p2p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ADEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEDpp1p2p4 requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEDpp1p2p4 requis par la preuve de (?)ABCDEDpp1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEDpp1p2p4m5 : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CDp requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDEp1p2p4 requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AE requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACECp requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACAp requis par la preuve de (?)ACAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACApm2 : rk(A :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDApm2 : rk(A :: C :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HACDApm3 : rk(A :: C :: D :: Ap :: nil) >= 3).
{
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HABEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm2 : rk(A :: C :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm3 : rk(A :: C :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HACDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACDEApm4 : rk(A :: C :: D :: E :: Ap :: nil) >= 4).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 5 1 2 HABCDEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDEApBpm3 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDEApmtmp : rk(A :: C :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HACDEApeq HACDEApm4).
	assert(Hincl : incl (A :: C :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (A :: C :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HACDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : B :: Bp ::   de rang : 1 et 2 *)
assert(HACDEApBpm4 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HBBpMtmp : rk(B :: Bp :: nil) <= 2) by (solve_hyps_max HBBpeq HBBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil) ((B :: Bp :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HBBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDApBpm2 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil) (A :: C :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HACDApBpm3 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HACDApBpMtmp : rk(A :: C :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACDApBpeq HACDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: C :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpp1mtmp HACmtmp HACDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ACCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACCp requis par la preuve de (?)ACCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACCpm2 : rk(A :: C :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: C :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HACApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACEApm2 : rk(A :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACEApm3 : rk(A :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: C :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACEApBpm2 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACEApmtmp : rk(A :: C :: E :: Ap :: nil) >= 3) by (solve_hyps_min HACEApeq HACEApm3).
	assert(Hincl : incl (A :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil) (A :: C :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HACEApBpm3 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HACEApBpMtmp : rk(A :: C :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACEApBpeq HACEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: C :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpmtmp HACmtmp HACEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HACECpm2 : rk(A :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HACCpmtmp : rk(A :: C :: Cp :: nil) >= 2) by (solve_hyps_min HACCpeq HACCpm2).
	assert(Hincl : incl (A :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil) (A :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HACCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACECpm3 : rk(A :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: p1 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCECpp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEp1p2p4 requis par la preuve de (?)ABDEp1p2p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : A :: E ::  de rang :  1 et 2 	 A : A :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABDEp1p2p4m2 : rk(A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) >= 2).
{
	assert(HACECpMtmp : rk(A :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HACECpeq HACECpM4).
	assert(HABCDECpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p4eq HABCDECpp1p2p4m5).
	assert(HAEmtmp : rk(A :: E :: nil) >= 1) by (solve_hyps_min HAEeq HAEm1).
	assert(Hincl : incl (A :: E :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p4mtmp;try rewrite HT2 in HABCDECpp1p2p4mtmp.
	assert(HT := rule_4 (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: E :: nil) 5 1 4 HABCDECpp1p2p4mtmp HAEmtmp HACECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Dp ::   de rang : 1 et 2 *)
assert(HABDEp1p2p4m3 : rk(A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) >= 3).
{
	assert(HCDpMtmp : rk(C :: Dp :: nil) <= 2) by (solve_hyps_max HCDpeq HCDpM2).
	assert(HABCDEDpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEDpp1p2p4eq HABCDEDpp1p2p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p4 :: nil) (C :: Dp :: A :: B :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Dp :: A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) ((C :: Dp :: nil) ++ (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEDpp1p2p4mtmp;try rewrite HT2 in HABCDEDpp1p2p4mtmp.
	assert(HT := rule_4 (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) (nil) 5 0 2 HABCDEDpp1p2p4mtmp Hmtmp HCDpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCECp requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCCp requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HBCCpm2 : rk(B :: C :: Cp :: nil) >= 2).
{
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil) ((B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (B :: nil) 5 1 4 HABCDECpp1mtmp HBmtmp HABDEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : B :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HBCECpm2 : rk(B :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HBCCpmtmp : rk(B :: C :: Cp :: nil) >= 2) by (solve_hyps_min HBCCpeq HBCCpm2).
	assert(Hincl : incl (B :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (B :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil) (B :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HBCCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HBCECpm3 : rk(B :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (B :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: B :: p1 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (B :: nil) 4 1 2 HABCECpp1mtmp HBmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADEp1p2p4 requis par la preuve de (?)ADEp1p2p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1p2p4m2 : rk(A :: D :: E :: p1 :: p2 :: p4 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1p2p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p4eq HABCDECpp1p2p4m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p4 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p4mtmp;try rewrite HT2 in HABCDECpp1p2p4mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil) (E :: nil) 5 1 4 HABCDECpp1p2p4mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: D :: E :: p1 :: p2 :: p4 ::  de rang :  3 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p2p4m3 : rk(A :: D :: E :: p1 :: p2 :: p4 :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABDEp1p2p4mtmp : rk(A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) >= 3) by (solve_hyps_min HABDEp1p2p4eq HABDEp1p2p4m3).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: B :: p1 :: A :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: D :: E :: p1 :: p2 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEp1p2p4mtmp;try rewrite HT2 in HABDEp1p2p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: p1 :: nil) 3 2 2 HABDEp1p2p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p2 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p2p4m4 : rk(A :: D :: E :: p1 :: p2 :: p4 :: nil) >= 4).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p2p4mtmp : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) >= 5) by (solve_hyps_min HACDEp1p2p4eq HACDEp1p2p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p2 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: p2 :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p2p4mtmp;try rewrite HT2 in HACDEp1p2p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil) (p1 :: nil) 5 1 2 HACDEp1p2p4mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 4 et 5*)
assert(HADEp1p2p4M5 : rk(A :: D :: E :: p1 :: p2 :: p4 :: nil) <= 5).
{
	assert(Hp2Mtmp : rk(p2 :: nil) <= 1) by (solve_hyps_max Hp2eq Hp2M1).
	assert(HADEp1p4eq : rk(A :: D :: E :: p1 :: p4 :: nil) = 4) by (apply LADEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADEp1p4Mtmp : rk(A :: D :: E :: p1 :: p4 :: nil) <= 4) by (solve_hyps_max HADEp1p4eq HADEp1p4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p2 :: nil) (A :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p2 :: p4 :: nil) (p2 :: A :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p2 :: A :: D :: E :: p1 :: p4 :: nil) ((p2 :: nil) ++ (A :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p2 :: nil) (A :: D :: E :: p1 :: p4 :: nil) (nil) 1 4 0 Hp2Mtmp HADEp1p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 4 et -2*)
assert(HADEp1p2p4M4 : rk(A :: D :: E :: p1 :: p2 :: p4 :: nil) <= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HADEp1p4eq : rk(A :: D :: E :: p1 :: p4 :: nil) = 4) by (apply LADEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADEp1p4Mtmp : rk(A :: D :: E :: p1 :: p4 :: nil) <= 4) by (solve_hyps_max HADEp1p4eq HADEp1p4M4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p2 :: nil) (A :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p2 :: p4 :: nil) (A :: p2 :: A :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: A :: D :: E :: p1 :: p4 :: nil) ((A :: p2 :: nil) ++ (A :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (A :: D :: E :: p1 :: p4 :: nil) (A :: nil) 1 4 1 HAp2Mtmp HADEp1p4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

assert(HADEp1p2p4M : rk(A :: D :: E :: p1 :: p2 :: p4 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HADEp1p2p4m : rk(A :: D :: E :: p1 :: p2 :: p4 ::  nil) >= 1) by (solve_hyps_min HADEp1p2p4eq HADEp1p2p4m1).
intuition.
Qed.

(* dans constructLemma(), requis par LAp1p2p3p4 *)
(* dans constructLemma(), requis par LAEp1p2p3p4 *)
(* dans la couche 0 *)
Lemma LADEp1p2p3p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ADEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ADEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p2p3p4 requis par la preuve de (?)ABCDEp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p2p3p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p3p4 requis par la preuve de (?)ABCDECpp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p3p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p2p3p4 requis par la preuve de (?)ABCDEApBpp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p2p3p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCDEApp2 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp2m5 : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp2 requis par la preuve de (?)ACDp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACDp2M3 : rk(A :: C :: D :: p2 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p2 :: nil) (D :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p2 :: nil) ((D :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HDMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp2M4 : rk(A :: C :: D :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp2Mtmp : rk(A :: C :: D :: p2 :: nil) <= 3) by (solve_hyps_max HACDp2eq HACDp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p2 :: nil) (E :: A :: C :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p2 :: nil) ((E :: nil) ++ (A :: C :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p2 :: nil) (nil) 1 3 0 HEMtmp HACDp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp2M5 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HACDEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp2m4 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp2 requis par la preuve de (?)ADp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp2M2 : rk(A :: D :: p2 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p2 :: nil) (D :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p2 :: nil) ((D :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p2 :: nil) (nil) 1 1 0 HDMtmp HAp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp2M3 : rk(A :: D :: E :: p2 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp2Mtmp : rk(A :: D :: p2 :: nil) <= 2) by (solve_hyps_max HADp2eq HADp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: nil) (E :: A :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p2 :: nil) ((E :: nil) ++ (A :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p2 :: nil) (nil) 1 2 0 HEMtmp HADp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p2 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp2m2 : rk(A :: D :: E :: p2 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp2mtmp : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HACDEApp2eq HACDEApp2m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p2 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp2mtmp;try rewrite HT2 in HACDEApp2mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (nil) 4 0 2 HACDEApp2mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: p2 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp2Mtmp : rk(A :: D :: E :: p2 :: nil) <= 3) by (solve_hyps_max HADEp2eq HADEp2M3).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (A :: nil) 5 1 3 HABCDEApp2mtmp HAmtmp HADEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp2m3 : rk(A :: C :: D :: E :: p2 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 5 0 2 HABCDEApp2mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((A :: B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (A :: nil) 5 1 4 HABCDEApp2mtmp HAmtmp HACDEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp2 requis par la preuve de (?)ABCEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp2M4 : rk(A :: B :: C :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp2Mtmp : rk(A :: B :: C :: p2 :: nil) <= 3) by (solve_hyps_max HABCp2eq HABCp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p2 :: nil) (E :: A :: B :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p2 :: nil) ((E :: nil) ++ (A :: B :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p2 :: nil) (nil) 1 3 0 HEMtmp HABCp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp2M5 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp2Mtmp : rk(A :: B :: C :: E :: p2 :: nil) <= 4) by (solve_hyps_max HABCEp2eq HABCEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: A :: B :: C :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HABCEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m2 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m3 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp2m4 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCEApp2mtmp : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HABCEApp2eq HABCEApp2m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (A :: B :: C :: E :: Ap :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p2 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp2mtmp;try rewrite HT2 in HABCEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil) (A :: nil) 4 1 1 HABCEApp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p2p3p4m2 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p2p3p4eq HABCDEApBpp1p2p3p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p2p3p4mtmp;try rewrite HT2 in HABCDEApBpp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p2p3p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p2p3p4m3 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p4eq HABCDECpp1p2p3p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p4mtmp;try rewrite HT2 in HABCDECpp1p2p3p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p2p3p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p3p4m4 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 4).
{
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p3p4eq HABCDEp1p2p3p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p3p4mtmp;try rewrite HT2 in HABCDEp1p2p3p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p2p3p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p3p4m5 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p3p4eq HABCDEp1p2p3p4m5).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p3p4mtmp;try rewrite HT2 in HABCDEp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p1 :: nil) 5 2 2 HABCDEp1p2p3p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ADEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEDpp1p2p3p4 requis par la preuve de (?)ABDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEDpp1p2p3p4 requis par la preuve de (?)ABCDEDpp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEDpp1p2p3p4m5 : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CDp requis par la preuve de (?)ABDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDEp1p2p3p4 requis par la preuve de (?)ABDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AE requis par la preuve de (?)ABDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACECp requis par la preuve de (?)ABDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACAp requis par la preuve de (?)ACAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACApm2 : rk(A :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDApm2 : rk(A :: C :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HACDApm3 : rk(A :: C :: D :: Ap :: nil) >= 3).
{
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HABEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm2 : rk(A :: C :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm3 : rk(A :: C :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HACDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACDEApm4 : rk(A :: C :: D :: E :: Ap :: nil) >= 4).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 5 1 2 HABCDEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDEApBpm3 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDEApmtmp : rk(A :: C :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HACDEApeq HACDEApm4).
	assert(Hincl : incl (A :: C :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (A :: C :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HACDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : B :: Bp ::   de rang : 1 et 2 *)
assert(HACDEApBpm4 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HBBpMtmp : rk(B :: Bp :: nil) <= 2) by (solve_hyps_max HBBpeq HBBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil) ((B :: Bp :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HBBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDApBpm2 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil) (A :: C :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HACDApBpm3 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HACDApBpMtmp : rk(A :: C :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACDApBpeq HACDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: C :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpp1mtmp HACmtmp HACDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ACCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACCp requis par la preuve de (?)ACCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACCpm2 : rk(A :: C :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: C :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HACApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACEApm2 : rk(A :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACEApm3 : rk(A :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: C :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACEApBpm2 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACEApmtmp : rk(A :: C :: E :: Ap :: nil) >= 3) by (solve_hyps_min HACEApeq HACEApm3).
	assert(Hincl : incl (A :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil) (A :: C :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HACEApBpm3 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HACEApBpMtmp : rk(A :: C :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACEApBpeq HACEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: C :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpmtmp HACmtmp HACEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HACECpm2 : rk(A :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HACCpmtmp : rk(A :: C :: Cp :: nil) >= 2) by (solve_hyps_min HACCpeq HACCpm2).
	assert(Hincl : incl (A :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil) (A :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HACCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACECpm3 : rk(A :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: p1 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCECpp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEp1p2p3p4 requis par la preuve de (?)ABDEp1p2p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: E ::  de rang :  1 et 2 	 A : A :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABDEp1p2p3p4m2 : rk(A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HACECpMtmp : rk(A :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HACECpeq HACECpM4).
	assert(HABCDECpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p4eq HABCDECpp1p2p3p4m5).
	assert(HAEmtmp : rk(A :: E :: nil) >= 1) by (solve_hyps_min HAEeq HAEm1).
	assert(Hincl : incl (A :: E :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p4mtmp;try rewrite HT2 in HABCDECpp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: E :: nil) 5 1 4 HABCDECpp1p2p3p4mtmp HAEmtmp HACECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Dp ::   de rang : 1 et 2 *)
assert(HABDEp1p2p3p4m3 : rk(A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HCDpMtmp : rk(C :: Dp :: nil) <= 2) by (solve_hyps_max HCDpeq HCDpM2).
	assert(HABCDEDpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEDpp1p2p3p4eq HABCDEDpp1p2p3p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 :: nil) (C :: Dp :: A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Dp :: A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((C :: Dp :: nil) ++ (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEDpp1p2p3p4mtmp;try rewrite HT2 in HABCDEDpp1p2p3p4mtmp.
	assert(HT := rule_4 (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (nil) 5 0 2 HABCDEDpp1p2p3p4mtmp Hmtmp HCDpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCECp requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCCp requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HBCCpm2 : rk(B :: C :: Cp :: nil) >= 2).
{
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil) ((B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (B :: nil) 5 1 4 HABCDECpp1mtmp HBmtmp HABDEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : B :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HBCECpm2 : rk(B :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HBCCpmtmp : rk(B :: C :: Cp :: nil) >= 2) by (solve_hyps_min HBCCpeq HBCCpm2).
	assert(Hincl : incl (B :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (B :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil) (B :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HBCCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HBCECpm3 : rk(B :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (B :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: B :: p1 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (B :: nil) 4 1 2 HABCECpp1mtmp HBmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1p2p3p4m2 : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p4eq HABCDECpp1p2p3p4m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p4mtmp;try rewrite HT2 in HABCDECpp1p2p3p4mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (E :: nil) 5 1 4 HABCDECpp1p2p3p4mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  3 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p2p3p4m3 : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABDEp1p2p3p4mtmp : rk(A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 3) by (solve_hyps_min HABDEp1p2p3p4eq HABDEp1p2p3p4m3).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: B :: p1 :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEp1p2p3p4mtmp;try rewrite HT2 in HABDEp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p1 :: nil) 3 2 2 HABDEp1p2p3p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p2p3p4m4 : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 4).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p2p3p4mtmp : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HACDEp1p2p3p4eq HACDEp1p2p3p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p2p3p4mtmp;try rewrite HT2 in HACDEp1p2p3p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (p1 :: nil) 5 1 2 HACDEp1p2p3p4mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 4 et 5*)
assert(HADEp1p2p3p4M5 : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) <= 5).
{
	assert(Hp3Mtmp : rk(p3 :: nil) <= 1) by (solve_hyps_max Hp3eq Hp3M1).
	assert(HADEp1p2p4eq : rk(A :: D :: E :: p1 :: p2 :: p4 :: nil) = 4) by (apply LADEp1p2p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADEp1p2p4Mtmp : rk(A :: D :: E :: p1 :: p2 :: p4 :: nil) <= 4) by (solve_hyps_max HADEp1p2p4eq HADEp1p2p4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p3 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (p3 :: A :: D :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p3 :: A :: D :: E :: p1 :: p2 :: p4 :: nil) ((p3 :: nil) ++ (A :: D :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p3 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: nil) (nil) 1 4 0 Hp3Mtmp HADEp1p2p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 4 et -2*)
assert(HADEp1p2p3p4M4 : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) <= 4).
{
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(HAEp1p2p4eq : rk(A :: E :: p1 :: p2 :: p4 :: nil) = 3) by (apply LAEp1p2p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HAEp1p2p4Mtmp : rk(A :: E :: p1 :: p2 :: p4 :: nil) <= 3) by (solve_hyps_max HAEp1p2p4eq HAEp1p2p4M3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: D :: p3 :: nil) (A :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: D :: p3 :: A :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p3 :: A :: E :: p1 :: p2 :: p4 :: nil) ((A :: D :: p3 :: nil) ++ (A :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: D :: p3 :: nil) (A :: E :: p1 :: p2 :: p4 :: nil) (A :: nil) 2 3 1 HADp3Mtmp HAEp1p2p4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

assert(HADEp1p2p3p4M : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HADEp1p2p3p4m : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 ::  nil) >= 1) by (solve_hyps_min HADEp1p2p3p4eq HADEp1p2p3p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LAEp1p2p3p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: E :: p1 :: p2 :: p3 :: p4 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour AEp1p2p3p4 requis par la preuve de (?)AEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour AEp1p2p3p4 requis par la preuve de (?)AEp1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour Ep1p3p4 requis par la preuve de (?)AEp1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ADEp1p3p4 requis par la preuve de (?)Ep1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p3p4 requis par la preuve de (?)ABCDEp1p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p3p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p3p4 requis par la preuve de (?)ABCDECpp1p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p3p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p3p4 requis par la preuve de (?)ABCDEApBpp1p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p3p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp2 requis par la preuve de (?)ABCDEApp2 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp2m5 : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p2 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp2 requis par la preuve de (?)ACDp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACDp2M3 : rk(A :: C :: D :: p2 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p2 :: nil) (D :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p2 :: nil) ((D :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HDMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp2 requis par la preuve de (?)ACDEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp2M4 : rk(A :: C :: D :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp2Mtmp : rk(A :: C :: D :: p2 :: nil) <= 3) by (solve_hyps_max HACDp2eq HACDp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p2 :: nil) (E :: A :: C :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p2 :: nil) ((E :: nil) ++ (A :: C :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p2 :: nil) (nil) 1 3 0 HEMtmp HACDp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp2 requis par la preuve de (?)ACDEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp2M5 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HACDEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp2m4 : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp2 requis par la preuve de (?)ADp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp2M2 : rk(A :: D :: p2 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p2 :: nil) (D :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p2 :: nil) ((D :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p2 :: nil) (nil) 1 1 0 HDMtmp HAp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp2 requis par la preuve de (?)ADEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp2M3 : rk(A :: D :: E :: p2 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp2Mtmp : rk(A :: D :: p2 :: nil) <= 2) by (solve_hyps_max HADp2eq HADp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p2 :: nil) (E :: A :: D :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p2 :: nil) ((E :: nil) ++ (A :: D :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p2 :: nil) (nil) 1 2 0 HEMtmp HADp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p2 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp2m2 : rk(A :: D :: E :: p2 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp2mtmp : rk(A :: C :: D :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HACDEApp2eq HACDEApp2m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p2 :: nil) (C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p2 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp2mtmp;try rewrite HT2 in HACDEApp2mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (nil) 4 0 2 HACDEApp2mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: p2 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp2Mtmp : rk(A :: D :: E :: p2 :: nil) <= 3) by (solve_hyps_max HADEp2eq HADEp2M3).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p2 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p2 :: nil) (A :: nil) 5 1 3 HABCDEApp2mtmp HAmtmp HADEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp2 requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp2m3 : rk(A :: C :: D :: E :: p2 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (nil) 5 0 2 HABCDEApp2mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HACDEp2Mtmp : rk(A :: C :: D :: E :: p2 :: nil) <= 4) by (solve_hyps_max HACDEp2eq HACDEp2M4).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: C :: D :: E :: p2 :: nil) ((A :: B :: Ap :: nil) ++ (A :: C :: D :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: C :: D :: E :: p2 :: nil) (A :: nil) 5 1 4 HABCDEApp2mtmp HAmtmp HACDEp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp2 requis par la preuve de (?)ABCEp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp2M4 : rk(A :: B :: C :: E :: p2 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp2Mtmp : rk(A :: B :: C :: p2 :: nil) <= 3) by (solve_hyps_max HABCp2eq HABCp2M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p2 :: nil) (E :: A :: B :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p2 :: nil) ((E :: nil) ++ (A :: B :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p2 :: nil) (nil) 1 3 0 HEMtmp HABCp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp2 requis par la preuve de (?)ABCEApp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp2M5 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp2Mtmp : rk(A :: B :: C :: E :: p2 :: nil) <= 4) by (solve_hyps_max HABCEp2eq HABCEp2M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: A :: B :: C :: E :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p2 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p2 :: nil) (nil) 1 4 0 HApMtmp HABCEp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m2 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp2m3 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p2 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp2m4 : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp2mtmp : rk(A :: B :: C :: D :: E :: Ap :: p2 :: nil) >= 5) by (solve_hyps_min HABCDEApp2eq HABCDEApp2m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p2 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p2 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp2mtmp;try rewrite HT2 in HABCDEApp2mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p2 :: nil) (Ap :: nil) 5 1 2 HABCDEApp2mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCEApp2mtmp : rk(A :: B :: C :: E :: Ap :: p2 :: nil) >= 4) by (solve_hyps_min HABCEApp2eq HABCEApp2m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p2 :: nil) (A :: B :: C :: E :: Ap :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p2 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp2mtmp;try rewrite HT2 in HABCEApp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p2 :: nil) (A :: nil) 4 1 1 HABCEApp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p3p4m2 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p3p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p3p4eq HABCDEApBpp1p3p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p3p4mtmp;try rewrite HT2 in HABCDEApBpp1p3p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p3p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p3p4m3 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p4eq HABCDECpp1p3p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p4mtmp;try rewrite HT2 in HABCDECpp1p3p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p3p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p3p4m4 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 4).
{
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p3p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p3p4eq HABCDEp1p3p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p3p4mtmp;try rewrite HT2 in HABCDEp1p3p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p3p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p3p4m5 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEp1p3p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p3p4eq HABCDEp1p3p4m5).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p3p4mtmp;try rewrite HT2 in HABCDEp1p3p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: p1 :: nil) 5 2 2 HABCDEp1p3p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ADEp1p3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEp1p3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEDpp1p3p4 requis par la preuve de (?)ABDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEDpp1p3p4 requis par la preuve de (?)ABCDEDpp1p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEDpp1p3p4m5 : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CDp requis par la preuve de (?)ABDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDEp1p3p4 requis par la preuve de (?)ABDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AE requis par la preuve de (?)ABDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACECp requis par la preuve de (?)ABDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACAp requis par la preuve de (?)ACAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACApm2 : rk(A :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDApm2 : rk(A :: C :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HACDApm3 : rk(A :: C :: D :: Ap :: nil) >= 3).
{
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HABEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm2 : rk(A :: C :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm3 : rk(A :: C :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HACDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACDEApm4 : rk(A :: C :: D :: E :: Ap :: nil) >= 4).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 5 1 2 HABCDEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDEApBpm3 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDEApmtmp : rk(A :: C :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HACDEApeq HACDEApm4).
	assert(Hincl : incl (A :: C :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (A :: C :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HACDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : B :: Bp ::   de rang : 1 et 2 *)
assert(HACDEApBpm4 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HBBpMtmp : rk(B :: Bp :: nil) <= 2) by (solve_hyps_max HBBpeq HBBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil) ((B :: Bp :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HBBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDApBpm2 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil) (A :: C :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HACDApBpm3 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HACDApBpMtmp : rk(A :: C :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACDApBpeq HACDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: C :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpp1mtmp HACmtmp HACDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ACCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACCp requis par la preuve de (?)ACCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACCpm2 : rk(A :: C :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: C :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HACApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACEApm2 : rk(A :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACEApm3 : rk(A :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: C :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACEApBpm2 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACEApmtmp : rk(A :: C :: E :: Ap :: nil) >= 3) by (solve_hyps_min HACEApeq HACEApm3).
	assert(Hincl : incl (A :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil) (A :: C :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HACEApBpm3 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HACEApBpMtmp : rk(A :: C :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACEApBpeq HACEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: C :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpmtmp HACmtmp HACEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HACECpm2 : rk(A :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HACCpmtmp : rk(A :: C :: Cp :: nil) >= 2) by (solve_hyps_min HACCpeq HACCpm2).
	assert(Hincl : incl (A :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil) (A :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HACCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACECpm3 : rk(A :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: p1 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCECpp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEp1p3p4 requis par la preuve de (?)ABDEp1p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: E ::  de rang :  1 et 2 	 A : A :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABDEp1p3p4m2 : rk(A :: B :: D :: E :: p1 :: p3 :: p4 :: nil) >= 2).
{
	assert(HACECpMtmp : rk(A :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HACECpeq HACECpM4).
	assert(HABCDECpp1p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p4eq HABCDECpp1p3p4m5).
	assert(HAEmtmp : rk(A :: E :: nil) >= 1) by (solve_hyps_min HAEeq HAEm1).
	assert(Hincl : incl (A :: E :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p3 :: p4 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p4mtmp;try rewrite HT2 in HABCDECpp1p3p4mtmp.
	assert(HT := rule_4 (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: E :: nil) 5 1 4 HABCDECpp1p3p4mtmp HAEmtmp HACECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Dp :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Dp ::   de rang : 1 et 2 *)
assert(HABDEp1p3p4m3 : rk(A :: B :: D :: E :: p1 :: p3 :: p4 :: nil) >= 3).
{
	assert(HCDpMtmp : rk(C :: Dp :: nil) <= 2) by (solve_hyps_max HCDpeq HCDpM2).
	assert(HABCDEDpp1p3p4mtmp : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEDpp1p3p4eq HABCDEDpp1p3p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Dp :: p1 :: p3 :: p4 :: nil) (C :: Dp :: A :: B :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Dp :: A :: B :: D :: E :: p1 :: p3 :: p4 :: nil) ((C :: Dp :: nil) ++ (A :: B :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEDpp1p3p4mtmp;try rewrite HT2 in HABCDEDpp1p3p4mtmp.
	assert(HT := rule_4 (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p3 :: p4 :: nil) (nil) 5 0 2 HABCDEDpp1p3p4mtmp Hmtmp HCDpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADEp1p3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCECp requis par la preuve de (?)ADEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCCp requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HBCCpm2 : rk(B :: C :: Cp :: nil) >= 2).
{
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: Cp :: A :: B :: D :: E :: p1 :: nil) ((B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (B :: C :: Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (B :: nil) 5 1 4 HABCDECpp1mtmp HBmtmp HABDEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : B :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HBCECpm2 : rk(B :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HBCCpmtmp : rk(B :: C :: Cp :: nil) >= 2) by (solve_hyps_min HBCCpeq HBCCpm2).
	assert(Hincl : incl (B :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (B :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil) (B :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HBCCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HBCECpm3 : rk(B :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HBmtmp : rk(B :: nil) >= 1) by (solve_hyps_min HBeq HBm1).
	assert(Hincl : incl (B :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (B :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: B :: p1 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (B :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (B :: nil) 4 1 2 HABCECpp1mtmp HBmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADEp1p3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1p3p4m2 : rk(A :: D :: E :: p1 :: p3 :: p4 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p4eq HABCDECpp1p3p4m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p3 :: p4 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p4mtmp;try rewrite HT2 in HABCDECpp1p3p4mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: nil) (E :: nil) 5 1 4 HABCDECpp1p3p4mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: D :: E :: p1 :: p3 :: p4 ::  de rang :  3 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p3p4m3 : rk(A :: D :: E :: p1 :: p3 :: p4 :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABDEp1p3p4mtmp : rk(A :: B :: D :: E :: p1 :: p3 :: p4 :: nil) >= 3) by (solve_hyps_min HABDEp1p3p4eq HABDEp1p3p4m3).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: B :: p1 :: A :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: D :: E :: p1 :: p3 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEp1p3p4mtmp;try rewrite HT2 in HABDEp1p3p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: p1 :: nil) 3 2 2 HABDEp1p3p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p3p4m4 : rk(A :: D :: E :: p1 :: p3 :: p4 :: nil) >= 4).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p3p4mtmp : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HACDEp1p3p4eq HACDEp1p3p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: p3 :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p3p4mtmp;try rewrite HT2 in HACDEp1p3p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: nil) (p1 :: nil) 5 1 2 HACDEp1p3p4mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour Ep1p3p4 requis par la preuve de (?)Ep1p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: D :: E :: p1 :: p3 :: p4 ::  de rang :  4 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: D :: p1 ::   de rang : 3 et 3 *)
assert(HEp1p3p4m2 : rk(E :: p1 :: p3 :: p4 :: nil) >= 2).
{
	assert(HADp1eq : rk(A :: D :: p1 :: nil) = 3) by (apply LADp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 3) by (solve_hyps_max HADp1eq HADp1M3).
	assert(HADEp1p3p4mtmp : rk(A :: D :: E :: p1 :: p3 :: p4 :: nil) >= 4) by (solve_hyps_min HADEp1p3p4eq HADEp1p3p4m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: D :: p1 :: nil) (E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: D :: p1 :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p1 :: E :: p1 :: p3 :: p4 :: nil) ((A :: D :: p1 :: nil) ++ (E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1p3p4mtmp;try rewrite HT2 in HADEp1p3p4mtmp.
	assert(HT := rule_4 (A :: D :: p1 :: nil) (E :: p1 :: p3 :: p4 :: nil) (p1 :: nil) 4 1 3 HADEp1p3p4mtmp Hp1mtmp HADp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour AEp1p2p3p4 requis par la preuve de (?)AEp1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ADEp1p2p3p4 requis par la preuve de (?)AEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p2p3p4 requis par la preuve de (?)ABCDEp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p2p3p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p3p4 requis par la preuve de (?)ABCDECpp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p3p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p2p3p4 requis par la preuve de (?)ABCDEApBpp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p2p3p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p2p3p4 requis par la preuve de (?)ACDEp1p2p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p2p3p4m2 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p2p3p4eq HABCDEApBpp1p2p3p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p2p3p4mtmp;try rewrite HT2 in HABCDEApBpp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p2p3p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p2p3p4m3 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p4eq HABCDECpp1p2p3p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p4mtmp;try rewrite HT2 in HABCDECpp1p2p3p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p2p3p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p3p4m4 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 4).
{
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p3p4eq HABCDEp1p2p3p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p3p4mtmp;try rewrite HT2 in HABCDEp1p2p3p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p2p3p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p3p4m5 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p3p4eq HABCDEp1p2p3p4m5).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p3p4mtmp;try rewrite HT2 in HABCDEp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p1 :: nil) 5 2 2 HABCDEp1p2p3p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ADEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEDpp1p2p3p4 requis par la preuve de (?)ABDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEDpp1p2p3p4 requis par la preuve de (?)ABCDEDpp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEDpp1p2p3p4m5 : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDEp1p2p3p4 requis par la preuve de (?)ABDEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEp1p2p3p4 requis par la preuve de (?)ABDEp1p2p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: E ::  de rang :  1 et 2 	 A : A :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABDEp1p2p3p4m2 : rk(A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HACECpMtmp : rk(A :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HACECpeq HACECpM4).
	assert(HABCDECpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p4eq HABCDECpp1p2p3p4m5).
	assert(HAEmtmp : rk(A :: E :: nil) >= 1) by (solve_hyps_min HAEeq HAEm1).
	assert(Hincl : incl (A :: E :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p4mtmp;try rewrite HT2 in HABCDECpp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: C :: E :: Cp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: E :: nil) 5 1 4 HABCDECpp1p2p3p4mtmp HAEmtmp HACECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Dp ::   de rang : 1 et 2 *)
assert(HABDEp1p2p3p4m3 : rk(A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HCDpMtmp : rk(C :: Dp :: nil) <= 2) by (solve_hyps_max HCDpeq HCDpM2).
	assert(HABCDEDpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEDpp1p2p3p4eq HABCDEDpp1p2p3p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Dp :: p1 :: p2 :: p3 :: p4 :: nil) (C :: Dp :: A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Dp :: A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((C :: Dp :: nil) ++ (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEDpp1p2p3p4mtmp;try rewrite HT2 in HABCDEDpp1p2p3p4mtmp.
	assert(HT := rule_4 (C :: Dp :: nil) (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (nil) 5 0 2 HABCDEDpp1p2p3p4mtmp Hmtmp HCDpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADEp1p2p3p4 requis par la preuve de (?)ADEp1p2p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1p2p3p4m2 : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1p2p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p4eq HABCDECpp1p2p3p4m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p4mtmp;try rewrite HT2 in HABCDECpp1p2p3p4mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (E :: nil) 5 1 4 HABCDECpp1p2p3p4mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  3 et 6 	 AiB : A :: p1 ::  de rang :  2 et 2 	 A : A :: B :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p2p3p4m3 : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABDEp1p2p3p4mtmp : rk(A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 3) by (solve_hyps_min HABDEp1p2p3p4eq HABDEp1p2p3p4m3).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: B :: p1 :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEp1p2p3p4mtmp;try rewrite HT2 in HABDEp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: B :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p1 :: nil) 3 2 2 HABDEp1p2p3p4mtmp HAp1mtmp HABp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p2p3p4m4 : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 4).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p2p3p4mtmp : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HACDEp1p2p3p4eq HACDEp1p2p3p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p2p3p4mtmp;try rewrite HT2 in HACDEp1p2p3p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (p1 :: nil) 5 1 2 HACDEp1p2p3p4mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour AEp1p2p3p4 requis par la preuve de (?)AEp1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour AEp1p2p3p4 requis par la preuve de (?)AEp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HAEp1p2p3p4m2 : rk(A :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p1 :: nil) (A :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p1 :: nil) (A :: E :: p1 :: p2 :: p3 :: p4 :: nil) 2 2 HAp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  4 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : D :: p1 ::   de rang : 2 et 2 *)
assert(HAEp1p2p3p4m3 : rk(A :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HDp1Mtmp : rk(D :: p1 :: nil) <= 2) by (solve_hyps_max HDp1eq HDp1M2).
	assert(HADEp1p2p3p4mtmp : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 4) by (solve_hyps_min HADEp1p2p3p4eq HADEp1p2p3p4m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (A :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (D :: p1 :: A :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: A :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((D :: p1 :: nil) ++ (A :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1p2p3p4mtmp;try rewrite HT2 in HADEp1p2p3p4mtmp.
	assert(HT := rule_4 (D :: p1 :: nil) (A :: E :: p1 :: p2 :: p3 :: p4 :: nil) (p1 :: nil) 4 1 2 HADEp1p2p3p4mtmp Hp1mtmp HDp1Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HAEp1p2p3p4M5 : rk(A :: E :: p1 :: p2 :: p3 :: p4 :: nil) <= 5).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HEp1p3p4Mtmp : rk(E :: p1 :: p3 :: p4 :: nil) <= 4) by (solve_hyps_max HEp1p3p4eq HEp1p3p4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p2 :: nil) (E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p2 :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: E :: p1 :: p3 :: p4 :: nil) ((A :: p2 :: nil) ++ (E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (E :: p1 :: p3 :: p4 :: nil) (nil) 1 4 0 HAp2Mtmp HEp1p3p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 4 et 5*)
assert(HAEp1p2p3p4M4 : rk(A :: E :: p1 :: p2 :: p3 :: p4 :: nil) <= 4).
{
	assert(Hp3Mtmp : rk(p3 :: nil) <= 1) by (solve_hyps_max Hp3eq Hp3M1).
	assert(HAEp1p2p4eq : rk(A :: E :: p1 :: p2 :: p4 :: nil) = 3) by (apply LAEp1p2p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HAEp1p2p4Mtmp : rk(A :: E :: p1 :: p2 :: p4 :: nil) <= 3) by (solve_hyps_max HAEp1p2p4eq HAEp1p2p4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p3 :: nil) (A :: E :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p2 :: p3 :: p4 :: nil) (p3 :: A :: E :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p3 :: A :: E :: p1 :: p2 :: p4 :: nil) ((p3 :: nil) ++ (A :: E :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p3 :: nil) (A :: E :: p1 :: p2 :: p4 :: nil) (nil) 1 3 0 Hp3Mtmp HAEp1p2p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 -4 et -4*)
(* ensembles concernés AUB : A :: D :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  4 et 4 	 AiB : A :: p3 ::  de rang :  2 et 2 	 A : A :: D :: p3 ::   de rang : 2 et 2 *)
assert(HAEp1p2p3p4m4 : rk(A :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 4).
{
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(HADEp1p2p3p4eq : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) = 4) by (apply LADEp1p2p3p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADEp1p2p3p4mtmp : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 4) by (solve_hyps_min HADEp1p2p3p4eq HADEp1p2p3p4m4).
	assert(HAp3mtmp : rk(A :: p3 :: nil) >= 2) by (solve_hyps_min HAp3eq HAp3m2).
	assert(Hincl : incl (A :: p3 :: nil) (list_inter (A :: D :: p3 :: nil) (A :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: D :: p3 :: A :: E :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p3 :: A :: E :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: D :: p3 :: nil) ++ (A :: E :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1p2p3p4mtmp;try rewrite HT2 in HADEp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: D :: p3 :: nil) (A :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p3 :: nil) 4 2 2 HADEp1p2p3p4mtmp HAp3mtmp HADp3Mtmp Hincl); apply HT.
}

assert(HAEp1p2p3p4M : rk(A :: E :: p1 :: p2 :: p3 :: p4 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HAEp1p2p3p4m : rk(A :: E :: p1 :: p2 :: p3 :: p4 ::  nil) >= 1) by (solve_hyps_min HAEp1p2p3p4eq HAEp1p2p3p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LAp1p2p3p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(A :: p1 :: p2 :: p3 :: p4 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour Ap1p2p3p4 requis par la preuve de (?)Ap1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ADp1p2p3p4 requis par la preuve de (?)Ap1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour Ap1p2p4 requis par la preuve de (?)ADp1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour p1p4 requis par la preuve de (?)Ap1p2p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour Ap1p2p4 requis par la preuve de (?)Ap1p2p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour Ap1p2p4 requis par la preuve de (?)Ap1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HAp1p2p4m2 : rk(A :: p1 :: p2 :: p4 :: nil) >= 2).
{
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p1 :: nil) (A :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p1 :: nil) (A :: p1 :: p2 :: p4 :: nil) 2 2 HAp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HAp1p2p4M3 : rk(A :: p1 :: p2 :: p4 :: nil) <= 3).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hp1p4Mtmp : rk(p1 :: p4 :: nil) <= 2) by (solve_hyps_max Hp1p4eq Hp1p4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p2 :: nil) (p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p4 :: nil) (A :: p2 :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: p1 :: p4 :: nil) ((A :: p2 :: nil) ++ (p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (p1 :: p4 :: nil) (nil) 1 2 0 HAp2Mtmp Hp1p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ADp1p2p3p4 requis par la preuve de (?)ADp1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour Dp1p3p4 requis par la preuve de (?)ADp1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDp1p3p4 requis par la preuve de (?)Dp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDp1p3p4 requis par la preuve de (?)ABDp1p3p4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour Dp3p4 requis par la preuve de (?)ABDp1p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDp1p3p4 requis par la preuve de (?)ABDp1p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p3p4 requis par la preuve de (?)ABDp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p3p4 requis par la preuve de (?)ABCDECpp1p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p3p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACECp requis par la preuve de (?)ABDp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ACAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACAp requis par la preuve de (?)ACAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACApm2 : rk(A :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDApm2 : rk(A :: C :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HACDApm3 : rk(A :: C :: D :: Ap :: nil) >= 3).
{
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HABEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: p2 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm2 : rk(A :: C :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm3 : rk(A :: C :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HACDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACDEApm4 : rk(A :: C :: D :: E :: Ap :: nil) >= 4).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 5 1 2 HABCDEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDEApBpm3 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDEApmtmp : rk(A :: C :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HACDEApeq HACDEApm4).
	assert(Hincl : incl (A :: C :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (A :: C :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HACDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : B :: Bp ::   de rang : 1 et 2 *)
assert(HACDEApBpm4 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HBBpMtmp : rk(B :: Bp :: nil) <= 2) by (solve_hyps_max HBBpeq HBBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil) ((B :: Bp :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HBBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDApBpm2 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil) (A :: C :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HACDApBpm3 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HACDApBpMtmp : rk(A :: C :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACDApBpeq HACDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: C :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpp1mtmp HACmtmp HACDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ACCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACCp requis par la preuve de (?)ACCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACCpm2 : rk(A :: C :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: C :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HACApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACEApm2 : rk(A :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACEApm3 : rk(A :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: C :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACEApBpm2 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACEApmtmp : rk(A :: C :: E :: Ap :: nil) >= 3) by (solve_hyps_min HACEApeq HACEApm3).
	assert(Hincl : incl (A :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil) (A :: C :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HACEApBpm3 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HACEApBpMtmp : rk(A :: C :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACEApBpeq HACEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: C :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpmtmp HACmtmp HACEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HACECpm2 : rk(A :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HACCpmtmp : rk(A :: C :: Cp :: nil) >= 2) by (solve_hyps_min HACCpeq HACCpm2).
	assert(Hincl : incl (A :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil) (A :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HACCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACECpm3 : rk(A :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: p1 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCECpp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDp1p3p4 requis par la preuve de (?)ABDp1p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A ::  de rang :  1 et 1 	 A : A :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABDp1p3p4m2 : rk(A :: B :: D :: p1 :: p3 :: p4 :: nil) >= 2).
{
	assert(HACECpMtmp : rk(A :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HACECpeq HACECpM4).
	assert(HABCDECpp1p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p4eq HABCDECpp1p3p4m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: D :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) (A :: C :: E :: Cp :: A :: B :: D :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: D :: p1 :: p3 :: p4 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: D :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p4mtmp;try rewrite HT2 in HABCDECpp1p3p4mtmp.
	assert(HT := rule_4 (A :: C :: E :: Cp :: nil) (A :: B :: D :: p1 :: p3 :: p4 :: nil) (A :: nil) 5 1 4 HABCDECpp1p3p4mtmp HAmtmp HACECpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HABDp1p3p4M5 : rk(A :: B :: D :: p1 :: p3 :: p4 :: nil) <= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HDp3p4Mtmp : rk(D :: p3 :: p4 :: nil) <= 3) by (solve_hyps_max HDp3p4eq HDp3p4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: B :: p1 :: nil) (D :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: p3 :: p4 :: nil) (A :: B :: p1 :: D :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: D :: p3 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (D :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: B :: p1 :: nil) (D :: p3 :: p4 :: nil) (nil) 2 3 0 HABp1Mtmp HDp3p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABDp1p3p4m3 : rk(A :: B :: D :: p1 :: p3 :: p4 :: nil) >= 3).
{
	assert(HADp1eq : rk(A :: D :: p1 :: nil) = 3) by (apply LADp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADp1mtmp : rk(A :: D :: p1 :: nil) >= 3) by (solve_hyps_min HADp1eq HADp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: D :: p1 :: nil) (A :: B :: D :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: D :: p1 :: nil) (A :: B :: D :: p1 :: p3 :: p4 :: nil) 3 3 HADp1mtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour Dp1p3p4 requis par la preuve de (?)Dp1p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 4 et 4*)
(* ensembles concernés AUB : A :: B :: D :: p1 :: p3 :: p4 ::  de rang :  3 et 5 	 AiB : D :: p1 ::  de rang :  2 et 2 	 A : A :: B :: D :: p1 ::   de rang : 3 et 3 *)
assert(HDp1p3p4m2 : rk(D :: p1 :: p3 :: p4 :: nil) >= 2).
{
	assert(HABDp1eq : rk(A :: B :: D :: p1 :: nil) = 3) by (apply LABDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(HABDp1p3p4mtmp : rk(A :: B :: D :: p1 :: p3 :: p4 :: nil) >= 3) by (solve_hyps_min HABDp1p3p4eq HABDp1p3p4m3).
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HDp1mtmp : rk(D :: p1 :: nil) >= 2) by (solve_hyps_min HDp1eq HDp1m2).
	assert(Hincl : incl (D :: p1 :: nil) (list_inter (A :: B :: D :: p1 :: nil) (D :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: p3 :: p4 :: nil) (A :: B :: D :: p1 :: D :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: p1 :: D :: p1 :: p3 :: p4 :: nil) ((A :: B :: D :: p1 :: nil) ++ (D :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDp1p3p4mtmp;try rewrite HT2 in HABDp1p3p4mtmp.
	assert(HT := rule_4 (A :: B :: D :: p1 :: nil) (D :: p1 :: p3 :: p4 :: nil) (D :: p1 :: nil) 3 2 3 HABDp1p3p4mtmp HDp1mtmp HABDp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ADp1p2p3p4 requis par la preuve de (?)ADp1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADp1p2p3p4 requis par la preuve de (?)ADp1p2p3p4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADp1p2p3p4 requis par la preuve de (?)ADp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HADp1p2p3p4m2 : rk(A :: D :: p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p1 :: nil) (A :: D :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p1 :: nil) (A :: D :: p1 :: p2 :: p3 :: p4 :: nil) 2 2 HAp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HADp1p2p3p4m3 : rk(A :: D :: p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HADp1eq : rk(A :: D :: p1 :: nil) = 3) by (apply LADp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADp1mtmp : rk(A :: D :: p1 :: nil) >= 3) by (solve_hyps_min HADp1eq HADp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: D :: p1 :: nil) (A :: D :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: D :: p1 :: nil) (A :: D :: p1 :: p2 :: p3 :: p4 :: nil) 3 3 HADp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HADp1p2p3p4M5 : rk(A :: D :: p1 :: p2 :: p3 :: p4 :: nil) <= 5).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HDp1p3p4Mtmp : rk(D :: p1 :: p3 :: p4 :: nil) <= 4) by (solve_hyps_max HDp1p3p4eq HDp1p3p4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p2 :: nil) (D :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p2 :: D :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: D :: p1 :: p3 :: p4 :: nil) ((A :: p2 :: nil) ++ (D :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (D :: p1 :: p3 :: p4 :: nil) (nil) 1 4 0 HAp2Mtmp HDp1p3p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HADp1p2p3p4M4 : rk(A :: D :: p1 :: p2 :: p3 :: p4 :: nil) <= 4).
{
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(HAp1p2p4Mtmp : rk(A :: p1 :: p2 :: p4 :: nil) <= 3) by (solve_hyps_max HAp1p2p4eq HAp1p2p4M3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: D :: p3 :: nil) (A :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: p2 :: p3 :: p4 :: nil) (A :: D :: p3 :: A :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p3 :: A :: p1 :: p2 :: p4 :: nil) ((A :: D :: p3 :: nil) ++ (A :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: D :: p3 :: nil) (A :: p1 :: p2 :: p4 :: nil) (A :: nil) 2 3 1 HADp3Mtmp HAp1p2p4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour Ap1p2p3p4 requis par la preuve de (?)Ap1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour p1p3p4 requis par la preuve de (?)Ap1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour Ap1p2p3p4 requis par la preuve de (?)Ap1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour Ap1p2p3p4 requis par la preuve de (?)Ap1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HAp1p2p3p4m2 : rk(A :: p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p1 :: nil) (A :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p1 :: nil) (A :: p1 :: p2 :: p3 :: p4 :: nil) 2 2 HAp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HAp1p2p3p4M4 : rk(A :: p1 :: p2 :: p3 :: p4 :: nil) <= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hp1p3p4Mtmp : rk(p1 :: p3 :: p4 :: nil) <= 3) by (solve_hyps_max Hp1p3p4eq Hp1p3p4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p2 :: nil) (p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p2 :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: p1 :: p3 :: p4 :: nil) ((A :: p2 :: nil) ++ (p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (p1 :: p3 :: p4 :: nil) (nil) 1 3 0 HAp2Mtmp Hp1p3p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: D :: p1 :: p2 :: p3 :: p4 ::  de rang :  3 et 4 	 AiB : A :: p3 ::  de rang :  2 et 2 	 A : A :: D :: p3 ::   de rang : 2 et 2 *)
assert(HAp1p2p3p4m3 : rk(A :: p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(HADp1p2p3p4mtmp : rk(A :: D :: p1 :: p2 :: p3 :: p4 :: nil) >= 3) by (solve_hyps_min HADp1p2p3p4eq HADp1p2p3p4m3).
	assert(HAp3mtmp : rk(A :: p3 :: nil) >= 2) by (solve_hyps_min HAp3eq HAp3m2).
	assert(Hincl : incl (A :: p3 :: nil) (list_inter (A :: D :: p3 :: nil) (A :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: p2 :: p3 :: p4 :: nil) (A :: D :: p3 :: A :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p3 :: A :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: D :: p3 :: nil) ++ (A :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADp1p2p3p4mtmp;try rewrite HT2 in HADp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: D :: p3 :: nil) (A :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p3 :: nil) 3 2 2 HADp1p2p3p4mtmp HAp3mtmp HADp3Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 -4 et -4*)
(* ensembles concernés AUB : A :: E :: p1 :: p2 :: p3 :: p4 ::  de rang :  4 et 4 	 AiB : A :: p4 ::  de rang :  2 et 2 	 A : A :: E :: p4 ::   de rang : 2 et 2 *)
assert(HAp1p2p3p4m4 : rk(A :: p1 :: p2 :: p3 :: p4 :: nil) >= 4).
{
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(HAEp1p2p3p4eq : rk(A :: E :: p1 :: p2 :: p3 :: p4 :: nil) = 4) by (apply LAEp1p2p3p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HAEp1p2p3p4mtmp : rk(A :: E :: p1 :: p2 :: p3 :: p4 :: nil) >= 4) by (solve_hyps_min HAEp1p2p3p4eq HAEp1p2p3p4m4).
	assert(HAp4mtmp : rk(A :: p4 :: nil) >= 2) by (solve_hyps_min HAp4eq HAp4m2).
	assert(Hincl : incl (A :: p4 :: nil) (list_inter (A :: E :: p4 :: nil) (A :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p2 :: p3 :: p4 :: nil) (A :: E :: p4 :: A :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: E :: p4 :: A :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: E :: p4 :: nil) ++ (A :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HAEp1p2p3p4mtmp;try rewrite HT2 in HAEp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: E :: p4 :: nil) (A :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p4 :: nil) 4 2 2 HAEp1p2p3p4mtmp HAp4mtmp HAEp4Mtmp Hincl); apply HT.
}

assert(HAp1p2p3p4M : rk(A :: p1 :: p2 :: p3 :: p4 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max HAp1p2p3p4eq HAp1p2p3p4M5).
assert(HAp1p2p3p4m : rk(A :: p1 :: p2 :: p3 :: p4 ::  nil) >= 1) by (solve_hyps_min HAp1p2p3p4eq HAp1p2p3p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma Lp1p2p3p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> rk(p1 :: p2 :: p3 :: p4 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour p1p2p3p4 requis par la preuve de (?)p1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour Ap1p2p3p4 requis par la preuve de (?)p1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ADp1p2p3p4 requis par la preuve de (?)Ap1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour Ap1p2p4 requis par la preuve de (?)ADp1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour p1p4 requis par la preuve de (?)Ap1p2p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour Ap1p2p4 requis par la preuve de (?)Ap1p2p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour Ap1p2p4 requis par la preuve de (?)Ap1p2p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HAp1p2p4m2 : rk(A :: p1 :: p2 :: p4 :: nil) >= 2).
{
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p1 :: nil) (A :: p1 :: p2 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p1 :: nil) (A :: p1 :: p2 :: p4 :: nil) 2 2 HAp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HAp1p2p4M3 : rk(A :: p1 :: p2 :: p4 :: nil) <= 3).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hp1p4Mtmp : rk(p1 :: p4 :: nil) <= 2) by (solve_hyps_max Hp1p4eq Hp1p4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p2 :: nil) (p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p4 :: nil) (A :: p2 :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: p1 :: p4 :: nil) ((A :: p2 :: nil) ++ (p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (p1 :: p4 :: nil) (nil) 1 2 0 HAp2Mtmp Hp1p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ADp1p2p3p4 requis par la preuve de (?)ADp1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour Dp1p3p4 requis par la preuve de (?)ADp1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDp1p3p4 requis par la preuve de (?)Dp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDp1p3p4 requis par la preuve de (?)ABDp1p3p4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour Dp3p4 requis par la preuve de (?)ABDp1p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDp1p3p4 requis par la preuve de (?)ABDp1p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p3p4 requis par la preuve de (?)ABDp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p3p4 requis par la preuve de (?)ABCDECpp1p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p3p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACECp requis par la preuve de (?)ABDp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ACAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACAp requis par la preuve de (?)ACAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACApm2 : rk(A :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDAp requis par la preuve de (?)ACDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDApm2 : rk(A :: C :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HACDApm3 : rk(A :: C :: D :: Ap :: nil) >= 3).
{
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: A :: B :: E :: p1 :: nil) ((A :: C :: D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HABEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: p2 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEAp requis par la preuve de (?)ACDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm2 : rk(A :: C :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACDEApm3 : rk(A :: C :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HACDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACDEApm4 : rk(A :: C :: D :: E :: Ap :: nil) >= 4).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: D :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: C :: D :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 5 1 2 HABCDEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApBp requis par la preuve de (?)ACDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDEApBpm3 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDEApmtmp : rk(A :: C :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HACDEApeq HACDEApm4).
	assert(Hincl : incl (A :: C :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (A :: C :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HACDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : B :: Bp ::   de rang : 1 et 2 *)
assert(HACDEApBpm4 : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HBBpMtmp : rk(B :: Bp :: nil) <= 2) by (solve_hyps_max HBBpeq HBBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Bp :: A :: C :: D :: E :: Ap :: Bp :: nil) ((B :: Bp :: nil) ++ (A :: C :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (B :: Bp :: nil) (A :: C :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HBBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDApBp requis par la preuve de (?)ACDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACDApBpm2 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACDApmtmp : rk(A :: C :: D :: Ap :: nil) >= 3) by (solve_hyps_min HACDApeq HACDApm3).
	assert(Hincl : incl (A :: C :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: D :: Ap :: Bp :: nil) (A :: C :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HACDApBpm3 : rk(A :: C :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: C :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: C :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: C :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HACDApBpMtmp : rk(A :: C :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACDApBpeq HACDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: C :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: C :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpp1mtmp HACmtmp HACDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ACCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACCp requis par la preuve de (?)ACCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HACCpm2 : rk(A :: C :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: C :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ACECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HACApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEAp requis par la preuve de (?)ACEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HACEApm2 : rk(A :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HACApmtmp : rk(A :: C :: Ap :: nil) >= 2) by (solve_hyps_min HACApeq HACApm2).
	assert(Hincl : incl (A :: C :: Ap :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: C :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HACApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACEApm3 : rk(A :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: C :: E :: Ap :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: A :: B :: p1 :: nil) ((A :: C :: E :: Ap :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Ap :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCEApp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACEApBp requis par la preuve de (?)ACEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: C :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HACEApBpm2 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HACEApmtmp : rk(A :: C :: E :: Ap :: nil) >= 3) by (solve_hyps_min HACEApeq HACEApm3).
	assert(Hincl : incl (A :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: C :: E :: Ap :: Bp :: nil) (A :: C :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HACEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HACEApBpm3 : rk(A :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HACDEApBpmtmp : rk(A :: C :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HACDEApBpeq HACDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApBpmtmp;try rewrite HT2 in HACDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HACDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: C :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HACEApBpMtmp : rk(A :: C :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HACEApBpeq HACEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: C :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpmtmp HACmtmp HACEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACECp requis par la preuve de (?)ACECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HACECpm2 : rk(A :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HACCpmtmp : rk(A :: C :: Cp :: nil) >= 2) by (solve_hyps_min HACCpeq HACCpm2).
	assert(Hincl : incl (A :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: C :: E :: Cp :: nil) (A :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HACCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HACECpm3 : rk(A :: C :: E :: Cp :: nil) >= 3).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: C :: E :: Cp :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: p1 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (A :: C :: E :: Cp :: nil) (A :: B :: p1 :: nil) (A :: nil) 4 1 2 HABCECpp1mtmp HAmtmp HABp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDp1p3p4 requis par la preuve de (?)ABDp1p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A ::  de rang :  1 et 1 	 A : A :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABDp1p3p4m2 : rk(A :: B :: D :: p1 :: p3 :: p4 :: nil) >= 2).
{
	assert(HACECpMtmp : rk(A :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HACECpeq HACECpM4).
	assert(HABCDECpp1p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p4eq HABCDECpp1p3p4m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: E :: Cp :: nil) (A :: B :: D :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) (A :: C :: E :: Cp :: A :: B :: D :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: E :: Cp :: A :: B :: D :: p1 :: p3 :: p4 :: nil) ((A :: C :: E :: Cp :: nil) ++ (A :: B :: D :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p4mtmp;try rewrite HT2 in HABCDECpp1p3p4mtmp.
	assert(HT := rule_4 (A :: C :: E :: Cp :: nil) (A :: B :: D :: p1 :: p3 :: p4 :: nil) (A :: nil) 5 1 4 HABCDECpp1p3p4mtmp HAmtmp HACECpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HABDp1p3p4M5 : rk(A :: B :: D :: p1 :: p3 :: p4 :: nil) <= 5).
{
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(HDp3p4Mtmp : rk(D :: p3 :: p4 :: nil) <= 3) by (solve_hyps_max HDp3p4eq HDp3p4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: B :: p1 :: nil) (D :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: p3 :: p4 :: nil) (A :: B :: p1 :: D :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: p1 :: D :: p3 :: p4 :: nil) ((A :: B :: p1 :: nil) ++ (D :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: B :: p1 :: nil) (D :: p3 :: p4 :: nil) (nil) 2 3 0 HABp1Mtmp HDp3p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABDp1p3p4m3 : rk(A :: B :: D :: p1 :: p3 :: p4 :: nil) >= 3).
{
	assert(HADp1eq : rk(A :: D :: p1 :: nil) = 3) by (apply LADp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADp1mtmp : rk(A :: D :: p1 :: nil) >= 3) by (solve_hyps_min HADp1eq HADp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: D :: p1 :: nil) (A :: B :: D :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: D :: p1 :: nil) (A :: B :: D :: p1 :: p3 :: p4 :: nil) 3 3 HADp1mtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour Dp1p3p4 requis par la preuve de (?)Dp1p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 4 et 4*)
(* ensembles concernés AUB : A :: B :: D :: p1 :: p3 :: p4 ::  de rang :  3 et 5 	 AiB : D :: p1 ::  de rang :  2 et 2 	 A : A :: B :: D :: p1 ::   de rang : 3 et 3 *)
assert(HDp1p3p4m2 : rk(D :: p1 :: p3 :: p4 :: nil) >= 2).
{
	assert(HABDp1eq : rk(A :: B :: D :: p1 :: nil) = 3) by (apply LABDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(HABDp1p3p4mtmp : rk(A :: B :: D :: p1 :: p3 :: p4 :: nil) >= 3) by (solve_hyps_min HABDp1p3p4eq HABDp1p3p4m3).
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HDp1mtmp : rk(D :: p1 :: nil) >= 2) by (solve_hyps_min HDp1eq HDp1m2).
	assert(Hincl : incl (D :: p1 :: nil) (list_inter (A :: B :: D :: p1 :: nil) (D :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: p3 :: p4 :: nil) (A :: B :: D :: p1 :: D :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: p1 :: D :: p1 :: p3 :: p4 :: nil) ((A :: B :: D :: p1 :: nil) ++ (D :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDp1p3p4mtmp;try rewrite HT2 in HABDp1p3p4mtmp.
	assert(HT := rule_4 (A :: B :: D :: p1 :: nil) (D :: p1 :: p3 :: p4 :: nil) (D :: p1 :: nil) 3 2 3 HABDp1p3p4mtmp HDp1mtmp HABDp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ADp1p2p3p4 requis par la preuve de (?)ADp1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADp1p2p3p4 requis par la preuve de (?)ADp1p2p3p4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADp1p2p3p4 requis par la preuve de (?)ADp1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HADp1p2p3p4m2 : rk(A :: D :: p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p1 :: nil) (A :: D :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p1 :: nil) (A :: D :: p1 :: p2 :: p3 :: p4 :: nil) 2 2 HAp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HADp1p2p3p4m3 : rk(A :: D :: p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HADp1eq : rk(A :: D :: p1 :: nil) = 3) by (apply LADp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HADp1mtmp : rk(A :: D :: p1 :: nil) >= 3) by (solve_hyps_min HADp1eq HADp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: D :: p1 :: nil) (A :: D :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: D :: p1 :: nil) (A :: D :: p1 :: p2 :: p3 :: p4 :: nil) 3 3 HADp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HADp1p2p3p4M5 : rk(A :: D :: p1 :: p2 :: p3 :: p4 :: nil) <= 5).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HDp1p3p4Mtmp : rk(D :: p1 :: p3 :: p4 :: nil) <= 4) by (solve_hyps_max HDp1p3p4eq HDp1p3p4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p2 :: nil) (D :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p2 :: D :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: D :: p1 :: p3 :: p4 :: nil) ((A :: p2 :: nil) ++ (D :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (D :: p1 :: p3 :: p4 :: nil) (nil) 1 4 0 HAp2Mtmp HDp1p3p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HADp1p2p3p4M4 : rk(A :: D :: p1 :: p2 :: p3 :: p4 :: nil) <= 4).
{
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(HAp1p2p4Mtmp : rk(A :: p1 :: p2 :: p4 :: nil) <= 3) by (solve_hyps_max HAp1p2p4eq HAp1p2p4M3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: D :: p3 :: nil) (A :: p1 :: p2 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: p2 :: p3 :: p4 :: nil) (A :: D :: p3 :: A :: p1 :: p2 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p3 :: A :: p1 :: p2 :: p4 :: nil) ((A :: D :: p3 :: nil) ++ (A :: p1 :: p2 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: D :: p3 :: nil) (A :: p1 :: p2 :: p4 :: nil) (A :: nil) 2 3 1 HADp3Mtmp HAp1p2p4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour Ap1p2p3p4 requis par la preuve de (?)Ap1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour p1p3p4 requis par la preuve de (?)Ap1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour Ap1p2p3p4 requis par la preuve de (?)Ap1p2p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour Ap1p2p3p4 requis par la preuve de (?)Ap1p2p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HAp1p2p3p4m2 : rk(A :: p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 2) by (solve_hyps_min HAp1eq HAp1m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p1 :: nil) (A :: p1 :: p2 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p1 :: nil) (A :: p1 :: p2 :: p3 :: p4 :: nil) 2 2 HAp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HAp1p2p3p4M4 : rk(A :: p1 :: p2 :: p3 :: p4 :: nil) <= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hp1p3p4Mtmp : rk(p1 :: p3 :: p4 :: nil) <= 3) by (solve_hyps_max Hp1p3p4eq Hp1p3p4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p2 :: nil) (p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p2 :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: p1 :: p3 :: p4 :: nil) ((A :: p2 :: nil) ++ (p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (p1 :: p3 :: p4 :: nil) (nil) 1 3 0 HAp2Mtmp Hp1p3p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: D :: p1 :: p2 :: p3 :: p4 ::  de rang :  3 et 4 	 AiB : A :: p3 ::  de rang :  2 et 2 	 A : A :: D :: p3 ::   de rang : 2 et 2 *)
assert(HAp1p2p3p4m3 : rk(A :: p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(HADp1p2p3p4mtmp : rk(A :: D :: p1 :: p2 :: p3 :: p4 :: nil) >= 3) by (solve_hyps_min HADp1p2p3p4eq HADp1p2p3p4m3).
	assert(HAp3mtmp : rk(A :: p3 :: nil) >= 2) by (solve_hyps_min HAp3eq HAp3m2).
	assert(Hincl : incl (A :: p3 :: nil) (list_inter (A :: D :: p3 :: nil) (A :: p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: p2 :: p3 :: p4 :: nil) (A :: D :: p3 :: A :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p3 :: A :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: D :: p3 :: nil) ++ (A :: p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADp1p2p3p4mtmp;try rewrite HT2 in HADp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: D :: p3 :: nil) (A :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p3 :: nil) 3 2 2 HADp1p2p3p4mtmp HAp3mtmp HADp3Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour p1p2p3p4 requis par la preuve de (?)p1p2p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour p1p2p3p4 requis par la preuve de (?)p1p2p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: p1 :: p2 :: p3 :: p4 ::  de rang :  2 et 4 	 AiB : p2 ::  de rang :  1 et 1 	 A : A :: p2 ::   de rang : 1 et 1 *)
assert(Hp1p2p3p4m2 : rk(p1 :: p2 :: p3 :: p4 :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HAp1p2p3p4mtmp : rk(A :: p1 :: p2 :: p3 :: p4 :: nil) >= 2) by (solve_hyps_min HAp1p2p3p4eq HAp1p2p3p4m2).
	assert(Hp2mtmp : rk(p2 :: nil) >= 1) by (solve_hyps_min Hp2eq Hp2m1).
	assert(Hincl : incl (p2 :: nil) (list_inter (A :: p2 :: nil) (p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p2 :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: p2 :: nil) ++ (p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HAp1p2p3p4mtmp;try rewrite HT2 in HAp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: p2 :: nil) (p1 :: p2 :: p3 :: p4 :: nil) (p2 :: nil) 2 1 1 HAp1p2p3p4mtmp Hp2mtmp HAp2Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 4 et 4*)
(* ensembles concernés AUB : A :: p1 :: p2 :: p3 :: p4 ::  de rang :  3 et 4 	 AiB : p2 :: p3 ::  de rang :  2 et 2 	 A : A :: p2 :: p3 ::   de rang : 2 et 2 *)
assert(Hp1p2p3p4m3 : rk(p1 :: p2 :: p3 :: p4 :: nil) >= 3).
{
	assert(HAp2p3eq : rk(A :: p2 :: p3 :: nil) = 2) by (apply LAp2p3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HAp2p3Mtmp : rk(A :: p2 :: p3 :: nil) <= 2) by (solve_hyps_max HAp2p3eq HAp2p3M2).
	assert(HAp1p2p3p4mtmp : rk(A :: p1 :: p2 :: p3 :: p4 :: nil) >= 3) by (solve_hyps_min HAp1p2p3p4eq HAp1p2p3p4m3).
	assert(Hp2p3eq : rk(p2 :: p3 :: nil) = 2) by (apply Lp2p3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(Hp2p3mtmp : rk(p2 :: p3 :: nil) >= 2) by (solve_hyps_min Hp2p3eq Hp2p3m2).
	assert(Hincl : incl (p2 :: p3 :: nil) (list_inter (A :: p2 :: p3 :: nil) (p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p2 :: p3 :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: p3 :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: p2 :: p3 :: nil) ++ (p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HAp1p2p3p4mtmp;try rewrite HT2 in HAp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: p2 :: p3 :: nil) (p1 :: p2 :: p3 :: p4 :: nil) (p2 :: p3 :: nil) 3 2 2 HAp1p2p3p4mtmp Hp2p3mtmp HAp2p3Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 -2 et -4*)
(* ensembles concernés AUB : A :: p1 :: p2 :: p3 :: p4 ::  de rang :  4 et 4 	 AiB : p2 ::  de rang :  1 et 1 	 A : A :: p2 ::   de rang : 1 et 1 *)
assert(Hp1p2p3p4m4 : rk(p1 :: p2 :: p3 :: p4 :: nil) >= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HAp1p2p3p4eq : rk(A :: p1 :: p2 :: p3 :: p4 :: nil) = 4) by (apply LAp1p2p3p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption).
	assert(HAp1p2p3p4mtmp : rk(A :: p1 :: p2 :: p3 :: p4 :: nil) >= 4) by (solve_hyps_min HAp1p2p3p4eq HAp1p2p3p4m4).
	assert(Hp2mtmp : rk(p2 :: nil) >= 1) by (solve_hyps_min Hp2eq Hp2m1).
	assert(Hincl : incl (p2 :: nil) (list_inter (A :: p2 :: nil) (p1 :: p2 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p3 :: p4 :: nil) (A :: p2 :: p1 :: p2 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: p1 :: p2 :: p3 :: p4 :: nil) ((A :: p2 :: nil) ++ (p1 :: p2 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HAp1p2p3p4mtmp;try rewrite HT2 in HAp1p2p3p4mtmp.
	assert(HT := rule_4 (A :: p2 :: nil) (p1 :: p2 :: p3 :: p4 :: nil) (p2 :: nil) 4 1 1 HAp1p2p3p4mtmp Hp2mtmp HAp2Mtmp Hincl); apply HT.
}

assert(Hp1p2p3p4M : rk(p1 :: p2 :: p3 :: p4 ::  nil) <= 4) (* dim : 5 *) by (solve_hyps_max Hp1p2p3p4eq Hp1p2p3p4M4).
assert(Hp1p2p3p4m : rk(p1 :: p2 :: p3 :: p4 ::  nil) >= 1) by (solve_hyps_min Hp1p2p3p4eq Hp1p2p3p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Theorem def_Conclusion : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 2 -> rk(B :: p1 ::  nil) = 2 -> rk(A :: B :: p1 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 -> rk(A :: p2 ::  nil) = 1 -> rk(C :: p2 ::  nil) = 2 ->
rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 -> rk(A :: p3 ::  nil) = 2 ->
rk(D :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(E :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 ->
rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 -> 
	 rk(p1 :: p2 :: p3 :: p4 ::  nil) = 4  .
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HBp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HCp2eq HACp2eq
HApBpCpDpEpp2eq HAp3eq HDp3eq HADp3eq HApBpCpDpEpp3eq HAp4eq HEp4eq HAEp4eq HApBpCpDpEpp4eq .
repeat split.

	apply Lp1p2p3p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) ; assumption.
Qed .
