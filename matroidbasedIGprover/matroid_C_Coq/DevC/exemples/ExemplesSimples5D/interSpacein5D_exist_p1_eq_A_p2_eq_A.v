Load "preamble5D.v".


(* dans la couche 0 *)
Lemma LAB : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AB requis par la preuve de (?)AB pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 -2 et -4*)
assert(HABm2 : rk(A :: B :: nil) >= 2).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABp1mtmp : rk(A :: B :: p1 :: nil) >= 2) by (solve_hyps_min HABp1eq HABp1m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: p1 :: nil) (A :: B :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: A :: p1 :: nil) ((A :: B :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABp1mtmp;try rewrite HT2 in HABp1mtmp.
	assert(HT := rule_2 (A :: B :: nil) (A :: p1 :: nil) (A :: nil) 2 1 1 HABp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

assert(HABM : rk(A :: B ::  nil) <= 2) (* dim : 5 *) by (solve_hyps_max HABeq HABM2).
assert(HABm : rk(A :: B ::  nil) >= 1) by (solve_hyps_min HABeq HABm1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LAC : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: C ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AC requis par la preuve de (?)AC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 -2 et -4*)
assert(HACm2 : rk(A :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HACp2mtmp : rk(A :: C :: p2 :: nil) >= 2) by (solve_hyps_min HACp2eq HACp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p2 :: nil) (A :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: C :: A :: p2 :: nil) ((A :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACp2mtmp;try rewrite HT2 in HACp2mtmp.
	assert(HT := rule_2 (A :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HACp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

assert(HACM : rk(A :: C ::  nil) <= 2) (* dim : 5 *) by (solve_hyps_max HACeq HACM2).
assert(HACm : rk(A :: C ::  nil) >= 1) by (solve_hyps_min HACeq HACm1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LBp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(B :: p1 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour Bp1 requis par la preuve de (?)Bp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 2) *)
(* marque des antécédents AUB AiB A: -4 -2 et -4*)
(* ensembles concernés AUB : A :: B :: p1 ::  de rang :  2 et 2 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: p1 ::   de rang : 1 et 1 *)
assert(HBp1m2 : rk(B :: p1 :: nil) >= 2).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABp1mtmp : rk(A :: B :: p1 :: nil) >= 2) by (solve_hyps_min HABp1eq HABp1m2).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: p1 :: nil) (B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: p1 :: nil) (A :: p1 :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: p1 :: nil) ((A :: p1 :: nil) ++ (B :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABp1mtmp;try rewrite HT2 in HABp1mtmp.
	assert(HT := rule_4 (A :: p1 :: nil) (B :: p1 :: nil) (p1 :: nil) 2 1 1 HABp1mtmp Hp1mtmp HAp1Mtmp Hincl); apply HT.
}

assert(HBp1M : rk(B :: p1 ::  nil) <= 2) (* dim : 5 *) by (solve_hyps_max HBp1eq HBp1M2).
assert(HBp1m : rk(B :: p1 ::  nil) >= 1) by (solve_hyps_min HBp1eq HBp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par LCp1 *)
(* dans constructLemma(), requis par LCDEp1 *)
(* dans constructLemma(), requis par LBCDEp1 *)
(* dans la couche 0 *)
Lemma LABCDEp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: p1 ::  nil) = 5.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDEp1 requis par la preuve de (?)ABCDEp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCDp1 requis par la preuve de (?)ABCDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDp1 requis par la preuve de (?)ABCDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCDp1M4 : rk(A :: B :: C :: D :: p1 :: nil) <= 4).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: p1 :: nil) (D :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: C :: p1 :: nil) ((D :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HDMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1 requis par la preuve de (?)ABCDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCDEp1M5 : rk(A :: B :: C :: D :: E :: p1 :: nil) <= 5).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCDp1Mtmp : rk(A :: B :: C :: D :: p1 :: nil) <= 4) by (solve_hyps_max HABCDp1eq HABCDp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: nil) (E :: A :: B :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: D :: p1 :: nil) (nil) 1 4 0 HEMtmp HABCDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1m5 : rk(A :: B :: C :: D :: E :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

assert(HABCDEp1M : rk(A :: B :: C :: D :: E :: p1 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HABCDEp1m : rk(A :: B :: C :: D :: E :: p1 ::  nil) >= 1) by (solve_hyps_min HABCDEp1eq HABCDEp1m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LBCDEp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(B :: C :: D :: E :: p1 ::  nil) = 5.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour BCDEp1 requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEDpp1 requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEDpp1 requis par la preuve de (?)ABCDEDpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEDpp1m5 : rk(A :: B :: C :: D :: E :: Dp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour BCDEp1 requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BE requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECp requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpp1m2 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDECpp1M5 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpp1m4 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABECpp1M4 : rk(A :: B :: E :: Cp :: p1 :: nil) <= 4).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HCpMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABECpp1m2 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) 2 2 HABCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Cp :: p1 ::  de rang :  4 et 5 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABECpp1m3 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABDECpp1mtmp : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABDECpp1eq HABDECpp1m4).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDECpp1mtmp;try rewrite HT2 in HABDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) (Cp :: nil) 4 1 2 HABDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: B :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HABECpm2 : rk(A :: B :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: B :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABECpm3 : rk(A :: B :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABECpp1mtmp : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HABECpp1eq HABECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABECpp1mtmp;try rewrite HT2 in HABECpp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Cp :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABECpp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour BCDEp1 requis par la preuve de (?)BCDEp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : B :: E ::  de rang :  1 et 2 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HBCDEp1m2 : rk(B :: C :: D :: E :: p1 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HBEmtmp : rk(B :: E :: nil) >= 1) by (solve_hyps_min HBEeq HBEm1).
	assert(Hincl : incl (B :: E :: nil) (list_inter (A :: B :: E :: Cp :: nil) (B :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: B :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: B :: C :: D :: E :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (B :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (B :: C :: D :: E :: p1 :: nil) (B :: E :: nil) 5 1 4 HABCDECpp1mtmp HBEmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Dp :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : A :: Dp ::   de rang : 1 et 2 *)
assert(HBCDEp1m3 : rk(B :: C :: D :: E :: p1 :: nil) >= 3).
{
	assert(HADpMtmp : rk(A :: Dp :: nil) <= 2) by (solve_hyps_max HADpeq HADpM2).
	assert(HABCDEDpp1mtmp : rk(A :: B :: C :: D :: E :: Dp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEDpp1eq HABCDEDpp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: Dp :: nil) (B :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Dp :: p1 :: nil) (A :: Dp :: B :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: Dp :: B :: C :: D :: E :: p1 :: nil) ((A :: Dp :: nil) ++ (B :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEDpp1mtmp;try rewrite HT2 in HABCDEDpp1mtmp.
	assert(HT := rule_4 (A :: Dp :: nil) (B :: C :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEDpp1mtmp Hmtmp HADpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 5) *)
(* marque des antécédents AUB AiB A: 4 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 ::  de rang :  5 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: p1 ::   de rang : 1 et 1 *)
assert(HBCDEp1m5 : rk(B :: C :: D :: E :: p1 :: nil) >= 5).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCDEp1eq : rk(A :: B :: C :: D :: E :: p1 :: nil) = 5) by (apply LABCDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCDEp1mtmp : rk(A :: B :: C :: D :: E :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEp1eq HABCDEp1m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: p1 :: nil) (B :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: nil) (A :: p1 :: B :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: D :: E :: p1 :: nil) ((A :: p1 :: nil) ++ (B :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1mtmp;try rewrite HT2 in HABCDEp1mtmp.
	assert(HT := rule_4 (A :: p1 :: nil) (B :: C :: D :: E :: p1 :: nil) (p1 :: nil) 5 1 1 HABCDEp1mtmp Hp1mtmp HAp1Mtmp Hincl); apply HT.
}

assert(HBCDEp1M : rk(B :: C :: D :: E :: p1 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max HBCDEp1eq HBCDEp1M5).
assert(HBCDEp1m : rk(B :: C :: D :: E :: p1 ::  nil) >= 1) by (solve_hyps_min HBCDEp1eq HBCDEp1m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LCDEp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(C :: D :: E :: p1 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour CDEp1 requis par la preuve de (?)CDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)CDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp1m3 : rk(A :: C :: D :: E :: p1 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour CDEp1 requis par la preuve de (?)CDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)CDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECp requis par la preuve de (?)CDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpp1m2 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDECpp1M5 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpp1m4 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABECpp1M4 : rk(A :: B :: E :: Cp :: p1 :: nil) <= 4).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HCpMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABECpp1m2 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) 2 2 HABCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Cp :: p1 ::  de rang :  4 et 5 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABECpp1m3 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABDECpp1mtmp : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABDECpp1eq HABDECpp1m4).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDECpp1mtmp;try rewrite HT2 in HABDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) (Cp :: nil) 4 1 2 HABDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: B :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HABECpm2 : rk(A :: B :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: B :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABECpm3 : rk(A :: B :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABECpp1mtmp : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HABECpp1eq HABECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABECpp1mtmp;try rewrite HT2 in HABECpp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Cp :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABECpp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour CDEp1 requis par la preuve de (?)CDEp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HCDEp1m2 : rk(C :: D :: E :: p1 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (A :: B :: E :: Cp :: nil) (C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: C :: D :: E :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (C :: D :: E :: p1 :: nil) (E :: nil) 5 1 4 HABCDECpp1mtmp HEmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 ::  de rang :  3 et 4 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: p1 ::   de rang : 1 et 1 *)
assert(HCDEp1m3 : rk(C :: D :: E :: p1 :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HACDEp1mtmp : rk(A :: C :: D :: E :: p1 :: nil) >= 3) by (solve_hyps_min HACDEp1eq HACDEp1m3).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: p1 :: nil) (C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (A :: p1 :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: C :: D :: E :: p1 :: nil) ((A :: p1 :: nil) ++ (C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1mtmp;try rewrite HT2 in HACDEp1mtmp.
	assert(HT := rule_4 (A :: p1 :: nil) (C :: D :: E :: p1 :: nil) (p1 :: nil) 3 1 1 HACDEp1mtmp Hp1mtmp HAp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : B :: C :: D :: E :: p1 ::  de rang :  5 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HCDEp1m4 : rk(C :: D :: E :: p1 :: nil) >= 4).
{
	assert(HBp1eq : rk(B :: p1 :: nil) = 2) by (apply LBp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HBCDEp1eq : rk(B :: C :: D :: E :: p1 :: nil) = 5) by (apply LBCDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCDEp1mtmp : rk(B :: C :: D :: E :: p1 :: nil) >= 5) by (solve_hyps_min HBCDEp1eq HBCDEp1m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (B :: C :: D :: E :: p1 :: nil) (B :: p1 :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: C :: D :: E :: p1 :: nil) ((B :: p1 :: nil) ++ (C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HBCDEp1mtmp;try rewrite HT2 in HBCDEp1mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (C :: D :: E :: p1 :: nil) (p1 :: nil) 5 1 2 HBCDEp1mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

assert(HCDEp1M : rk(C :: D :: E :: p1 ::  nil) <= 4) (* dim : 5 *) by (solve_hyps_max HCDEp1eq HCDEp1M4).
assert(HCDEp1m : rk(C :: D :: E :: p1 ::  nil) >= 1) by (solve_hyps_min HCDEp1eq HCDEp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par LCp1 *)
(* dans la couche 0 *)
Lemma LCp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(C :: p1 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour DEp1 requis par la preuve de (?)Cp1 pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)DEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour DEp1 requis par la preuve de (?)DEp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: D :: E :: p1 ::  de rang :  2 et 3 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: p1 ::   de rang : 1 et 1 *)
assert(HDEp1m2 : rk(D :: E :: p1 :: nil) >= 2).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HADEp1mtmp : rk(A :: D :: E :: p1 :: nil) >= 2) by (solve_hyps_min HADEp1eq HADEp1m2).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: p1 :: nil) (D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (A :: p1 :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: D :: E :: p1 :: nil) ((A :: p1 :: nil) ++ (D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1mtmp;try rewrite HT2 in HADEp1mtmp.
	assert(HT := rule_4 (A :: p1 :: nil) (D :: E :: p1 :: nil) (p1 :: nil) 2 1 1 HADEp1mtmp Hp1mtmp HAp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour Cp1 requis par la preuve de (?)Cp1 pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 4 -2 et 5*)
assert(HCp1m2 : rk(C :: p1 :: nil) >= 2).
{
	assert(HDEp1Mtmp : rk(D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HDEp1eq HDEp1M3).
	assert(HCDEp1eq : rk(C :: D :: E :: p1 :: nil) = 4) by (apply LCDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HCDEp1mtmp : rk(C :: D :: E :: p1 :: nil) >= 4) by (solve_hyps_min HCDEp1eq HCDEp1m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (C :: D :: E :: p1 :: nil) (C :: p1 :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: D :: E :: p1 :: nil) ((C :: p1 :: nil) ++ (D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HCDEp1mtmp;try rewrite HT2 in HCDEp1mtmp.
	assert(HT := rule_2 (C :: p1 :: nil) (D :: E :: p1 :: nil) (p1 :: nil) 4 1 3 HCDEp1mtmp Hp1mtmp HDEp1Mtmp Hincl);apply HT.
}

assert(HCp1M : rk(C :: p1 ::  nil) <= 2) (* dim : 5 *) by (solve_hyps_max HCp1eq HCp1M2).
assert(HCp1m : rk(C :: p1 ::  nil) >= 1) by (solve_hyps_min HCp1eq HCp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par LBCp1 *)
(* dans la couche 0 *)
Lemma LDEp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(D :: E :: p1 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour DEp1 requis par la preuve de (?)DEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)DEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour DEp1 requis par la preuve de (?)DEp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: D :: E :: p1 ::  de rang :  2 et 3 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: p1 ::   de rang : 1 et 1 *)
assert(HDEp1m2 : rk(D :: E :: p1 :: nil) >= 2).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HADEp1mtmp : rk(A :: D :: E :: p1 :: nil) >= 2) by (solve_hyps_min HADEp1eq HADEp1m2).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: p1 :: nil) (D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (A :: p1 :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: D :: E :: p1 :: nil) ((A :: p1 :: nil) ++ (D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1mtmp;try rewrite HT2 in HADEp1mtmp.
	assert(HT := rule_4 (A :: p1 :: nil) (D :: E :: p1 :: nil) (p1 :: nil) 2 1 1 HADEp1mtmp Hp1mtmp HAp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 3) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : C :: D :: E :: p1 ::  de rang :  4 et 4 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HDEp1m3 : rk(D :: E :: p1 :: nil) >= 3).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HCDEp1eq : rk(C :: D :: E :: p1 :: nil) = 4) by (apply LCDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HCDEp1mtmp : rk(C :: D :: E :: p1 :: nil) >= 4) by (solve_hyps_min HCDEp1eq HCDEp1m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (C :: D :: E :: p1 :: nil) (C :: p1 :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: D :: E :: p1 :: nil) ((C :: p1 :: nil) ++ (D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HCDEp1mtmp;try rewrite HT2 in HCDEp1mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (D :: E :: p1 :: nil) (p1 :: nil) 4 1 2 HCDEp1mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

assert(HDEp1M : rk(D :: E :: p1 ::  nil) <= 3) (* dim : 5 *) by (solve_hyps_max HDEp1eq HDEp1M3).
assert(HDEp1m : rk(D :: E :: p1 ::  nil) >= 1) by (solve_hyps_min HDEp1eq HDEp1m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LBCp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(B :: C :: p1 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCp1 requis par la preuve de (?)BCp1 pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp1 requis par la preuve de (?)BCp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCp1m2 : rk(A :: B :: C :: p1 :: nil) >= 2).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (E :: Ap :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: p1 :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: p1 :: nil) (nil) 4 0 2 HABCEApp1mtmp Hmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCp1 requis par la preuve de (?)BCp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: p1 ::  de rang :  2 et 3 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: p1 ::   de rang : 1 et 1 *)
assert(HBCp1m2 : rk(B :: C :: p1 :: nil) >= 2).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCp1mtmp : rk(A :: B :: C :: p1 :: nil) >= 2) by (solve_hyps_min HABCp1eq HABCp1m2).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: p1 :: nil) (B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (A :: p1 :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: p1 :: nil) ((A :: p1 :: nil) ++ (B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp1mtmp;try rewrite HT2 in HABCp1mtmp.
	assert(HT := rule_4 (A :: p1 :: nil) (B :: C :: p1 :: nil) (p1 :: nil) 2 1 1 HABCp1mtmp Hp1mtmp HAp1Mtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 4 -2 et 4*)
assert(HBCp1m3 : rk(B :: C :: p1 :: nil) >= 3).
{
	assert(HDEp1eq : rk(D :: E :: p1 :: nil) = 3) by (apply LDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HDEp1Mtmp : rk(D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HDEp1eq HDEp1M3).
	assert(HBCDEp1eq : rk(B :: C :: D :: E :: p1 :: nil) = 5) by (apply LBCDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCDEp1mtmp : rk(B :: C :: D :: E :: p1 :: nil) >= 5) by (solve_hyps_min HBCDEp1eq HBCDEp1m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: C :: p1 :: nil) (D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (B :: C :: D :: E :: p1 :: nil) (B :: C :: p1 :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: p1 :: D :: E :: p1 :: nil) ((B :: C :: p1 :: nil) ++ (D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HBCDEp1mtmp;try rewrite HT2 in HBCDEp1mtmp.
	assert(HT := rule_2 (B :: C :: p1 :: nil) (D :: E :: p1 :: nil) (p1 :: nil) 5 1 3 HBCDEp1mtmp Hp1mtmp HDEp1Mtmp Hincl);apply HT.
}

assert(HBCp1M : rk(B :: C :: p1 ::  nil) <= 3) (* dim : 5 *) by (solve_hyps_max HBCp1eq HBCp1M3).
assert(HBCp1m : rk(B :: C :: p1 ::  nil) >= 1) by (solve_hyps_min HBCp1eq HBCp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par LDp1 *)
(* dans constructLemma(), requis par LADEp1 *)
(* dans la couche 0 *)
Lemma LACDEp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: C :: D :: E :: p1 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp1m3 : rk(A :: C :: D :: E :: p1 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 ::  de rang :  5 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1m4 : rk(A :: C :: D :: E :: p1 :: nil) >= 4).
{
	assert(HBp1eq : rk(B :: p1 :: nil) = 2) by (apply LBp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1eq : rk(A :: B :: C :: D :: E :: p1 :: nil) = 5) by (apply LABCDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCDEp1mtmp : rk(A :: B :: C :: D :: E :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEp1eq HABCDEp1m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1mtmp;try rewrite HT2 in HABCDEp1mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: nil) (p1 :: nil) 5 1 2 HABCDEp1mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

assert(HACDEp1M : rk(A :: C :: D :: E :: p1 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max HACDEp1eq HACDEp1M5).
assert(HACDEp1m : rk(A :: C :: D :: E :: p1 ::  nil) >= 1) by (solve_hyps_min HACDEp1eq HACDEp1m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LADEp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: D :: E :: p1 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 3) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 ::  de rang :  4 et 4 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1m3 : rk(A :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1eq : rk(A :: C :: D :: E :: p1 :: nil) = 4) by (apply LACDEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACDEp1mtmp : rk(A :: C :: D :: E :: p1 :: nil) >= 4) by (solve_hyps_min HACDEp1eq HACDEp1m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (C :: p1 :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1mtmp;try rewrite HT2 in HACDEp1mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: nil) (p1 :: nil) 4 1 2 HACDEp1mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

assert(HADEp1M : rk(A :: D :: E :: p1 ::  nil) <= 4) (* dim : 5 *) by (solve_hyps_max HADEp1eq HADEp1M4).
assert(HADEp1m : rk(A :: D :: E :: p1 ::  nil) >= 1) by (solve_hyps_min HADEp1eq HADEp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par LDp1 *)
(* dans la couche 0 *)
Lemma LDp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(D :: p1 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)Dp1 pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour Dp1 requis par la preuve de (?)Dp1 pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 4 -2 et 5*)
assert(HDp1m2 : rk(D :: p1 :: nil) >= 2).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HADEp1eq : rk(A :: D :: E :: p1 :: nil) = 3) by (apply LADEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HADEp1mtmp : rk(A :: D :: E :: p1 :: nil) >= 3) by (solve_hyps_min HADEp1eq HADEp1m3).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (D :: p1 :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: A :: E :: p1 :: nil) ((D :: p1 :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1mtmp;try rewrite HT2 in HADEp1mtmp.
	assert(HT := rule_2 (D :: p1 :: nil) (A :: E :: p1 :: nil) (p1 :: nil) 3 1 2 HADEp1mtmp Hp1mtmp HAEp1Mtmp Hincl);apply HT.
}

assert(HDp1M : rk(D :: p1 ::  nil) <= 2) (* dim : 5 *) by (solve_hyps_max HDp1eq HDp1M2).
assert(HDp1m : rk(D :: p1 ::  nil) >= 1) by (solve_hyps_min HDp1eq HDp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par LADp1 *)
(* dans la couche 0 *)
Lemma LADp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: D :: p1 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour Ep1 requis par la preuve de (?)ADp1 pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 4 -2 et 5*)
assert(HADp1m2 : rk(A :: D :: p1 :: nil) >= 2).
{
	assert(HEp1Mtmp : rk(E :: p1 :: nil) <= 2) by (solve_hyps_max HEp1eq HEp1M2).
	assert(HADEp1eq : rk(A :: D :: E :: p1 :: nil) = 3) by (apply LADEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HADEp1mtmp : rk(A :: D :: E :: p1 :: nil) >= 3) by (solve_hyps_min HADEp1eq HADEp1m3).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: D :: p1 :: nil) (E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (A :: D :: p1 :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p1 :: E :: p1 :: nil) ((A :: D :: p1 :: nil) ++ (E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1mtmp;try rewrite HT2 in HADEp1mtmp.
	assert(HT := rule_2 (A :: D :: p1 :: nil) (E :: p1 :: nil) (p1 :: nil) 3 1 2 HADEp1mtmp Hp1mtmp HEp1Mtmp Hincl);apply HT.
}

assert(HADp1M : rk(A :: D :: p1 ::  nil) <= 3) (* dim : 5 *) by (solve_hyps_max HADp1eq HADp1M3).
assert(HADp1m : rk(A :: D :: p1 ::  nil) >= 1) by (solve_hyps_min HADp1eq HADp1m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LEp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(E :: p1 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour Ep1 requis par la preuve de (?)Ep1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 2) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: D :: E :: p1 ::  de rang :  3 et 3 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: D :: p1 ::   de rang : 2 et 2 *)
assert(HEp1m2 : rk(E :: p1 :: nil) >= 2).
{
	assert(HADp1eq : rk(A :: D :: p1 :: nil) = 2) by (apply LADp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(HADEp1eq : rk(A :: D :: E :: p1 :: nil) = 3) by (apply LADEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HADEp1mtmp : rk(A :: D :: E :: p1 :: nil) >= 3) by (solve_hyps_min HADEp1eq HADEp1m3).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: D :: p1 :: nil) (E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (A :: D :: p1 :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p1 :: E :: p1 :: nil) ((A :: D :: p1 :: nil) ++ (E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1mtmp;try rewrite HT2 in HADEp1mtmp.
	assert(HT := rule_4 (A :: D :: p1 :: nil) (E :: p1 :: nil) (p1 :: nil) 3 1 2 HADEp1mtmp Hp1mtmp HADp1Mtmp Hincl); apply HT.
}

assert(HEp1M : rk(E :: p1 ::  nil) <= 2) (* dim : 5 *) by (solve_hyps_max HEp1eq HEp1M2).
assert(HEp1m : rk(E :: p1 ::  nil) >= 1) by (solve_hyps_min HEp1eq HEp1m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LAEp1 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: E :: p1 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 2) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: D :: E :: p1 ::  de rang :  3 et 3 	 AiB : p1 ::  de rang :  1 et 1 	 A : D :: p1 ::   de rang : 2 et 2 *)
assert(HAEp1m2 : rk(A :: E :: p1 :: nil) >= 2).
{
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HDp1Mtmp : rk(D :: p1 :: nil) <= 2) by (solve_hyps_max HDp1eq HDp1M2).
	assert(HADEp1eq : rk(A :: D :: E :: p1 :: nil) = 3) by (apply LADEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HADEp1mtmp : rk(A :: D :: E :: p1 :: nil) >= 3) by (solve_hyps_min HADEp1eq HADEp1m3).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (D :: p1 :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: A :: E :: p1 :: nil) ((D :: p1 :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1mtmp;try rewrite HT2 in HADEp1mtmp.
	assert(HT := rule_4 (D :: p1 :: nil) (A :: E :: p1 :: nil) (p1 :: nil) 3 1 2 HADEp1mtmp Hp1mtmp HDp1Mtmp Hincl); apply HT.
}

assert(HAEp1M : rk(A :: E :: p1 ::  nil) <= 3) (* dim : 5 *) by (solve_hyps_max HAEp1eq HAEp1M3).
assert(HAEp1m : rk(A :: E :: p1 ::  nil) >= 1) by (solve_hyps_min HAEp1eq HAEp1m1).
intuition.
Qed.

(* dans constructLemma(), requis par Lp1p2 *)
(* dans la couche 0 *)
Lemma LAp1p2 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: p1 :: p2 ::  nil) = 1.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour Ap1p2 requis par la preuve de (?)Ap1p2 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour Ap1p2 requis par la preuve de (?)Ap1p2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAp1p2M2 : rk(A :: p1 :: p2 :: nil) <= 2).
{
	assert(Hp1Mtmp : rk(p1 :: nil) <= 1) by (solve_hyps_max Hp1eq Hp1M1).
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: nil) (p1 :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: A :: p2 :: nil) ((p1 :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: nil) (A :: p2 :: nil) (nil) 1 1 0 Hp1Mtmp HAp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 -4 et -2*)
assert(HAp1p2M1 : rk(A :: p1 :: p2 :: nil) <= 1).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p1 :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: nil) (A :: p1 :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: A :: p2 :: nil) ((A :: p1 :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (A :: p2 :: nil) (A :: nil) 1 1 1 HAp1Mtmp HAp2Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

assert(HAp1p2M : rk(A :: p1 :: p2 ::  nil) <= 3) (* dim : 5 *) by (solve_hyps_max HAp1p2eq HAp1p2M3).
assert(HAp1p2m : rk(A :: p1 :: p2 ::  nil) >= 1) by (solve_hyps_min HAp1p2eq HAp1p2m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma Lp1p2 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(p1 :: p2 ::  nil) = 1.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour p1p2 requis par la preuve de (?)p1p2 pour la règle 6  *)
(* Application de la règle 6 (code, 3 ou 4 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(Hp1p2M1 : rk(p1 :: p2 :: nil) <= 1).
{
	assert(HAp1p2eq : rk(A :: p1 :: p2 :: nil) = 1) by (apply LAp1p2 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAp1p2Mtmp : rk(A :: p1 :: p2 :: nil) <= 1) by (solve_hyps_max HAp1p2eq HAp1p2M1).
	assert(Hcomp : 1 <= 1) by (repeat constructor).
	assert(Hincl : incl (p1 :: p2 :: nil) (A :: p1 :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_6 (p1 :: p2 :: nil) (A :: p1 :: p2 :: nil) 1 1 HAp1p2Mtmp Hcomp Hincl);apply HT.
}

assert(Hp1p2M : rk(p1 :: p2 ::  nil) <= 2) (* dim : 5 *) by (solve_hyps_max Hp1p2eq Hp1p2M2).
assert(Hp1p2m : rk(p1 :: p2 ::  nil) >= 1) by (solve_hyps_min Hp1p2eq Hp1p2m1).
intuition.
Qed.

(* dans constructLemma(), requis par LABCp3 *)
(* dans constructLemma(), requis par LABCDp3 *)
(* dans constructLemma(), requis par LABCDEp1p3 *)
(* dans la couche 0 *)
Lemma LABCDEp3 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: p3 ::  nil) = 5.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDEp3 requis par la preuve de (?)ABCDEp3 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCDp3 requis par la preuve de (?)ABCDEp3 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCDp3 requis par la preuve de (?)ABCDp3 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABDp3 requis par la preuve de (?)ABCDp3 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp3 requis par la preuve de (?)ABDp3 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp3 requis par la preuve de (?)ABDp3 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp3M3 : rk(A :: B :: D :: p3 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: D :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p3 :: nil) (B :: A :: D :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: D :: p3 :: nil) ((B :: nil) ++ (A :: D :: p3 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: D :: p3 :: nil) (nil) 1 2 0 HBMtmp HADp3Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABDp3m2 : rk(A :: B :: D :: p3 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: D :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: D :: p3 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDp3 requis par la preuve de (?)ABCDp3 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCDp3M4 : rk(A :: B :: C :: D :: p3 :: nil) <= 4).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABDp3Mtmp : rk(A :: B :: D :: p3 :: nil) <= 3) by (solve_hyps_max HABDp3eq HABDp3M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: D :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: p3 :: nil) (C :: A :: B :: D :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: D :: p3 :: nil) ((C :: nil) ++ (A :: B :: D :: p3 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: D :: p3 :: nil) (nil) 1 3 0 HCMtmp HABDp3Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCDp3m2 : rk(A :: B :: C :: D :: p3 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: D :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: D :: p3 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp3 requis par la preuve de (?)ABCDEp3 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCDEp3M5 : rk(A :: B :: C :: D :: E :: p3 :: nil) <= 5).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCDp3Mtmp : rk(A :: B :: C :: D :: p3 :: nil) <= 4) by (solve_hyps_max HABCDp3eq HABCDp3M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: D :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p3 :: nil) (E :: A :: B :: C :: D :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: D :: p3 :: nil) ((E :: nil) ++ (A :: B :: C :: D :: p3 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: D :: p3 :: nil) (nil) 1 4 0 HEMtmp HABCDp3Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp3m5 : rk(A :: B :: C :: D :: E :: p3 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p3 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

assert(HABCDEp3M : rk(A :: B :: C :: D :: E :: p3 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HABCDEp3m : rk(A :: B :: C :: D :: E :: p3 ::  nil) >= 1) by (solve_hyps_min HABCDEp3eq HABCDEp3m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LABCDEp1p3 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: p1 :: p3 ::  nil) = 5.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p3 requis par la preuve de (?)ABCDEp1p3 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p3 requis par la preuve de (?)ABCDEp1p3 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p3m5 : rk(A :: B :: C :: D :: E :: p1 :: p3 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p3 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 4 et -2*)
assert(HABCDEp1p3M5 : rk(A :: B :: C :: D :: E :: p1 :: p3 :: nil) <= 5).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCDEp3eq : rk(A :: B :: C :: D :: E :: p3 :: nil) = 5) by (apply LABCDEp3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCDEp3Mtmp : rk(A :: B :: C :: D :: E :: p3 :: nil) <= 5) by (solve_hyps_max HABCDEp3eq HABCDEp3M5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p1 :: nil) (A :: B :: C :: D :: E :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p3 :: nil) (A :: p1 :: A :: B :: C :: D :: E :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: A :: B :: C :: D :: E :: p3 :: nil) ((A :: p1 :: nil) ++ (A :: B :: C :: D :: E :: p3 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (A :: B :: C :: D :: E :: p3 :: nil) (A :: nil) 1 5 1 HAp1Mtmp HABCDEp3Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

assert(HABCDEp1p3M : rk(A :: B :: C :: D :: E :: p1 :: p3 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HABCDEp1p3m : rk(A :: B :: C :: D :: E :: p1 :: p3 ::  nil) >= 1) by (solve_hyps_min HABCDEp1p3eq HABCDEp1p3m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LABCDp3 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: D :: p3 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCDp3 requis par la preuve de (?)ABCDp3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp3 requis par la preuve de (?)ABCDp3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp3 requis par la preuve de (?)ABCDEApp3 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp3m5 : rk(A :: B :: C :: D :: E :: Ap :: p3 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p3 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDp3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCDp3 requis par la preuve de (?)ABCDp3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCDp3 requis par la preuve de (?)ABCDp3 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABDp3 requis par la preuve de (?)ABCDp3 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp3 requis par la preuve de (?)ABDp3 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp3 requis par la preuve de (?)ABDp3 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp3M3 : rk(A :: B :: D :: p3 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: D :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p3 :: nil) (B :: A :: D :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: D :: p3 :: nil) ((B :: nil) ++ (A :: D :: p3 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: D :: p3 :: nil) (nil) 1 2 0 HBMtmp HADp3Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABDp3m2 : rk(A :: B :: D :: p3 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: D :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: D :: p3 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDp3 requis par la preuve de (?)ABCDp3 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCDp3M4 : rk(A :: B :: C :: D :: p3 :: nil) <= 4).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABDp3Mtmp : rk(A :: B :: D :: p3 :: nil) <= 3) by (solve_hyps_max HABDp3eq HABDp3M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: D :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: p3 :: nil) (C :: A :: B :: D :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: D :: p3 :: nil) ((C :: nil) ++ (A :: B :: D :: p3 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: D :: p3 :: nil) (nil) 1 3 0 HCMtmp HABDp3Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCDp3m2 : rk(A :: B :: C :: D :: p3 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: D :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: D :: p3 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p3 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDp3m3 : rk(A :: B :: C :: D :: p3 :: nil) >= 3).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApp3mtmp : rk(A :: B :: C :: D :: E :: Ap :: p3 :: nil) >= 5) by (solve_hyps_min HABCDEApp3eq HABCDEApp3m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p3 :: nil) (E :: Ap :: A :: B :: C :: D :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: p3 :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: p3 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp3mtmp;try rewrite HT2 in HABCDEApp3mtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: p3 :: nil) (nil) 5 0 2 HABCDEApp3mtmp Hmtmp HEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p3 ::  de rang :  5 et 5 	 AiB : A ::  de rang :  1 et 1 	 A : A :: E :: p1 ::   de rang : 2 et 2 *)
assert(HABCDp3m4 : rk(A :: B :: C :: D :: p3 :: nil) >= 4).
{
	assert(HAEp1eq : rk(A :: E :: p1 :: nil) = 2) by (apply LAEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABCDEp1p3eq : rk(A :: B :: C :: D :: E :: p1 :: p3 :: nil) = 5) by (apply LABCDEp1p3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCDEp1p3mtmp : rk(A :: B :: C :: D :: E :: p1 :: p3 :: nil) >= 5) by (solve_hyps_min HABCDEp1p3eq HABCDEp1p3m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: E :: p1 :: nil) (A :: B :: C :: D :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p3 :: nil) (A :: E :: p1 :: A :: B :: C :: D :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: E :: p1 :: A :: B :: C :: D :: p3 :: nil) ((A :: E :: p1 :: nil) ++ (A :: B :: C :: D :: p3 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p3mtmp;try rewrite HT2 in HABCDEp1p3mtmp.
	assert(HT := rule_4 (A :: E :: p1 :: nil) (A :: B :: C :: D :: p3 :: nil) (A :: nil) 5 1 2 HABCDEp1p3mtmp HAmtmp HAEp1Mtmp Hincl); apply HT.
}

assert(HABCDp3M : rk(A :: B :: C :: D :: p3 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max HABCDp3eq HABCDp3M5).
assert(HABCDp3m : rk(A :: B :: C :: D :: p3 ::  nil) >= 1) by (solve_hyps_min HABCDp3eq HABCDp3m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LABCp3 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: p3 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCp3 requis par la preuve de (?)ABCp3 pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEp1p3 requis par la preuve de (?)ABCp3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEp1p3 requis par la preuve de (?)ABCEp1p3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCEp3 requis par la preuve de (?)ABCEp1p3 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp3 requis par la preuve de (?)BCEp3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp3 requis par la preuve de (?)ABCDECpp3 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp3m5 : rk(A :: B :: C :: D :: E :: Cp :: p3 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p3 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ADECp requis par la preuve de (?)BCEp3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ADECpp1 requis par la preuve de (?)ADECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDECpp1 requis par la preuve de (?)ADECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ACDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDECpp1 requis par la preuve de (?)ACDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp1m3 : rk(A :: C :: D :: E :: p1 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDECpp1 requis par la preuve de (?)ACDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ACDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ACDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDECpp1 requis par la preuve de (?)ACDECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDECpp1m2 : rk(A :: C :: D :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: Cp :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: Cp :: p1 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpp1mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDECpp1M5 : rk(A :: C :: D :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: C :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDECpp1m4 : rk(A :: C :: D :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: Cp :: A :: C :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: Cp :: p1 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HBCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ADECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADECpp1 requis par la preuve de (?)ADECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ADECpp1 requis par la preuve de (?)ADECpp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADECpp1M4 : rk(A :: D :: E :: Cp :: p1 :: nil) <= 4).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: D :: E :: p1 :: nil) (nil) 1 3 0 HCpMtmp HADEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Cp :: p1 ::  de rang :  4 et 5 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HADECpp1m3 : rk(A :: D :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HACDECpp1mtmp : rk(A :: C :: D :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HACDECpp1eq HACDECpp1m4).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Cp :: p1 :: nil) (C :: Cp :: A :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: D :: E :: Cp :: p1 :: nil) ((C :: Cp :: nil) ++ (A :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDECpp1mtmp;try rewrite HT2 in HACDECpp1mtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 4 1 2 HACDECpp1mtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ADECp requis par la preuve de (?)ADECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ADECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADCp requis par la preuve de (?)ADECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ADCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADCp requis par la preuve de (?)ADCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HADCpm2 : rk(A :: D :: Cp :: nil) >= 2).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HADECpp1mtmp : rk(A :: D :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HADECpp1eq HADECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: D :: Cp :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: Cp :: p1 :: nil) (A :: D :: Cp :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: Cp :: A :: E :: p1 :: nil) ((A :: D :: Cp :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADECpp1mtmp;try rewrite HT2 in HADECpp1mtmp.
	assert(HT := rule_2 (A :: D :: Cp :: nil) (A :: E :: p1 :: nil) (A :: nil) 3 1 2 HADECpp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ADECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADECp requis par la preuve de (?)ADECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: D :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HADECpm2 : rk(A :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HADCpmtmp : rk(A :: D :: Cp :: nil) >= 2) by (solve_hyps_min HADCpeq HADCpm2).
	assert(Hincl : incl (A :: D :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: D :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: D :: E :: Cp :: nil) (A :: D :: Cp :: nil) 5 2 5 HABCDECpmtmp HADCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HADECpm3 : rk(A :: D :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HADECpp1mtmp : rk(A :: D :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HADECpp1eq HADECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: D :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: Cp :: p1 :: nil) (A :: D :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: E :: Cp :: A :: p1 :: nil) ((A :: D :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADECpp1mtmp;try rewrite HT2 in HADECpp1mtmp.
	assert(HT := rule_2 (A :: D :: E :: Cp :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HADECpp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCEp3 requis par la preuve de (?)BCEp3 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p3 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : A :: D :: E :: Cp ::   de rang : 3 et 4 *)
assert(HBCEp3m2 : rk(B :: C :: E :: p3 :: nil) >= 2).
{
	assert(HADECpMtmp : rk(A :: D :: E :: Cp :: nil) <= 4) by (solve_hyps_max HADECpeq HADECpM4).
	assert(HABCDECpp3mtmp : rk(A :: B :: C :: D :: E :: Cp :: p3 :: nil) >= 5) by (solve_hyps_min HABCDECpp3eq HABCDECpp3m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (A :: D :: E :: Cp :: nil) (B :: C :: E :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p3 :: nil) (A :: D :: E :: Cp :: B :: C :: E :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: E :: Cp :: B :: C :: E :: p3 :: nil) ((A :: D :: E :: Cp :: nil) ++ (B :: C :: E :: p3 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp3mtmp;try rewrite HT2 in HABCDECpp3mtmp.
	assert(HT := rule_4 (A :: D :: E :: Cp :: nil) (B :: C :: E :: p3 :: nil) (E :: nil) 5 1 4 HABCDECpp3mtmp HEmtmp HADECpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEp1p3 requis par la preuve de (?)ABCEp1p3 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p3 requis par la preuve de (?)ABCEp1p3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p3 requis par la preuve de (?)ABCDECpp1p3 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p3m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCEp1p3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEp1p3 requis par la preuve de (?)ABCEp1p3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p3 requis par la preuve de (?)ABCEp1p3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p3 requis par la preuve de (?)ABCDEApBpp1p3 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p3m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCEp1p3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEp1p3 requis par la preuve de (?)ABCEp1p3 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCEp1p3m2 : rk(A :: B :: C :: E :: p1 :: p3 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpp1p3mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p3eq HABCDEApBpp1p3m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: p1 :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: p1 :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: p1 :: p3 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: p1 :: p3 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p3mtmp;try rewrite HT2 in HABCDEApBpp1p3mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: p1 :: p3 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpp1p3mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCEp1p3m3 : rk(A :: B :: C :: E :: p1 :: p3 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p3mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3eq HABCDECpp1p3m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: p1 :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: nil) (D :: Cp :: A :: B :: C :: E :: p1 :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: p1 :: p3 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: p1 :: p3 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3mtmp;try rewrite HT2 in HABCDECpp1p3mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: p1 :: p3 :: nil) (nil) 5 0 2 HABCDECpp1p3mtmp Hmtmp HDCpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HABCEp1p3M5 : rk(A :: B :: C :: E :: p1 :: p3 :: nil) <= 5).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HBCEp3Mtmp : rk(B :: C :: E :: p3 :: nil) <= 4) by (solve_hyps_max HBCEp3eq HBCEp3M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (B :: C :: E :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: p3 :: nil) (A :: p1 :: B :: C :: E :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: E :: p3 :: nil) ((A :: p1 :: nil) ++ (B :: C :: E :: p3 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (B :: C :: E :: p3 :: nil) (nil) 1 4 0 HAp1Mtmp HBCEp3Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p3 ::  de rang :  5 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : D :: p1 ::   de rang : 2 et 2 *)
assert(HABCEp1p3m4 : rk(A :: B :: C :: E :: p1 :: p3 :: nil) >= 4).
{
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HDp1Mtmp : rk(D :: p1 :: nil) <= 2) by (solve_hyps_max HDp1eq HDp1M2).
	assert(HABCDEp1p3eq : rk(A :: B :: C :: D :: E :: p1 :: p3 :: nil) = 5) by (apply LABCDEp1p3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCDEp1p3mtmp : rk(A :: B :: C :: D :: E :: p1 :: p3 :: nil) >= 5) by (solve_hyps_min HABCDEp1p3eq HABCDEp1p3m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (A :: B :: C :: E :: p1 :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p3 :: nil) (D :: p1 :: A :: B :: C :: E :: p1 :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: A :: B :: C :: E :: p1 :: p3 :: nil) ((D :: p1 :: nil) ++ (A :: B :: C :: E :: p1 :: p3 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p3mtmp;try rewrite HT2 in HABCDEp1p3mtmp.
	assert(HT := rule_4 (D :: p1 :: nil) (A :: B :: C :: E :: p1 :: p3 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p3mtmp Hp1mtmp HDp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCp3 requis par la preuve de (?)ABCp3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCECpp3 requis par la preuve de (?)ABCp3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCECpp3 requis par la preuve de (?)ABCECpp3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCECpp3 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpm2 : rk(A :: B :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpm4 : rk(A :: B :: D :: E :: Cp :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCCpm2 : rk(A :: B :: C :: Cp :: nil) >= 2).
{
	assert(HABDECpMtmp : rk(A :: B :: D :: E :: Cp :: nil) <= 5) by (solve_hyps_max HABDECpeq HABDECpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABDECpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCCpm3 : rk(A :: B :: C :: Cp :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDECpp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp3 requis par la preuve de (?)ABCECpp3 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp3 requis par la preuve de (?)ABCECpp3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp3 requis par la preuve de (?)ABCDEApBpCpp3 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp3m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p3 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p3 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp3 requis par la preuve de (?)ABCECpp3 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p3 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp3m2 : rk(A :: B :: C :: E :: Cp :: p3 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp3mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p3 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp3eq HABCDEApBpCpp3m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p3 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p3 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p3 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp3mtmp;try rewrite HT2 in HABCDEApBpCpp3mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p3 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp3mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp3m3 : rk(A :: B :: C :: E :: Cp :: p3 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p3 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p3 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp3m4 : rk(A :: B :: C :: E :: Cp :: p3 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp3mtmp : rk(A :: B :: C :: D :: E :: Cp :: p3 :: nil) >= 5) by (solve_hyps_min HABCDECpp3eq HABCDECpp3m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p3 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p3 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p3 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp3mtmp;try rewrite HT2 in HABCDECpp3mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p3 :: nil) (Cp :: nil) 5 1 2 HABCDECpp3mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECp requis par la preuve de (?)ABCp3 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpp1m2 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDECpp1M5 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpp1m4 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABECpp1M4 : rk(A :: B :: E :: Cp :: p1 :: nil) <= 4).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HCpMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABECpp1m2 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) 2 2 HABCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Cp :: p1 ::  de rang :  4 et 5 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABECpp1m3 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABDECpp1mtmp : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABDECpp1eq HABDECpp1m4).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDECpp1mtmp;try rewrite HT2 in HABDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) (Cp :: nil) 4 1 2 HABDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: B :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HABECpm2 : rk(A :: B :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: B :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABECpm3 : rk(A :: B :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABECpp1mtmp : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HABECpp1eq HABECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABECpp1mtmp;try rewrite HT2 in HABECpp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Cp :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABECpp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp3 requis par la preuve de (?)ABCp3 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Cp :: p3 ::  de rang :  4 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABCp3m2 : rk(A :: B :: C :: p3 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCECpp3mtmp : rk(A :: B :: C :: E :: Cp :: p3 :: nil) >= 4) by (solve_hyps_min HABCECpp3eq HABCECpp3m4).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: B :: C :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p3 :: nil) (A :: B :: E :: Cp :: A :: B :: C :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: B :: C :: p3 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: B :: C :: p3 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp3mtmp;try rewrite HT2 in HABCECpp3mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (A :: B :: C :: p3 :: nil) (A :: B :: nil) 4 2 4 HABCECpp3mtmp HABmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: E :: p1 :: p3 ::  de rang :  4 et 5 	 AiB : A ::  de rang :  1 et 1 	 A : A :: E :: p1 ::   de rang : 2 et 2 *)
assert(HABCp3m3 : rk(A :: B :: C :: p3 :: nil) >= 3).
{
	assert(HAEp1eq : rk(A :: E :: p1 :: nil) = 2) by (apply LAEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABCEp1p3mtmp : rk(A :: B :: C :: E :: p1 :: p3 :: nil) >= 4) by (solve_hyps_min HABCEp1p3eq HABCEp1p3m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: E :: p1 :: nil) (A :: B :: C :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: p3 :: nil) (A :: E :: p1 :: A :: B :: C :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: E :: p1 :: A :: B :: C :: p3 :: nil) ((A :: E :: p1 :: nil) ++ (A :: B :: C :: p3 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEp1p3mtmp;try rewrite HT2 in HABCEp1p3mtmp.
	assert(HT := rule_4 (A :: E :: p1 :: nil) (A :: B :: C :: p3 :: nil) (A :: nil) 4 1 2 HABCEp1p3mtmp HAmtmp HAEp1Mtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 4 -4 et -4*)
assert(HABCp3m4 : rk(A :: B :: C :: p3 :: nil) >= 4).
{
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(HABCDp3eq : rk(A :: B :: C :: D :: p3 :: nil) = 4) by (apply LABCDp3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCDp3mtmp : rk(A :: B :: C :: D :: p3 :: nil) >= 4) by (solve_hyps_min HABCDp3eq HABCDp3m4).
	assert(HAp3mtmp : rk(A :: p3 :: nil) >= 2) by (solve_hyps_min HAp3eq HAp3m2).
	assert(Hincl : incl (A :: p3 :: nil) (list_inter (A :: B :: C :: p3 :: nil) (A :: D :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: p3 :: nil) (A :: B :: C :: p3 :: A :: D :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: p3 :: A :: D :: p3 :: nil) ((A :: B :: C :: p3 :: nil) ++ (A :: D :: p3 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDp3mtmp;try rewrite HT2 in HABCDp3mtmp.
	assert(HT := rule_2 (A :: B :: C :: p3 :: nil) (A :: D :: p3 :: nil) (A :: p3 :: nil) 4 2 2 HABCDp3mtmp HAp3mtmp HADp3Mtmp Hincl);apply HT.
}

assert(HABCp3M : rk(A :: B :: C :: p3 ::  nil) <= 4) (* dim : 5 *) by (solve_hyps_max HABCp3eq HABCp3M4).
assert(HABCp3m : rk(A :: B :: C :: p3 ::  nil) >= 1) by (solve_hyps_min HABCp3eq HABCp3m1).
intuition.
Qed.

(* dans constructLemma(), requis par Lp1p3 *)
(* dans constructLemma(), requis par LAEp1p3p4 *)
(* dans constructLemma(), requis par LADEp1p3p4 *)
(* dans constructLemma(), requis par LAEp1p4 *)
(* dans constructLemma(), requis par LADEp1p4 *)
(* dans constructLemma(), requis par LACDEp1p4 *)
(* dans constructLemma(), requis par LABCDEp1p4 *)
(* dans la couche 0 *)
Lemma LABCDEp4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: p4 ::  nil) = 5.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDEp4 requis par la preuve de (?)ABCDEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCEp4 requis par la preuve de (?)ABCDEp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp4 requis par la preuve de (?)ABCEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp4 requis par la preuve de (?)ABCEp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp4 requis par la preuve de (?)ABEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp4 requis par la preuve de (?)ABEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp4M3 : rk(A :: B :: E :: p4 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p4 :: nil) (B :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: E :: p4 :: nil) ((B :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HBMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABEp4m2 : rk(A :: B :: E :: p4 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: E :: p4 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp4 requis par la preuve de (?)ABCEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp4M4 : rk(A :: B :: C :: E :: p4 :: nil) <= 4).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABEp4Mtmp : rk(A :: B :: E :: p4 :: nil) <= 3) by (solve_hyps_max HABEp4eq HABEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p4 :: nil) (C :: A :: B :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: E :: p4 :: nil) ((C :: nil) ++ (A :: B :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: E :: p4 :: nil) (nil) 1 3 0 HCMtmp HABEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCEp4m2 : rk(A :: B :: C :: E :: p4 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: E :: p4 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp4 requis par la preuve de (?)ABCDEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCDEp4M5 : rk(A :: B :: C :: D :: E :: p4 :: nil) <= 5).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABCEp4Mtmp : rk(A :: B :: C :: E :: p4 :: nil) <= 4) by (solve_hyps_max HABCEp4eq HABCEp4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p4 :: nil) (D :: A :: B :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: C :: E :: p4 :: nil) ((D :: nil) ++ (A :: B :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: C :: E :: p4 :: nil) (nil) 1 4 0 HDMtmp HABCEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp4m5 : rk(A :: B :: C :: D :: E :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

assert(HABCDEp4M : rk(A :: B :: C :: D :: E :: p4 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HABCDEp4m : rk(A :: B :: C :: D :: E :: p4 ::  nil) >= 1) by (solve_hyps_min HABCDEp4eq HABCDEp4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LABCDEp1p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: p1 :: p4 ::  nil) = 5.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p4 requis par la preuve de (?)ABCDEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p4 requis par la preuve de (?)ABCDEp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 4 et -2*)
assert(HABCDEp1p4M5 : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) <= 5).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCDEp4eq : rk(A :: B :: C :: D :: E :: p4 :: nil) = 5) by (apply LABCDEp4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCDEp4Mtmp : rk(A :: B :: C :: D :: E :: p4 :: nil) <= 5) by (solve_hyps_max HABCDEp4eq HABCDEp4M5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p1 :: nil) (A :: B :: C :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p4 :: nil) (A :: p1 :: A :: B :: C :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: A :: B :: C :: D :: E :: p4 :: nil) ((A :: p1 :: nil) ++ (A :: B :: C :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (A :: B :: C :: D :: E :: p4 :: nil) (A :: nil) 1 5 1 HAp1Mtmp HABCDEp4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

assert(HABCDEp1p4M : rk(A :: B :: C :: D :: E :: p1 :: p4 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HABCDEp1p4m : rk(A :: B :: C :: D :: E :: p1 :: p4 ::  nil) >= 1) by (solve_hyps_min HABCDEp1p4eq HABCDEp1p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LACDEp1p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: C :: D :: E :: p1 :: p4 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp4 requis par la preuve de (?)ACDEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ACDEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ABCDEApp4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp4m5 : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp4 requis par la preuve de (?)ACDEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACEp4 requis par la preuve de (?)ACDEp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACEp4 requis par la preuve de (?)ACEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEp4 requis par la preuve de (?)ACEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACEp4M3 : rk(A :: C :: E :: p4 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: E :: p4 :: nil) (C :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: E :: p4 :: nil) ((C :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HCMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HACEp4m2 : rk(A :: C :: E :: p4 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: C :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: C :: E :: p4 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp4 requis par la preuve de (?)ACDEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp4M4 : rk(A :: C :: D :: E :: p4 :: nil) <= 4).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACEp4Mtmp : rk(A :: C :: E :: p4 :: nil) <= 3) by (solve_hyps_max HACEp4eq HACEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p4 :: nil) (D :: A :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: E :: p4 :: nil) ((D :: nil) ++ (A :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: E :: p4 :: nil) (nil) 1 3 0 HDMtmp HACEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp4m3 : rk(A :: C :: D :: E :: p4 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp4mtmp : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApp4eq HABCDEApp4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p4 :: nil) (B :: Ap :: A :: C :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p4 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp4mtmp;try rewrite HT2 in HABCDEApp4mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p4 :: nil) (nil) 5 0 2 HABCDEApp4mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ACDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p4 requis par la preuve de (?)ABCDECpp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p4 requis par la preuve de (?)ABCDEApBpp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p4 requis par la preuve de (?)ACDEp1p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p4m2 : rk(A :: C :: D :: E :: p1 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p4eq HABCDEApBpp1p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p4mtmp;try rewrite HT2 in HABCDEApBpp1p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p4m3 : rk(A :: C :: D :: E :: p1 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p4eq HABCDECpp1p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p4mtmp;try rewrite HT2 in HABCDECpp1p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1p4M5 : rk(A :: C :: D :: E :: p1 :: p4 :: nil) <= 5).
{
	assert(Hp1Mtmp : rk(p1 :: nil) <= 1) by (solve_hyps_max Hp1eq Hp1M1).
	assert(HACDEp4Mtmp : rk(A :: C :: D :: E :: p4 :: nil) <= 4) by (solve_hyps_max HACDEp4eq HACDEp4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: nil) (A :: C :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p4 :: nil) (p1 :: A :: C :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: A :: C :: D :: E :: p4 :: nil) ((p1 :: nil) ++ (A :: C :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: nil) (A :: C :: D :: E :: p4 :: nil) (nil) 1 4 0 Hp1Mtmp HACDEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HACDEp1p4M4 : rk(A :: C :: D :: E :: p1 :: p4 :: nil) <= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HACDEp4Mtmp : rk(A :: C :: D :: E :: p4 :: nil) <= 4) by (solve_hyps_max HACDEp4eq HACDEp4M4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p1 :: nil) (A :: C :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p4 :: nil) (A :: p1 :: A :: C :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: A :: C :: D :: E :: p4 :: nil) ((A :: p1 :: nil) ++ (A :: C :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (A :: C :: D :: E :: p4 :: nil) (A :: nil) 1 4 1 HAp1Mtmp HACDEp4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p4 ::  de rang :  5 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p4m4 : rk(A :: C :: D :: E :: p1 :: p4 :: nil) >= 4).
{
	assert(HBp1eq : rk(B :: p1 :: nil) = 2) by (apply LBp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p4eq : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) = 5) by (apply LABCDEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCDEp1p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p4eq HABCDEp1p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p4mtmp;try rewrite HT2 in HABCDEp1p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

assert(HACDEp1p4M : rk(A :: C :: D :: E :: p1 :: p4 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HACDEp1p4m : rk(A :: C :: D :: E :: p1 :: p4 ::  nil) >= 1) by (solve_hyps_min HACDEp1p4eq HACDEp1p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LADEp1p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: D :: E :: p1 :: p4 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1p4 requis par la preuve de (?)ADEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp4 requis par la preuve de (?)ADEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp4 requis par la preuve de (?)ADEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ACDEApp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ABCDEApp4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp4m5 : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp4 requis par la preuve de (?)ACDEApp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp4 requis par la preuve de (?)ACDEApp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ACEp4 requis par la preuve de (?)ACDEp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACEp4 requis par la preuve de (?)ACEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACEp4 requis par la preuve de (?)ACEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACEp4M3 : rk(A :: C :: E :: p4 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: E :: p4 :: nil) (C :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: E :: p4 :: nil) ((C :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HCMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HACEp4m2 : rk(A :: C :: E :: p4 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: C :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: C :: E :: p4 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp4 requis par la preuve de (?)ACDEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp4M4 : rk(A :: C :: D :: E :: p4 :: nil) <= 4).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACEp4Mtmp : rk(A :: C :: E :: p4 :: nil) <= 3) by (solve_hyps_max HACEp4eq HACEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p4 :: nil) (D :: A :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: E :: p4 :: nil) ((D :: nil) ++ (A :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: E :: p4 :: nil) (nil) 1 3 0 HDMtmp HACEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp4 requis par la preuve de (?)ACDEApp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp4M5 : rk(A :: C :: D :: E :: Ap :: p4 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp4Mtmp : rk(A :: C :: D :: E :: p4 :: nil) <= 4) by (solve_hyps_max HACDEp4eq HACDEp4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p4 :: nil) (Ap :: A :: C :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p4 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p4 :: nil) (nil) 1 4 0 HApMtmp HACDEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p4 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp4m4 : rk(A :: C :: D :: E :: Ap :: p4 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp4mtmp : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApp4eq HABCDEApp4m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p4 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p4 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp4mtmp;try rewrite HT2 in HABCDEApp4mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p4 :: nil) (Ap :: nil) 5 1 2 HABCDEApp4mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp4 requis par la preuve de (?)ADEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp4 requis par la preuve de (?)ADEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADEp4M3 : rk(A :: D :: E :: p4 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p4 :: nil) (D :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: E :: p4 :: nil) ((D :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HDMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p4 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp4m2 : rk(A :: D :: E :: p4 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp4mtmp : rk(A :: C :: D :: E :: Ap :: p4 :: nil) >= 4) by (solve_hyps_min HACDEApp4eq HACDEApp4m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p4 :: nil) (C :: Ap :: A :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p4 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp4mtmp;try rewrite HT2 in HACDEApp4mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p4 :: nil) (nil) 4 0 2 HACDEApp4mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ADEp1p4 requis par la preuve de (?)ADEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ADEp1p4 requis par la preuve de (?)ADEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p4 requis par la preuve de (?)ADEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p4 requis par la preuve de (?)ABCDECpp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCECp requis par la preuve de (?)ADEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpm2 : rk(A :: B :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpm4 : rk(A :: B :: D :: E :: Cp :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCCpm2 : rk(A :: B :: C :: Cp :: nil) >= 2).
{
	assert(HABDECpMtmp : rk(A :: B :: D :: E :: Cp :: nil) <= 5) by (solve_hyps_max HABDECpeq HABDECpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABDECpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCCpm3 : rk(A :: B :: C :: Cp :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDECpp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp1m3 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCCp requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -1 et 5*)
assert(HBCCpm2 : rk(B :: C :: Cp :: nil) >= 2).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (nil) 5 0 3 HABCDECpp1mtmp Hmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : B :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HBCECpm2 : rk(B :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HBCCpmtmp : rk(B :: C :: Cp :: nil) >= 2) by (solve_hyps_min HBCCpeq HBCCpm2).
	assert(Hincl : incl (B :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (B :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil) (B :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HBCCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -1 et -4*)
assert(HBCECpm3 : rk(B :: C :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (B :: C :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: p1 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (B :: C :: E :: Cp :: nil) (A :: p1 :: nil) (nil) 4 0 1 HABCECpp1mtmp Hmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ADEp1p4 requis par la preuve de (?)ADEp1p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p4 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1p4m2 : rk(A :: D :: E :: p1 :: p4 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p4eq HABCDECpp1p4m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p4 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p4mtmp;try rewrite HT2 in HABCDECpp1p4mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p4 :: nil) (E :: nil) 5 1 4 HABCDECpp1p4mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1p4M4 : rk(A :: D :: E :: p1 :: p4 :: nil) <= 4).
{
	assert(Hp1Mtmp : rk(p1 :: nil) <= 1) by (solve_hyps_max Hp1eq Hp1M1).
	assert(HADEp4Mtmp : rk(A :: D :: E :: p4 :: nil) <= 3) by (solve_hyps_max HADEp4eq HADEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: nil) (A :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p4 :: nil) (p1 :: A :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: A :: D :: E :: p4 :: nil) ((p1 :: nil) ++ (A :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: nil) (A :: D :: E :: p4 :: nil) (nil) 1 3 0 Hp1Mtmp HADEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HADEp1p4M3 : rk(A :: D :: E :: p1 :: p4 :: nil) <= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HADEp4Mtmp : rk(A :: D :: E :: p4 :: nil) <= 3) by (solve_hyps_max HADEp4eq HADEp4M3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p1 :: nil) (A :: D :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p4 :: nil) (A :: p1 :: A :: D :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: A :: D :: E :: p4 :: nil) ((A :: p1 :: nil) ++ (A :: D :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (A :: D :: E :: p4 :: nil) (A :: nil) 1 3 1 HAp1Mtmp HADEp4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 3) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p4 ::  de rang :  4 et 4 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p4m3 : rk(A :: D :: E :: p1 :: p4 :: nil) >= 3).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p4eq : rk(A :: C :: D :: E :: p1 :: p4 :: nil) = 4) by (apply LACDEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACDEp1p4mtmp : rk(A :: C :: D :: E :: p1 :: p4 :: nil) >= 4) by (solve_hyps_min HACDEp1p4eq HACDEp1p4m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p4mtmp;try rewrite HT2 in HACDEp1p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: p4 :: nil) (p1 :: nil) 4 1 2 HACDEp1p4mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

assert(HADEp1p4M : rk(A :: D :: E :: p1 :: p4 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max HADEp1p4eq HADEp1p4M5).
assert(HADEp1p4m : rk(A :: D :: E :: p1 :: p4 ::  nil) >= 1) by (solve_hyps_min HADEp1p4eq HADEp1p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LAEp1p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: E :: p1 :: p4 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1p4 requis par la preuve de (?)AEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1p4 requis par la preuve de (?)AEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour AEp1p4 requis par la preuve de (?)AEp1p4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1p4M3 : rk(A :: E :: p1 :: p4 :: nil) <= 3).
{
	assert(Hp1Mtmp : rk(p1 :: nil) <= 1) by (solve_hyps_max Hp1eq Hp1M1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p4 :: nil) (p1 :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: A :: E :: p4 :: nil) ((p1 :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 Hp1Mtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 -4 et -2*)
assert(HAEp1p4M2 : rk(A :: E :: p1 :: p4 :: nil) <= 2).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p1 :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p4 :: nil) (A :: p1 :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: A :: E :: p4 :: nil) ((A :: p1 :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (A :: E :: p4 :: nil) (A :: nil) 1 2 1 HAp1Mtmp HAEp4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 2) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: D :: E :: p1 :: p4 ::  de rang :  3 et 3 	 AiB : p1 ::  de rang :  1 et 1 	 A : D :: p1 ::   de rang : 2 et 2 *)
assert(HAEp1p4m2 : rk(A :: E :: p1 :: p4 :: nil) >= 2).
{
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HDp1Mtmp : rk(D :: p1 :: nil) <= 2) by (solve_hyps_max HDp1eq HDp1M2).
	assert(HADEp1p4eq : rk(A :: D :: E :: p1 :: p4 :: nil) = 3) by (apply LADEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HADEp1p4mtmp : rk(A :: D :: E :: p1 :: p4 :: nil) >= 3) by (solve_hyps_min HADEp1p4eq HADEp1p4m3).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (A :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p4 :: nil) (D :: p1 :: A :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: A :: E :: p1 :: p4 :: nil) ((D :: p1 :: nil) ++ (A :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1p4mtmp;try rewrite HT2 in HADEp1p4mtmp.
	assert(HT := rule_4 (D :: p1 :: nil) (A :: E :: p1 :: p4 :: nil) (p1 :: nil) 3 1 2 HADEp1p4mtmp Hp1mtmp HDp1Mtmp Hincl); apply HT.
}

assert(HAEp1p4M : rk(A :: E :: p1 :: p4 ::  nil) <= 4) (* dim : 5 *) by (solve_hyps_max HAEp1p4eq HAEp1p4M4).
assert(HAEp1p4m : rk(A :: E :: p1 :: p4 ::  nil) >= 1) by (solve_hyps_min HAEp1p4eq HAEp1p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LADEp1p3p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: D :: E :: p1 :: p3 :: p4 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ADEp1p3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ADEp1p3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p3p4 requis par la preuve de (?)ABCDEp1p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p3p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p3p4 requis par la preuve de (?)ABCDECpp1p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p3p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p3p4 requis par la preuve de (?)ABCDEApBpp1p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p3p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p3p4m2 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p3p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p3p4eq HABCDEApBpp1p3p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p3p4mtmp;try rewrite HT2 in HABCDEApBpp1p3p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p3p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p3p4m3 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p4eq HABCDECpp1p3p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p4mtmp;try rewrite HT2 in HABCDECpp1p3p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p3p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p3p4m4 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 4).
{
	assert(HBp1eq : rk(B :: p1 :: nil) = 2) by (apply LBp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p3p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p3p4eq HABCDEp1p3p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p3p4mtmp;try rewrite HT2 in HABCDEp1p3p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p3p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ADEp1p3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour DEp3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADEp1p3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCECp requis par la preuve de (?)ADEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpm2 : rk(A :: B :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpm4 : rk(A :: B :: D :: E :: Cp :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCCpm2 : rk(A :: B :: C :: Cp :: nil) >= 2).
{
	assert(HABDECpMtmp : rk(A :: B :: D :: E :: Cp :: nil) <= 5) by (solve_hyps_max HABDECpeq HABDECpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABDECpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCCpm3 : rk(A :: B :: C :: Cp :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDECpp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp1m3 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCCp requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -1 et 5*)
assert(HBCCpm2 : rk(B :: C :: Cp :: nil) >= 2).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (nil) 5 0 3 HABCDECpp1mtmp Hmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : B :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HBCECpm2 : rk(B :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HBCCpmtmp : rk(B :: C :: Cp :: nil) >= 2) by (solve_hyps_min HBCCpeq HBCCpm2).
	assert(Hincl : incl (B :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (B :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil) (B :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HBCCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -1 et -4*)
assert(HBCECpm3 : rk(B :: C :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (B :: C :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: p1 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (B :: C :: E :: Cp :: nil) (A :: p1 :: nil) (nil) 4 0 1 HABCECpp1mtmp Hmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADEp1p3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1p3p4m2 : rk(A :: D :: E :: p1 :: p3 :: p4 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p4eq HABCDECpp1p3p4m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p3 :: p4 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p4mtmp;try rewrite HT2 in HABCDECpp1p3p4mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: nil) (E :: nil) 5 1 4 HABCDECpp1p3p4mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HADEp1p3p4M5 : rk(A :: D :: E :: p1 :: p3 :: p4 :: nil) <= 5).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HDEp3p4Mtmp : rk(D :: E :: p3 :: p4 :: nil) <= 4) by (solve_hyps_max HDEp3p4eq HDEp3p4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (D :: E :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: p1 :: D :: E :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: D :: E :: p3 :: p4 :: nil) ((A :: p1 :: nil) ++ (D :: E :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (D :: E :: p3 :: p4 :: nil) (nil) 1 4 0 HAp1Mtmp HDEp3p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p3 :: p4 ::  de rang :  4 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p3p4m3 : rk(A :: D :: E :: p1 :: p3 :: p4 :: nil) >= 3).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p3p4mtmp : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 4) by (solve_hyps_min HACDEp1p3p4eq HACDEp1p3p4m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: p3 :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p3p4mtmp;try rewrite HT2 in HACDEp1p3p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: nil) (p1 :: nil) 4 1 2 HACDEp1p3p4mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 4 et 5*)
assert(HADEp1p3p4M4 : rk(A :: D :: E :: p1 :: p3 :: p4 :: nil) <= 4).
{
	assert(Hp3Mtmp : rk(p3 :: nil) <= 1) by (solve_hyps_max Hp3eq Hp3M1).
	assert(HADEp1p4eq : rk(A :: D :: E :: p1 :: p4 :: nil) = 3) by (apply LADEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HADEp1p4Mtmp : rk(A :: D :: E :: p1 :: p4 :: nil) <= 3) by (solve_hyps_max HADEp1p4eq HADEp1p4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p3 :: nil) (A :: D :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p3 :: p4 :: nil) (p3 :: A :: D :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p3 :: A :: D :: E :: p1 :: p4 :: nil) ((p3 :: nil) ++ (A :: D :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p3 :: nil) (A :: D :: E :: p1 :: p4 :: nil) (nil) 1 3 0 Hp3Mtmp HADEp1p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 4 et -2*)
assert(HADEp1p3p4M3 : rk(A :: D :: E :: p1 :: p3 :: p4 :: nil) <= 3).
{
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(HAEp1p4eq : rk(A :: E :: p1 :: p4 :: nil) = 2) by (apply LAEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAEp1p4Mtmp : rk(A :: E :: p1 :: p4 :: nil) <= 2) by (solve_hyps_max HAEp1p4eq HAEp1p4M2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: D :: p3 :: nil) (A :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: D :: p3 :: A :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p3 :: A :: E :: p1 :: p4 :: nil) ((A :: D :: p3 :: nil) ++ (A :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: D :: p3 :: nil) (A :: E :: p1 :: p4 :: nil) (A :: nil) 2 2 1 HADp3Mtmp HAEp1p4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

assert(HADEp1p3p4M : rk(A :: D :: E :: p1 :: p3 :: p4 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HADEp1p3p4m : rk(A :: D :: E :: p1 :: p3 :: p4 ::  nil) >= 1) by (solve_hyps_min HADEp1p3p4eq HADEp1p3p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LAEp1p3p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: E :: p1 :: p3 :: p4 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour AEp1p3p4 requis par la preuve de (?)AEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour AEp1p3p4 requis par la preuve de (?)AEp1p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ADEp1p3p4 requis par la preuve de (?)AEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p3p4 requis par la preuve de (?)ABCDEp1p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p3p4m5 : rk(A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p3p4 requis par la preuve de (?)ABCDECpp1p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p3p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p3p4 requis par la preuve de (?)ABCDEApBpp1p3p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p3p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p3p4 requis par la preuve de (?)ACDEp1p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p3p4m2 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p3p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p3p4eq HABCDEApBpp1p3p4m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p3p4mtmp;try rewrite HT2 in HABCDEApBpp1p3p4mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p3p4mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p3p4m3 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p4eq HABCDECpp1p3p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p4mtmp;try rewrite HT2 in HABCDECpp1p3p4mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p3p4mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p3p4m4 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 4).
{
	assert(HBp1eq : rk(B :: p1 :: nil) = 2) by (apply LBp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p3p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p3p4eq HABCDEp1p3p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p3p4mtmp;try rewrite HT2 in HABCDEp1p3p4mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p3p4mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ADEp1p3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour DEp3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADEp1p3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCECp requis par la preuve de (?)ADEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpm2 : rk(A :: B :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpm4 : rk(A :: B :: D :: E :: Cp :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCCpm2 : rk(A :: B :: C :: Cp :: nil) >= 2).
{
	assert(HABDECpMtmp : rk(A :: B :: D :: E :: Cp :: nil) <= 5) by (solve_hyps_max HABDECpeq HABDECpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABDECpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCCpm3 : rk(A :: B :: C :: Cp :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDECpp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp1m3 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCCp requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -1 et 5*)
assert(HBCCpm2 : rk(B :: C :: Cp :: nil) >= 2).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (nil) 5 0 3 HABCDECpp1mtmp Hmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : B :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HBCECpm2 : rk(B :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HBCCpmtmp : rk(B :: C :: Cp :: nil) >= 2) by (solve_hyps_min HBCCpeq HBCCpm2).
	assert(Hincl : incl (B :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (B :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil) (B :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HBCCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -1 et -4*)
assert(HBCECpm3 : rk(B :: C :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (B :: C :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: p1 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (B :: C :: E :: Cp :: nil) (A :: p1 :: nil) (nil) 4 0 1 HABCECpp1mtmp Hmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADEp1p3p4 requis par la preuve de (?)ADEp1p3p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1p3p4m2 : rk(A :: D :: E :: p1 :: p3 :: p4 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1p3p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p4eq HABCDECpp1p3p4m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p3 :: p4 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p4mtmp;try rewrite HT2 in HABCDECpp1p3p4mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: nil) (E :: nil) 5 1 4 HABCDECpp1p3p4mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HADEp1p3p4M5 : rk(A :: D :: E :: p1 :: p3 :: p4 :: nil) <= 5).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HDEp3p4Mtmp : rk(D :: E :: p3 :: p4 :: nil) <= 4) by (solve_hyps_max HDEp3p4eq HDEp3p4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (D :: E :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: p1 :: D :: E :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: D :: E :: p3 :: p4 :: nil) ((A :: p1 :: nil) ++ (D :: E :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (D :: E :: p3 :: p4 :: nil) (nil) 1 4 0 HAp1Mtmp HDEp3p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p3 :: p4 ::  de rang :  4 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p3p4m3 : rk(A :: D :: E :: p1 :: p3 :: p4 :: nil) >= 3).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p3p4mtmp : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) >= 4) by (solve_hyps_min HACDEp1p3p4eq HACDEp1p3p4m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p3 :: p4 :: nil) (C :: p1 :: A :: D :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: p3 :: p4 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p3p4mtmp;try rewrite HT2 in HACDEp1p3p4mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: nil) (p1 :: nil) 4 1 2 HACDEp1p3p4mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour AEp1p3p4 requis par la preuve de (?)AEp1p3p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour Ep3p4 requis par la preuve de (?)AEp1p3p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour AEp1p3p4 requis par la preuve de (?)AEp1p3p4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HAEp1p3p4M4 : rk(A :: E :: p1 :: p3 :: p4 :: nil) <= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HEp3p4Mtmp : rk(E :: p3 :: p4 :: nil) <= 3) by (solve_hyps_max HEp3p4eq HEp3p4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (E :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p3 :: p4 :: nil) (A :: p1 :: E :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: E :: p3 :: p4 :: nil) ((A :: p1 :: nil) ++ (E :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (E :: p3 :: p4 :: nil) (nil) 1 3 0 HAp1Mtmp HEp3p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: D :: E :: p1 :: p3 :: p4 ::  de rang :  3 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : D :: p1 ::   de rang : 2 et 2 *)
assert(HAEp1p3p4m2 : rk(A :: E :: p1 :: p3 :: p4 :: nil) >= 2).
{
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HDp1Mtmp : rk(D :: p1 :: nil) <= 2) by (solve_hyps_max HDp1eq HDp1M2).
	assert(HADEp1p3p4mtmp : rk(A :: D :: E :: p1 :: p3 :: p4 :: nil) >= 3) by (solve_hyps_min HADEp1p3p4eq HADEp1p3p4m3).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (A :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p3 :: p4 :: nil) (D :: p1 :: A :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: A :: E :: p1 :: p3 :: p4 :: nil) ((D :: p1 :: nil) ++ (A :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1p3p4mtmp;try rewrite HT2 in HADEp1p3p4mtmp.
	assert(HT := rule_4 (D :: p1 :: nil) (A :: E :: p1 :: p3 :: p4 :: nil) (p1 :: nil) 3 1 2 HADEp1p3p4mtmp Hp1mtmp HDp1Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 4 et 5*)
assert(HAEp1p3p4M3 : rk(A :: E :: p1 :: p3 :: p4 :: nil) <= 3).
{
	assert(Hp3Mtmp : rk(p3 :: nil) <= 1) by (solve_hyps_max Hp3eq Hp3M1).
	assert(HAEp1p4eq : rk(A :: E :: p1 :: p4 :: nil) = 2) by (apply LAEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAEp1p4Mtmp : rk(A :: E :: p1 :: p4 :: nil) <= 2) by (solve_hyps_max HAEp1p4eq HAEp1p4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p3 :: nil) (A :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p3 :: p4 :: nil) (p3 :: A :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p3 :: A :: E :: p1 :: p4 :: nil) ((p3 :: nil) ++ (A :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p3 :: nil) (A :: E :: p1 :: p4 :: nil) (nil) 1 2 0 Hp3Mtmp HAEp1p4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 3) *)
(* marque des antécédents AUB AiB A: 4 -4 et -4*)
(* ensembles concernés AUB : A :: D :: E :: p1 :: p3 :: p4 ::  de rang :  3 et 3 	 AiB : A :: p3 ::  de rang :  2 et 2 	 A : A :: D :: p3 ::   de rang : 2 et 2 *)
assert(HAEp1p3p4m3 : rk(A :: E :: p1 :: p3 :: p4 :: nil) >= 3).
{
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(HADEp1p3p4eq : rk(A :: D :: E :: p1 :: p3 :: p4 :: nil) = 3) by (apply LADEp1p3p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HADEp1p3p4mtmp : rk(A :: D :: E :: p1 :: p3 :: p4 :: nil) >= 3) by (solve_hyps_min HADEp1p3p4eq HADEp1p3p4m3).
	assert(HAp3mtmp : rk(A :: p3 :: nil) >= 2) by (solve_hyps_min HAp3eq HAp3m2).
	assert(Hincl : incl (A :: p3 :: nil) (list_inter (A :: D :: p3 :: nil) (A :: E :: p1 :: p3 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p3 :: p4 :: nil) (A :: D :: p3 :: A :: E :: p1 :: p3 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p3 :: A :: E :: p1 :: p3 :: p4 :: nil) ((A :: D :: p3 :: nil) ++ (A :: E :: p1 :: p3 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1p3p4mtmp;try rewrite HT2 in HADEp1p3p4mtmp.
	assert(HT := rule_4 (A :: D :: p3 :: nil) (A :: E :: p1 :: p3 :: p4 :: nil) (A :: p3 :: nil) 3 2 2 HADEp1p3p4mtmp HAp3mtmp HADp3Mtmp Hincl); apply HT.
}

assert(HAEp1p3p4M : rk(A :: E :: p1 :: p3 :: p4 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max HAEp1p3p4eq HAEp1p3p4M5).
assert(HAEp1p3p4m : rk(A :: E :: p1 :: p3 :: p4 ::  nil) >= 1) by (solve_hyps_min HAEp1p3p4eq HAEp1p3p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma Lp1p3 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(p1 :: p3 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour p1p3 requis par la preuve de (?)p1p3 pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 4 -2 et 4*)
assert(Hp1p3m2 : rk(p1 :: p3 :: nil) >= 2).
{
	assert(HAEp1p4eq : rk(A :: E :: p1 :: p4 :: nil) = 2) by (apply LAEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAEp1p4Mtmp : rk(A :: E :: p1 :: p4 :: nil) <= 2) by (solve_hyps_max HAEp1p4eq HAEp1p4M2).
	assert(HAEp1p3p4eq : rk(A :: E :: p1 :: p3 :: p4 :: nil) = 3) by (apply LAEp1p3p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAEp1p3p4mtmp : rk(A :: E :: p1 :: p3 :: p4 :: nil) >= 3) by (solve_hyps_min HAEp1p3p4eq HAEp1p3p4m3).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (p1 :: p3 :: nil) (A :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p3 :: p4 :: nil) (p1 :: p3 :: A :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: p3 :: A :: E :: p1 :: p4 :: nil) ((p1 :: p3 :: nil) ++ (A :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HAEp1p3p4mtmp;try rewrite HT2 in HAEp1p3p4mtmp.
	assert(HT := rule_2 (p1 :: p3 :: nil) (A :: E :: p1 :: p4 :: nil) (p1 :: nil) 3 1 2 HAEp1p3p4mtmp Hp1mtmp HAEp1p4Mtmp Hincl);apply HT.
}

assert(Hp1p3M : rk(p1 :: p3 ::  nil) <= 2) (* dim : 5 *) by (solve_hyps_max Hp1p3eq Hp1p3M2).
assert(Hp1p3m : rk(p1 :: p3 ::  nil) >= 1) by (solve_hyps_min Hp1p3eq Hp1p3m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LAp1p3 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: p1 :: p3 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour Ap1p3 requis par la preuve de (?)Ap1p3 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour Ap1p3 requis par la preuve de (?)Ap1p3 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 -2 et 5*)
assert(HAp1p3M2 : rk(A :: p1 :: p3 :: nil) <= 2).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hp3Mtmp : rk(p3 :: nil) <= 1) by (solve_hyps_max Hp3eq Hp3M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p3 :: nil) (A :: p1 :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: p3 :: nil) ((A :: p1 :: nil) ++ (p3 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (p3 :: nil) (nil) 1 1 0 HAp1Mtmp Hp3Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HAp1p3m2 : rk(A :: p1 :: p3 :: nil) >= 2).
{
	assert(HAp3mtmp : rk(A :: p3 :: nil) >= 2) by (solve_hyps_min HAp3eq HAp3m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p3 :: nil) (A :: p1 :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p3 :: nil) (A :: p1 :: p3 :: nil) 2 2 HAp3mtmp Hcomp Hincl);apply HT.
}

assert(HAp1p3M : rk(A :: p1 :: p3 ::  nil) <= 3) (* dim : 5 *) by (solve_hyps_max HAp1p3eq HAp1p3M3).
assert(HAp1p3m : rk(A :: p1 :: p3 ::  nil) >= 1) by (solve_hyps_min HAp1p3eq HAp1p3m1).
intuition.
Qed.

(* dans constructLemma(), requis par Lp1p2p3 *)
(* dans la couche 0 *)
Lemma LAp1p2p3 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: p1 :: p2 :: p3 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour Ap1p2p3 requis par la preuve de (?)Ap1p2p3 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour Ap1p3 requis par la preuve de (?)Ap1p2p3 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour Ap1p3 requis par la preuve de (?)Ap1p3 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 -2 et 5*)
assert(HAp1p3M2 : rk(A :: p1 :: p3 :: nil) <= 2).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hp3Mtmp : rk(p3 :: nil) <= 1) by (solve_hyps_max Hp3eq Hp3M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p3 :: nil) (A :: p1 :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: p3 :: nil) ((A :: p1 :: nil) ++ (p3 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (p3 :: nil) (nil) 1 1 0 HAp1Mtmp Hp3Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour Ap1p2p3 requis par la preuve de (?)Ap1p2p3 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour p2p3 requis par la preuve de (?)Ap1p2p3 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour Ap1p2p3 requis par la preuve de (?)Ap1p2p3 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HAp1p2p3M3 : rk(A :: p1 :: p2 :: p3 :: nil) <= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hp2p3Mtmp : rk(p2 :: p3 :: nil) <= 2) by (solve_hyps_max Hp2p3eq Hp2p3M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (p2 :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p3 :: nil) (A :: p1 :: p2 :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: p2 :: p3 :: nil) ((A :: p1 :: nil) ++ (p2 :: p3 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (p2 :: p3 :: nil) (nil) 1 2 0 HAp1Mtmp Hp2p3Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HAp1p2p3M2 : rk(A :: p1 :: p2 :: p3 :: nil) <= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HAp1p3Mtmp : rk(A :: p1 :: p3 :: nil) <= 2) by (solve_hyps_max HAp1p3eq HAp1p3M2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p2 :: nil) (A :: p1 :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p3 :: nil) (A :: p2 :: A :: p1 :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: A :: p1 :: p3 :: nil) ((A :: p2 :: nil) ++ (A :: p1 :: p3 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (A :: p1 :: p3 :: nil) (A :: nil) 1 2 1 HAp2Mtmp HAp1p3Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HAp1p2p3m2 : rk(A :: p1 :: p2 :: p3 :: nil) >= 2).
{
	assert(HAp3mtmp : rk(A :: p3 :: nil) >= 2) by (solve_hyps_min HAp3eq HAp3m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p3 :: nil) (A :: p1 :: p2 :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p3 :: nil) (A :: p1 :: p2 :: p3 :: nil) 2 2 HAp3mtmp Hcomp Hincl);apply HT.
}

assert(HAp1p2p3M : rk(A :: p1 :: p2 :: p3 ::  nil) <= 4) (* dim : 5 *) by (solve_hyps_max HAp1p2p3eq HAp1p2p3M4).
assert(HAp1p2p3m : rk(A :: p1 :: p2 :: p3 ::  nil) >= 1) by (solve_hyps_min HAp1p2p3eq HAp1p2p3m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma Lp1p2p3 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(p1 :: p2 :: p3 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour p1p2p3 requis par la preuve de (?)p1p2p3 pour la règle 6  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour p1p2p3 requis par la preuve de (?)p1p2p3 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 4 4 et 4*)
(* ensembles concernés AUB : A :: p1 :: p2 :: p3 ::  de rang :  2 et 2 	 AiB : p1 :: p3 ::  de rang :  2 et 2 	 A : A :: p1 :: p3 ::   de rang : 2 et 2 *)
assert(Hp1p2p3m2 : rk(p1 :: p2 :: p3 :: nil) >= 2).
{
	assert(HAp1p3eq : rk(A :: p1 :: p3 :: nil) = 2) by (apply LAp1p3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAp1p3Mtmp : rk(A :: p1 :: p3 :: nil) <= 2) by (solve_hyps_max HAp1p3eq HAp1p3M2).
	assert(HAp1p2p3eq : rk(A :: p1 :: p2 :: p3 :: nil) = 2) by (apply LAp1p2p3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAp1p2p3mtmp : rk(A :: p1 :: p2 :: p3 :: nil) >= 2) by (solve_hyps_min HAp1p2p3eq HAp1p2p3m2).
	assert(Hp1p3eq : rk(p1 :: p3 :: nil) = 2) by (apply Lp1p3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(Hp1p3mtmp : rk(p1 :: p3 :: nil) >= 2) by (solve_hyps_min Hp1p3eq Hp1p3m2).
	assert(Hincl : incl (p1 :: p3 :: nil) (list_inter (A :: p1 :: p3 :: nil) (p1 :: p2 :: p3 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p3 :: nil) (A :: p1 :: p3 :: p1 :: p2 :: p3 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: p3 :: p1 :: p2 :: p3 :: nil) ((A :: p1 :: p3 :: nil) ++ (p1 :: p2 :: p3 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HAp1p2p3mtmp;try rewrite HT2 in HAp1p2p3mtmp.
	assert(HT := rule_4 (A :: p1 :: p3 :: nil) (p1 :: p2 :: p3 :: nil) (p1 :: p3 :: nil) 2 2 2 HAp1p2p3mtmp Hp1p3mtmp HAp1p3Mtmp Hincl); apply HT.
}

(* Application de la règle 6 (code, 3 ou 4 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(Hp1p2p3M2 : rk(p1 :: p2 :: p3 :: nil) <= 2).
{
	assert(HAp1p2p3eq : rk(A :: p1 :: p2 :: p3 :: nil) = 2) by (apply LAp1p2p3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAp1p2p3Mtmp : rk(A :: p1 :: p2 :: p3 :: nil) <= 2) by (solve_hyps_max HAp1p2p3eq HAp1p2p3M2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (p1 :: p2 :: p3 :: nil) (A :: p1 :: p2 :: p3 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_6 (p1 :: p2 :: p3 :: nil) (A :: p1 :: p2 :: p3 :: nil) 2 2 HAp1p2p3Mtmp Hcomp Hincl);apply HT.
}

assert(Hp1p2p3M : rk(p1 :: p2 :: p3 ::  nil) <= 3) (* dim : 5 *) by (solve_hyps_max Hp1p2p3eq Hp1p2p3M3).
assert(Hp1p2p3m : rk(p1 :: p2 :: p3 ::  nil) >= 1) by (solve_hyps_min Hp1p2p3eq Hp1p2p3m1).
intuition.
Qed.

(* dans constructLemma(), requis par LABCp4 *)
(* dans la couche 0 *)
Lemma LABCEp4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: E :: p4 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp4 requis par la preuve de (?)ABCEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ABCEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ABCDEApp4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp4m5 : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCEp4 requis par la preuve de (?)ABCEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp4 requis par la preuve de (?)ABCEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp4 requis par la preuve de (?)ABCEp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp4 requis par la preuve de (?)ABEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp4 requis par la preuve de (?)ABEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp4M3 : rk(A :: B :: E :: p4 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p4 :: nil) (B :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: E :: p4 :: nil) ((B :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HBMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABEp4m2 : rk(A :: B :: E :: p4 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: E :: p4 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp4 requis par la preuve de (?)ABCEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp4M4 : rk(A :: B :: C :: E :: p4 :: nil) <= 4).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABEp4Mtmp : rk(A :: B :: E :: p4 :: nil) <= 3) by (solve_hyps_max HABEp4eq HABEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p4 :: nil) (C :: A :: B :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: E :: p4 :: nil) ((C :: nil) ++ (A :: B :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: E :: p4 :: nil) (nil) 1 3 0 HCMtmp HABEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCEp4m2 : rk(A :: B :: C :: E :: p4 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: E :: p4 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp4m3 : rk(A :: B :: C :: E :: p4 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp4mtmp : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApp4eq HABCDEApp4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p4 :: nil) (D :: Ap :: A :: B :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p4 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp4mtmp;try rewrite HT2 in HABCDEApp4mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p4 :: nil) (nil) 5 0 2 HABCDEApp4mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p4 ::  de rang :  5 et 5 	 AiB : A ::  de rang :  1 et 1 	 A : A :: D :: p1 ::   de rang : 2 et 2 *)
assert(HABCEp4m4 : rk(A :: B :: C :: E :: p4 :: nil) >= 4).
{
	assert(HADp1eq : rk(A :: D :: p1 :: nil) = 2) by (apply LADp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(HABCDEp1p4eq : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) = 5) by (apply LABCDEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCDEp1p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p4eq HABCDEp1p4m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: D :: p1 :: nil) (A :: B :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p4 :: nil) (A :: D :: p1 :: A :: B :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p1 :: A :: B :: C :: E :: p4 :: nil) ((A :: D :: p1 :: nil) ++ (A :: B :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p4mtmp;try rewrite HT2 in HABCDEp1p4mtmp.
	assert(HT := rule_4 (A :: D :: p1 :: nil) (A :: B :: C :: E :: p4 :: nil) (A :: nil) 5 1 2 HABCDEp1p4mtmp HAmtmp HADp1Mtmp Hincl); apply HT.
}

assert(HABCEp4M : rk(A :: B :: C :: E :: p4 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max HABCEp4eq HABCEp4M5).
assert(HABCEp4m : rk(A :: B :: C :: E :: p4 ::  nil) >= 1) by (solve_hyps_min HABCEp4eq HABCEp4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LABCp4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: p4 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCp4 requis par la preuve de (?)ABCp4 pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 4 pour ABCEp1p4 requis par la preuve de (?)ABCp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1p4 requis par la preuve de (?)ABCEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp4 requis par la preuve de (?)ABCEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ABCEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ABCDEApp4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp4m5 : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCEp4 requis par la preuve de (?)ABCEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp4 requis par la preuve de (?)ABCEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp4 requis par la preuve de (?)ABCEp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp4 requis par la preuve de (?)ABEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp4 requis par la preuve de (?)ABEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp4M3 : rk(A :: B :: E :: p4 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p4 :: nil) (B :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: E :: p4 :: nil) ((B :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HBMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABEp4m2 : rk(A :: B :: E :: p4 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: E :: p4 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp4 requis par la preuve de (?)ABCEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp4M4 : rk(A :: B :: C :: E :: p4 :: nil) <= 4).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABEp4Mtmp : rk(A :: B :: E :: p4 :: nil) <= 3) by (solve_hyps_max HABEp4eq HABEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p4 :: nil) (C :: A :: B :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: E :: p4 :: nil) ((C :: nil) ++ (A :: B :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: E :: p4 :: nil) (nil) 1 3 0 HCMtmp HABEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCEp4m2 : rk(A :: B :: C :: E :: p4 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: E :: p4 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp4m3 : rk(A :: B :: C :: E :: p4 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp4mtmp : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApp4eq HABCDEApp4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p4 :: nil) (D :: Ap :: A :: B :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p4 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp4mtmp;try rewrite HT2 in HABCDEApp4mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p4 :: nil) (nil) 5 0 2 HABCDEApp4mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEp1p4 requis par la preuve de (?)ABCEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEp1p4 requis par la preuve de (?)ABCEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p4 requis par la preuve de (?)ABCEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p4 requis par la preuve de (?)ABCDECpp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEp1p4 requis par la preuve de (?)ABCEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p4 requis par la preuve de (?)ABCEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p4 requis par la preuve de (?)ABCDEApBpp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEp1p4 requis par la preuve de (?)ABCEp1p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCEp1p4m2 : rk(A :: B :: C :: E :: p1 :: p4 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpp1p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p4eq HABCDEApBpp1p4m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: p1 :: p4 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p4mtmp;try rewrite HT2 in HABCDEApBpp1p4mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: p1 :: p4 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpp1p4mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCEp1p4m3 : rk(A :: B :: C :: E :: p1 :: p4 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p4eq HABCDECpp1p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) (D :: Cp :: A :: B :: C :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: p1 :: p4 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p4mtmp;try rewrite HT2 in HABCDECpp1p4mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: p1 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p4mtmp Hmtmp HDCpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1p4M5 : rk(A :: B :: C :: E :: p1 :: p4 :: nil) <= 5).
{
	assert(Hp1Mtmp : rk(p1 :: nil) <= 1) by (solve_hyps_max Hp1eq Hp1M1).
	assert(HABCEp4Mtmp : rk(A :: B :: C :: E :: p4 :: nil) <= 4) by (solve_hyps_max HABCEp4eq HABCEp4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: nil) (A :: B :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: p4 :: nil) (p1 :: A :: B :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: A :: B :: C :: E :: p4 :: nil) ((p1 :: nil) ++ (A :: B :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: nil) (A :: B :: C :: E :: p4 :: nil) (nil) 1 4 0 Hp1Mtmp HABCEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HABCEp1p4M4 : rk(A :: B :: C :: E :: p1 :: p4 :: nil) <= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEp4Mtmp : rk(A :: B :: C :: E :: p4 :: nil) <= 4) by (solve_hyps_max HABCEp4eq HABCEp4M4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p1 :: nil) (A :: B :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: p4 :: nil) (A :: p1 :: A :: B :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: A :: B :: C :: E :: p4 :: nil) ((A :: p1 :: nil) ++ (A :: B :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (A :: B :: C :: E :: p4 :: nil) (A :: nil) 1 4 1 HAp1Mtmp HABCEp4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p4 ::  de rang :  5 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : D :: p1 ::   de rang : 2 et 2 *)
assert(HABCEp1p4m4 : rk(A :: B :: C :: E :: p1 :: p4 :: nil) >= 4).
{
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HDp1Mtmp : rk(D :: p1 :: nil) <= 2) by (solve_hyps_max HDp1eq HDp1M2).
	assert(HABCDEp1p4eq : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) = 5) by (apply LABCDEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCDEp1p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p4eq HABCDEp1p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (A :: B :: C :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p4 :: nil) (D :: p1 :: A :: B :: C :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: A :: B :: C :: E :: p1 :: p4 :: nil) ((D :: p1 :: nil) ++ (A :: B :: C :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p4mtmp;try rewrite HT2 in HABCDEp1p4mtmp.
	assert(HT := rule_4 (D :: p1 :: nil) (A :: B :: C :: E :: p1 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p4mtmp Hp1mtmp HDp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCp4 requis par la preuve de (?)ABCp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp4 requis par la preuve de (?)ABCp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp4 requis par la preuve de (?)ABCECpp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp4 requis par la preuve de (?)ABCDECpp4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp4m5 : rk(A :: B :: C :: D :: E :: Cp :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCECpp4 requis par la preuve de (?)ABCECpp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCECpp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpm2 : rk(A :: B :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpm4 : rk(A :: B :: D :: E :: Cp :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCCpm2 : rk(A :: B :: C :: Cp :: nil) >= 2).
{
	assert(HABDECpMtmp : rk(A :: B :: D :: E :: Cp :: nil) <= 5) by (solve_hyps_max HABDECpeq HABDECpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABDECpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCCpm3 : rk(A :: B :: C :: Cp :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDECpp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp4 requis par la preuve de (?)ABCECpp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp4 requis par la preuve de (?)ABCECpp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp4 requis par la preuve de (?)ABCECpp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp4 requis par la preuve de (?)ABCDEApBpCpp4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp4 requis par la preuve de (?)ABCECpp4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p4 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp4m2 : rk(A :: B :: C :: E :: Cp :: p4 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp4eq HABCDEApBpCpp4m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p4 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p4 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp4mtmp;try rewrite HT2 in HABCDEApBpCpp4mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p4 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp4mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp4M5 : rk(A :: B :: C :: E :: Cp :: p4 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp4Mtmp : rk(A :: B :: C :: E :: p4 :: nil) <= 4) by (solve_hyps_max HABCEp4eq HABCEp4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p4 :: nil) (Cp :: A :: B :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p4 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p4 :: nil) (nil) 1 4 0 HCpMtmp HABCEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp4m3 : rk(A :: B :: C :: E :: Cp :: p4 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p4 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p4 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp4m4 : rk(A :: B :: C :: E :: Cp :: p4 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp4eq HABCDECpp4m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p4 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p4 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp4mtmp;try rewrite HT2 in HABCDECpp4mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p4 :: nil) (Cp :: nil) 5 1 2 HABCDECpp4mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECp requis par la preuve de (?)ABCp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpp1m2 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDECpp1M5 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpp1m4 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABECpp1M4 : rk(A :: B :: E :: Cp :: p1 :: nil) <= 4).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HCpMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABECpp1m2 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) 2 2 HABCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Cp :: p1 ::  de rang :  4 et 5 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABECpp1m3 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABDECpp1mtmp : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABDECpp1eq HABDECpp1m4).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDECpp1mtmp;try rewrite HT2 in HABDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) (Cp :: nil) 4 1 2 HABDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: B :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HABECpm2 : rk(A :: B :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: B :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABECpm3 : rk(A :: B :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABECpp1mtmp : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HABECpp1eq HABECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABECpp1mtmp;try rewrite HT2 in HABECpp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Cp :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABECpp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp4 requis par la preuve de (?)ABCp4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Cp :: p4 ::  de rang :  4 et 5 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABCp4m2 : rk(A :: B :: C :: p4 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCECpp4mtmp : rk(A :: B :: C :: E :: Cp :: p4 :: nil) >= 4) by (solve_hyps_min HABCECpp4eq HABCECpp4m4).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: B :: C :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p4 :: nil) (A :: B :: E :: Cp :: A :: B :: C :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: B :: C :: p4 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: B :: C :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp4mtmp;try rewrite HT2 in HABCECpp4mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (A :: B :: C :: p4 :: nil) (A :: B :: nil) 4 2 4 HABCECpp4mtmp HABmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: E :: p1 :: p4 ::  de rang :  4 et 4 	 AiB : A ::  de rang :  1 et 1 	 A : A :: E :: p1 ::   de rang : 2 et 2 *)
assert(HABCp4m3 : rk(A :: B :: C :: p4 :: nil) >= 3).
{
	assert(HAEp1eq : rk(A :: E :: p1 :: nil) = 2) by (apply LAEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABCEp1p4mtmp : rk(A :: B :: C :: E :: p1 :: p4 :: nil) >= 4) by (solve_hyps_min HABCEp1p4eq HABCEp1p4m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: E :: p1 :: nil) (A :: B :: C :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: p4 :: nil) (A :: E :: p1 :: A :: B :: C :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: E :: p1 :: A :: B :: C :: p4 :: nil) ((A :: E :: p1 :: nil) ++ (A :: B :: C :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEp1p4mtmp;try rewrite HT2 in HABCEp1p4mtmp.
	assert(HT := rule_4 (A :: E :: p1 :: nil) (A :: B :: C :: p4 :: nil) (A :: nil) 4 1 2 HABCEp1p4mtmp HAmtmp HAEp1Mtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 4 -4 et -4*)
assert(HABCp4m4 : rk(A :: B :: C :: p4 :: nil) >= 4).
{
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(HABCEp4eq : rk(A :: B :: C :: E :: p4 :: nil) = 4) by (apply LABCEp4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCEp4mtmp : rk(A :: B :: C :: E :: p4 :: nil) >= 4) by (solve_hyps_min HABCEp4eq HABCEp4m4).
	assert(HAp4mtmp : rk(A :: p4 :: nil) >= 2) by (solve_hyps_min HAp4eq HAp4m2).
	assert(Hincl : incl (A :: p4 :: nil) (list_inter (A :: B :: C :: p4 :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p4 :: nil) (A :: B :: C :: p4 :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: p4 :: A :: E :: p4 :: nil) ((A :: B :: C :: p4 :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEp4mtmp;try rewrite HT2 in HABCEp4mtmp.
	assert(HT := rule_2 (A :: B :: C :: p4 :: nil) (A :: E :: p4 :: nil) (A :: p4 :: nil) 4 2 2 HABCEp4mtmp HAp4mtmp HAEp4Mtmp Hincl);apply HT.
}

assert(HABCp4M : rk(A :: B :: C :: p4 ::  nil) <= 4) (* dim : 5 *) by (solve_hyps_max HABCp4eq HABCp4M4).
assert(HABCp4m : rk(A :: B :: C :: p4 ::  nil) >= 1) by (solve_hyps_min HABCp4eq HABCp4m1).
intuition.
Qed.

(* dans constructLemma(), requis par Lp1p4 *)
(* dans la couche 0 *)
Lemma LABCp1p4p5 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: p1 :: p4 :: p5 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCp1p4p5 requis par la preuve de (?)ABCp1p4p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 3 pour ABCp1p5 requis par la preuve de (?)ABCp1p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp1p5 requis par la preuve de (?)ABCp1p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCp1p5 requis par la preuve de (?)ABCp1p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp5 requis par la preuve de (?)ABCp1p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp5 requis par la preuve de (?)ABCp5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp5 requis par la preuve de (?)ABCp5 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp5M3 : rk(A :: B :: C :: p5 :: nil) <= 3).
{
	assert(HAMtmp : rk(A :: nil) <= 1) by (solve_hyps_max HAeq HAM1).
	assert(HBCp5Mtmp : rk(B :: C :: p5 :: nil) <= 2) by (solve_hyps_max HBCp5eq HBCp5M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: nil) (B :: C :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p5 :: nil) (A :: B :: C :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: p5 :: nil) ((A :: nil) ++ (B :: C :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: nil) (B :: C :: p5 :: nil) (nil) 1 2 0 HAMtmp HBCp5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp5m2 : rk(A :: B :: C :: p5 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p5 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCp1p5 requis par la preuve de (?)ABCp1p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCECpp1p5 requis par la preuve de (?)ABCp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p5 requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p5 requis par la preuve de (?)ABCDECpp1p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCECpp1p5 requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCECpp1p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpm2 : rk(A :: B :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpm4 : rk(A :: B :: D :: E :: Cp :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCCpm2 : rk(A :: B :: C :: Cp :: nil) >= 2).
{
	assert(HABDECpMtmp : rk(A :: B :: D :: E :: Cp :: nil) <= 5) by (solve_hyps_max HABDECpeq HABDECpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABDECpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCCpm3 : rk(A :: B :: C :: Cp :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDECpp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1p5 requis par la preuve de (?)ABCECpp1p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1p5 requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1p5 requis par la preuve de (?)ABCDEApBpCpp1p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1p5 requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1p5m2 : rk(A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp1p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1p5eq HABCDEApBpCpp1p5m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1p5mtmp;try rewrite HT2 in HABCDEApBpCpp1p5mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1p5mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp1p5m3 : rk(A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p5 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1p5m4 : rk(A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p5eq HABCDECpp1p5m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p5 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p5mtmp;try rewrite HT2 in HABCDECpp1p5mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1p5mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECp requis par la preuve de (?)ABCp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpp1m2 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDECpp1M5 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpp1m4 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABECpp1M4 : rk(A :: B :: E :: Cp :: p1 :: nil) <= 4).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HCpMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABECpp1m2 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) 2 2 HABCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Cp :: p1 ::  de rang :  4 et 5 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABECpp1m3 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABDECpp1mtmp : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABDECpp1eq HABDECpp1m4).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDECpp1mtmp;try rewrite HT2 in HABDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) (Cp :: nil) 4 1 2 HABDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: B :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HABECpm2 : rk(A :: B :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: B :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABECpm3 : rk(A :: B :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABECpp1mtmp : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HABECpp1eq HABECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABECpp1mtmp;try rewrite HT2 in HABECpp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Cp :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABECpp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCp1p5 requis par la preuve de (?)ABCp1p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Cp :: p1 :: p5 ::  de rang :  4 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABCp1p5m2 : rk(A :: B :: C :: p1 :: p5 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCECpp1p5mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) >= 4) by (solve_hyps_min HABCECpp1p5eq HABCECpp1p5m4).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p5 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: B :: C :: p1 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1p5mtmp;try rewrite HT2 in HABCECpp1p5mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p5 :: nil) (A :: B :: nil) 4 2 4 HABCECpp1p5mtmp HABmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCp1p5M4 : rk(A :: B :: C :: p1 :: p5 :: nil) <= 4).
{
	assert(Hp1Mtmp : rk(p1 :: nil) <= 1) by (solve_hyps_max Hp1eq Hp1M1).
	assert(HABCp5Mtmp : rk(A :: B :: C :: p5 :: nil) <= 3) by (solve_hyps_max HABCp5eq HABCp5M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: nil) (A :: B :: C :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p5 :: nil) (p1 :: A :: B :: C :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: A :: B :: C :: p5 :: nil) ((p1 :: nil) ++ (A :: B :: C :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: nil) (A :: B :: C :: p5 :: nil) (nil) 1 3 0 Hp1Mtmp HABCp5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 -4 et 5*)
assert(HABCp1p5M3 : rk(A :: B :: C :: p1 :: p5 :: nil) <= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HBCp5Mtmp : rk(B :: C :: p5 :: nil) <= 2) by (solve_hyps_max HBCp5eq HBCp5M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (B :: C :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p5 :: nil) (A :: p1 :: B :: C :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: p5 :: nil) ((A :: p1 :: nil) ++ (B :: C :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (B :: C :: p5 :: nil) (nil) 1 2 0 HAp1Mtmp HBCp5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp1p5m3 : rk(A :: B :: C :: p1 :: p5 :: nil) >= 3).
{
	assert(HBCp1eq : rk(B :: C :: p1 :: nil) = 3) by (apply LBCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1mtmp : rk(B :: C :: p1 :: nil) >= 3) by (solve_hyps_min HBCp1eq HBCp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p5 :: nil) 3 3 HBCp1mtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCp1p4p5 requis par la preuve de (?)ABCp1p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCp1p4p5 requis par la preuve de (?)ABCp1p4p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCp4p5 requis par la preuve de (?)ABCp1p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCp1p4p5 requis par la preuve de (?)ABCp1p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCECpp1p4p5 requis par la preuve de (?)ABCp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p4p5 requis par la preuve de (?)ABCECpp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p4p5 requis par la preuve de (?)ABCDECpp1p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p4p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCECpp1p4p5 requis par la preuve de (?)ABCECpp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1p4p5 requis par la preuve de (?)ABCECpp1p4p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1p4p5 requis par la preuve de (?)ABCECpp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1p4p5 requis par la preuve de (?)ABCDEApBpCpp1p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1p4p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1p4p5 requis par la preuve de (?)ABCECpp1p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1p4p5m2 : rk(A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp1p4p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1p4p5eq HABCDEApBpCpp1p4p5m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p4 :: p5 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1p4p5mtmp;try rewrite HT2 in HABCDEApBpCpp1p4p5mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1p4p5mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp1p4p5m3 : rk(A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1p4p5m4 : rk(A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p4p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p4p5eq HABCDECpp1p4p5m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: p5 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p4p5mtmp;try rewrite HT2 in HABCDECpp1p4p5mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1p4p5mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCp1p4p5 requis par la preuve de (?)ABCp1p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 ::  de rang :  4 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABCp1p4p5m2 : rk(A :: B :: C :: p1 :: p4 :: p5 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCECpp1p4p5mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil) >= 4) by (solve_hyps_min HABCECpp1p4p5eq HABCECpp1p4p5m4).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: p4 :: p5 :: nil) (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p4 :: p5 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: B :: C :: p1 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1p4p5mtmp;try rewrite HT2 in HABCECpp1p4p5mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p4 :: p5 :: nil) (A :: B :: nil) 4 2 4 HABCECpp1p4p5mtmp HABmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HABCp1p4p5M5 : rk(A :: B :: C :: p1 :: p4 :: p5 :: nil) <= 5).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HBCp4p5Mtmp : rk(B :: C :: p4 :: p5 :: nil) <= 4) by (solve_hyps_max HBCp4p5eq HBCp4p5M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (B :: C :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p4 :: p5 :: nil) (A :: p1 :: B :: C :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: p4 :: p5 :: nil) ((A :: p1 :: nil) ++ (B :: C :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (B :: C :: p4 :: p5 :: nil) (nil) 1 4 0 HAp1Mtmp HBCp4p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp1p4p5m3 : rk(A :: B :: C :: p1 :: p4 :: p5 :: nil) >= 3).
{
	assert(HBCp1eq : rk(B :: C :: p1 :: nil) = 3) by (apply LBCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1mtmp : rk(B :: C :: p1 :: nil) >= 3) by (solve_hyps_min HBCp1eq HBCp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p4 :: p5 :: nil) 3 3 HBCp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCp1p4p5M4 : rk(A :: B :: C :: p1 :: p4 :: p5 :: nil) <= 4).
{
	assert(Hp4Mtmp : rk(p4 :: nil) <= 1) by (solve_hyps_max Hp4eq Hp4M1).
	assert(HABCp1p5Mtmp : rk(A :: B :: C :: p1 :: p5 :: nil) <= 3) by (solve_hyps_max HABCp1p5eq HABCp1p5M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p4 :: nil) (A :: B :: C :: p1 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p4 :: p5 :: nil) (p4 :: A :: B :: C :: p1 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p4 :: A :: B :: C :: p1 :: p5 :: nil) ((p4 :: nil) ++ (A :: B :: C :: p1 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p4 :: nil) (A :: B :: C :: p1 :: p5 :: nil) (nil) 1 3 0 Hp4Mtmp HABCp1p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp1p4p5m4 : rk(A :: B :: C :: p1 :: p4 :: p5 :: nil) >= 4).
{
	assert(HABCp4eq : rk(A :: B :: C :: p4 :: nil) = 4) by (apply LABCp4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCp4mtmp : rk(A :: B :: C :: p4 :: nil) >= 4) by (solve_hyps_min HABCp4eq HABCp4m4).
	assert(Hcomp : 4 <= 4) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: p4 :: nil) (A :: B :: C :: p1 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: p4 :: nil) (A :: B :: C :: p1 :: p4 :: p5 :: nil) 4 4 HABCp4mtmp Hcomp Hincl);apply HT.
}

assert(HABCp1p4p5M : rk(A :: B :: C :: p1 :: p4 :: p5 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HABCp1p4p5m : rk(A :: B :: C :: p1 :: p4 :: p5 ::  nil) >= 1) by (solve_hyps_min HABCp1p4p5eq HABCp1p4p5m1).
intuition.
Qed.

(* dans constructLemma(), requis par Lp1p4 *)
(* dans la couche 0 *)
Lemma LABCp1p5 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: p1 :: p5 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp1p5 requis par la preuve de (?)ABCp1p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCp1p5 requis par la preuve de (?)ABCp1p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp5 requis par la preuve de (?)ABCp1p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp5 requis par la preuve de (?)ABCp5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp5 requis par la preuve de (?)ABCp5 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp5M3 : rk(A :: B :: C :: p5 :: nil) <= 3).
{
	assert(HAMtmp : rk(A :: nil) <= 1) by (solve_hyps_max HAeq HAM1).
	assert(HBCp5Mtmp : rk(B :: C :: p5 :: nil) <= 2) by (solve_hyps_max HBCp5eq HBCp5M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: nil) (B :: C :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p5 :: nil) (A :: B :: C :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: p5 :: nil) ((A :: nil) ++ (B :: C :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: nil) (B :: C :: p5 :: nil) (nil) 1 2 0 HAMtmp HBCp5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp5m2 : rk(A :: B :: C :: p5 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p5 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCp1p5 requis par la preuve de (?)ABCp1p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCECpp1p5 requis par la preuve de (?)ABCp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p5 requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p5 requis par la preuve de (?)ABCDECpp1p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCECpp1p5 requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCECpp1p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpm2 : rk(A :: B :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpm4 : rk(A :: B :: D :: E :: Cp :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCCpm2 : rk(A :: B :: C :: Cp :: nil) >= 2).
{
	assert(HABDECpMtmp : rk(A :: B :: D :: E :: Cp :: nil) <= 5) by (solve_hyps_max HABDECpeq HABDECpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABDECpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCCpm3 : rk(A :: B :: C :: Cp :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDECpp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1p5 requis par la preuve de (?)ABCECpp1p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1p5 requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1p5 requis par la preuve de (?)ABCDEApBpCpp1p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1p5 requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1p5m2 : rk(A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp1p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1p5eq HABCDEApBpCpp1p5m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1p5mtmp;try rewrite HT2 in HABCDEApBpCpp1p5mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1p5mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp1p5m3 : rk(A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p5 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1p5m4 : rk(A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p5eq HABCDECpp1p5m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p5 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p5mtmp;try rewrite HT2 in HABCDECpp1p5mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1p5mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECp requis par la preuve de (?)ABCp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpp1m2 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDECpp1M5 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpp1m4 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABECpp1M4 : rk(A :: B :: E :: Cp :: p1 :: nil) <= 4).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HCpMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABECpp1m2 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) 2 2 HABCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Cp :: p1 ::  de rang :  4 et 5 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABECpp1m3 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABDECpp1mtmp : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABDECpp1eq HABDECpp1m4).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDECpp1mtmp;try rewrite HT2 in HABDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) (Cp :: nil) 4 1 2 HABDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: B :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HABECpm2 : rk(A :: B :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: B :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABECpm3 : rk(A :: B :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABECpp1mtmp : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HABECpp1eq HABECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABECpp1mtmp;try rewrite HT2 in HABECpp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Cp :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABECpp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCp1p5 requis par la preuve de (?)ABCp1p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Cp :: p1 :: p5 ::  de rang :  4 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABCp1p5m2 : rk(A :: B :: C :: p1 :: p5 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCECpp1p5mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) >= 4) by (solve_hyps_min HABCECpp1p5eq HABCECpp1p5m4).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p5 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: B :: C :: p1 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1p5mtmp;try rewrite HT2 in HABCECpp1p5mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p5 :: nil) (A :: B :: nil) 4 2 4 HABCECpp1p5mtmp HABmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCp1p5M4 : rk(A :: B :: C :: p1 :: p5 :: nil) <= 4).
{
	assert(Hp1Mtmp : rk(p1 :: nil) <= 1) by (solve_hyps_max Hp1eq Hp1M1).
	assert(HABCp5Mtmp : rk(A :: B :: C :: p5 :: nil) <= 3) by (solve_hyps_max HABCp5eq HABCp5M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: nil) (A :: B :: C :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p5 :: nil) (p1 :: A :: B :: C :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: A :: B :: C :: p5 :: nil) ((p1 :: nil) ++ (A :: B :: C :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: nil) (A :: B :: C :: p5 :: nil) (nil) 1 3 0 Hp1Mtmp HABCp5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 -4 et 5*)
assert(HABCp1p5M3 : rk(A :: B :: C :: p1 :: p5 :: nil) <= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HBCp5Mtmp : rk(B :: C :: p5 :: nil) <= 2) by (solve_hyps_max HBCp5eq HBCp5M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (B :: C :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p5 :: nil) (A :: p1 :: B :: C :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: p5 :: nil) ((A :: p1 :: nil) ++ (B :: C :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (B :: C :: p5 :: nil) (nil) 1 2 0 HAp1Mtmp HBCp5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp1p5m3 : rk(A :: B :: C :: p1 :: p5 :: nil) >= 3).
{
	assert(HBCp1eq : rk(B :: C :: p1 :: nil) = 3) by (apply LBCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1mtmp : rk(B :: C :: p1 :: nil) >= 3) by (solve_hyps_min HBCp1eq HBCp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p5 :: nil) 3 3 HBCp1mtmp Hcomp Hincl);apply HT.
}

assert(HABCp1p5M : rk(A :: B :: C :: p1 :: p5 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max HABCp1p5eq HABCp1p5M5).
assert(HABCp1p5m : rk(A :: B :: C :: p1 :: p5 ::  nil) >= 1) by (solve_hyps_min HABCp1p5eq HABCp1p5m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma Lp1p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(p1 :: p4 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour p1p4 requis par la preuve de (?)p1p4 pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 4 -2 et 4*)
assert(Hp1p4m2 : rk(p1 :: p4 :: nil) >= 2).
{
	assert(HABCp1p5eq : rk(A :: B :: C :: p1 :: p5 :: nil) = 3) by (apply LABCp1p5 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCp1p5Mtmp : rk(A :: B :: C :: p1 :: p5 :: nil) <= 3) by (solve_hyps_max HABCp1p5eq HABCp1p5M3).
	assert(HABCp1p4p5eq : rk(A :: B :: C :: p1 :: p4 :: p5 :: nil) = 4) by (apply LABCp1p4p5 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCp1p4p5mtmp : rk(A :: B :: C :: p1 :: p4 :: p5 :: nil) >= 4) by (solve_hyps_min HABCp1p4p5eq HABCp1p4p5m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (p1 :: p4 :: nil) (A :: B :: C :: p1 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p4 :: p5 :: nil) (p1 :: p4 :: A :: B :: C :: p1 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: p4 :: A :: B :: C :: p1 :: p5 :: nil) ((p1 :: p4 :: nil) ++ (A :: B :: C :: p1 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp1p4p5mtmp;try rewrite HT2 in HABCp1p4p5mtmp.
	assert(HT := rule_2 (p1 :: p4 :: nil) (A :: B :: C :: p1 :: p5 :: nil) (p1 :: nil) 4 1 3 HABCp1p4p5mtmp Hp1mtmp HABCp1p5Mtmp Hincl);apply HT.
}

assert(Hp1p4M : rk(p1 :: p4 ::  nil) <= 2) (* dim : 5 *) by (solve_hyps_max Hp1p4eq Hp1p4M2).
assert(Hp1p4m : rk(p1 :: p4 ::  nil) >= 1) by (solve_hyps_min Hp1p4eq Hp1p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LAp1p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: p1 :: p4 ::  nil) = 2.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour Ap1p4 requis par la preuve de (?)Ap1p4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour Ap1p4 requis par la preuve de (?)Ap1p4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 -2 et 5*)
assert(HAp1p4M2 : rk(A :: p1 :: p4 :: nil) <= 2).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hp4Mtmp : rk(p4 :: nil) <= 1) by (solve_hyps_max Hp4eq Hp4M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p4 :: nil) (A :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: p4 :: nil) ((A :: p1 :: nil) ++ (p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (p4 :: nil) (nil) 1 1 0 HAp1Mtmp Hp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HAp1p4m2 : rk(A :: p1 :: p4 :: nil) >= 2).
{
	assert(HAp4mtmp : rk(A :: p4 :: nil) >= 2) by (solve_hyps_min HAp4eq HAp4m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p4 :: nil) (A :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p4 :: nil) (A :: p1 :: p4 :: nil) 2 2 HAp4mtmp Hcomp Hincl);apply HT.
}

assert(HAp1p4M : rk(A :: p1 :: p4 ::  nil) <= 3) (* dim : 5 *) by (solve_hyps_max HAp1p4eq HAp1p4M3).
assert(HAp1p4m : rk(A :: p1 :: p4 ::  nil) >= 1) by (solve_hyps_min HAp1p4eq HAp1p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LABCEp1p4 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: E :: p1 :: p4 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1p4 requis par la preuve de (?)ABCEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp4 requis par la preuve de (?)ABCEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ABCEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp4 requis par la preuve de (?)ABCDEApp4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp4m5 : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCEp4 requis par la preuve de (?)ABCEp4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp4 requis par la preuve de (?)ABCEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp4 requis par la preuve de (?)ABCEp4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp4 requis par la preuve de (?)ABEp4 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp4 requis par la preuve de (?)ABEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp4M3 : rk(A :: B :: E :: p4 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p4 :: nil) (B :: A :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: E :: p4 :: nil) ((B :: nil) ++ (A :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: E :: p4 :: nil) (nil) 1 2 0 HBMtmp HAEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABEp4m2 : rk(A :: B :: E :: p4 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: E :: p4 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp4 requis par la preuve de (?)ABCEp4 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp4M4 : rk(A :: B :: C :: E :: p4 :: nil) <= 4).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABEp4Mtmp : rk(A :: B :: E :: p4 :: nil) <= 3) by (solve_hyps_max HABEp4eq HABEp4M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p4 :: nil) (C :: A :: B :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: E :: p4 :: nil) ((C :: nil) ++ (A :: B :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: E :: p4 :: nil) (nil) 1 3 0 HCMtmp HABEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCEp4m2 : rk(A :: B :: C :: E :: p4 :: nil) >= 2).
{
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: C :: nil) (A :: B :: C :: E :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: C :: nil) (A :: B :: C :: E :: p4 :: nil) 2 2 HACmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp4m3 : rk(A :: B :: C :: E :: p4 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp4mtmp : rk(A :: B :: C :: D :: E :: Ap :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApp4eq HABCDEApp4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p4 :: nil) (D :: Ap :: A :: B :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p4 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp4mtmp;try rewrite HT2 in HABCDEApp4mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p4 :: nil) (nil) 5 0 2 HABCDEApp4mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEp1p4 requis par la preuve de (?)ABCEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEp1p4 requis par la preuve de (?)ABCEp1p4 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p4 requis par la preuve de (?)ABCEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p4 requis par la preuve de (?)ABCDECpp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p4m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEp1p4 requis par la preuve de (?)ABCEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p4 requis par la preuve de (?)ABCEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p4 requis par la preuve de (?)ABCDEApBpp1p4 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p4m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCEp1p4 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEp1p4 requis par la preuve de (?)ABCEp1p4 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCEp1p4m2 : rk(A :: B :: C :: E :: p1 :: p4 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpp1p4mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p4eq HABCDEApBpp1p4m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: p1 :: p4 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p4mtmp;try rewrite HT2 in HABCDEApBpp1p4mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: p1 :: p4 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpp1p4mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p4 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCEp1p4m3 : rk(A :: B :: C :: E :: p1 :: p4 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p4mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p4eq HABCDECpp1p4m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: nil) (D :: Cp :: A :: B :: C :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: p1 :: p4 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p4mtmp;try rewrite HT2 in HABCDECpp1p4mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: p1 :: p4 :: nil) (nil) 5 0 2 HABCDECpp1p4mtmp Hmtmp HDCpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1p4M5 : rk(A :: B :: C :: E :: p1 :: p4 :: nil) <= 5).
{
	assert(Hp1Mtmp : rk(p1 :: nil) <= 1) by (solve_hyps_max Hp1eq Hp1M1).
	assert(HABCEp4Mtmp : rk(A :: B :: C :: E :: p4 :: nil) <= 4) by (solve_hyps_max HABCEp4eq HABCEp4M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: nil) (A :: B :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: p4 :: nil) (p1 :: A :: B :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: A :: B :: C :: E :: p4 :: nil) ((p1 :: nil) ++ (A :: B :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: nil) (A :: B :: C :: E :: p4 :: nil) (nil) 1 4 0 Hp1Mtmp HABCEp4Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HABCEp1p4M4 : rk(A :: B :: C :: E :: p1 :: p4 :: nil) <= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEp4Mtmp : rk(A :: B :: C :: E :: p4 :: nil) <= 4) by (solve_hyps_max HABCEp4eq HABCEp4M4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p1 :: nil) (A :: B :: C :: E :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: p4 :: nil) (A :: p1 :: A :: B :: C :: E :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: A :: B :: C :: E :: p4 :: nil) ((A :: p1 :: nil) ++ (A :: B :: C :: E :: p4 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (A :: B :: C :: E :: p4 :: nil) (A :: nil) 1 4 1 HAp1Mtmp HABCEp4Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p4 ::  de rang :  5 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : D :: p1 ::   de rang : 2 et 2 *)
assert(HABCEp1p4m4 : rk(A :: B :: C :: E :: p1 :: p4 :: nil) >= 4).
{
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HDp1Mtmp : rk(D :: p1 :: nil) <= 2) by (solve_hyps_max HDp1eq HDp1M2).
	assert(HABCDEp1p4eq : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) = 5) by (apply LABCDEp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCDEp1p4mtmp : rk(A :: B :: C :: D :: E :: p1 :: p4 :: nil) >= 5) by (solve_hyps_min HABCDEp1p4eq HABCDEp1p4m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (A :: B :: C :: E :: p1 :: p4 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p4 :: nil) (D :: p1 :: A :: B :: C :: E :: p1 :: p4 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: A :: B :: C :: E :: p1 :: p4 :: nil) ((D :: p1 :: nil) ++ (A :: B :: C :: E :: p1 :: p4 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p4mtmp;try rewrite HT2 in HABCDEp1p4mtmp.
	assert(HT := rule_4 (D :: p1 :: nil) (A :: B :: C :: E :: p1 :: p4 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p4mtmp Hp1mtmp HDp1Mtmp Hincl); apply HT.
}

assert(HABCEp1p4M : rk(A :: B :: C :: E :: p1 :: p4 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HABCEp1p4m : rk(A :: B :: C :: E :: p1 :: p4 ::  nil) >= 1) by (solve_hyps_min HABCEp1p4eq HABCEp1p4m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LBCp1p5 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(B :: C :: p1 :: p5 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCp1p5 requis par la preuve de (?)BCp1p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp1p5 requis par la preuve de (?)BCp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCp1p5 requis par la preuve de (?)ABCp1p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp5 requis par la preuve de (?)ABCp1p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp5 requis par la preuve de (?)ABCp5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp5 requis par la preuve de (?)ABCp5 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp5M3 : rk(A :: B :: C :: p5 :: nil) <= 3).
{
	assert(HAMtmp : rk(A :: nil) <= 1) by (solve_hyps_max HAeq HAM1).
	assert(HBCp5Mtmp : rk(B :: C :: p5 :: nil) <= 2) by (solve_hyps_max HBCp5eq HBCp5M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: nil) (B :: C :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p5 :: nil) (A :: B :: C :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: p5 :: nil) ((A :: nil) ++ (B :: C :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: nil) (B :: C :: p5 :: nil) (nil) 1 2 0 HAMtmp HBCp5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp5m2 : rk(A :: B :: C :: p5 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p5 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCp1p5 requis par la preuve de (?)ABCp1p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCECpp1p5 requis par la preuve de (?)ABCp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p5 requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p5 requis par la preuve de (?)ABCDECpp1p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCECpp1p5 requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCECpp1p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpm2 : rk(A :: B :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpm4 : rk(A :: B :: D :: E :: Cp :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCCpm2 : rk(A :: B :: C :: Cp :: nil) >= 2).
{
	assert(HABDECpMtmp : rk(A :: B :: D :: E :: Cp :: nil) <= 5) by (solve_hyps_max HABDECpeq HABDECpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABDECpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCCpm3 : rk(A :: B :: C :: Cp :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDECpp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1p5 requis par la preuve de (?)ABCECpp1p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1p5 requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1p5 requis par la preuve de (?)ABCDEApBpCpp1p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1p5 requis par la preuve de (?)ABCECpp1p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1p5m2 : rk(A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp1p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1p5eq HABCDEApBpCpp1p5m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p5 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1p5mtmp;try rewrite HT2 in HABCDEApBpCpp1p5mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1p5mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp1p5m3 : rk(A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p5 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1p5m4 : rk(A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p5eq HABCDECpp1p5m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p5 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p5mtmp;try rewrite HT2 in HABCDECpp1p5mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1p5mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECp requis par la preuve de (?)ABCp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpp1m2 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDECpp1M5 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpp1m4 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABECpp1M4 : rk(A :: B :: E :: Cp :: p1 :: nil) <= 4).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HCpMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABECpp1m2 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) 2 2 HABCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Cp :: p1 ::  de rang :  4 et 5 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABECpp1m3 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABDECpp1mtmp : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABDECpp1eq HABDECpp1m4).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDECpp1mtmp;try rewrite HT2 in HABDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) (Cp :: nil) 4 1 2 HABDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: B :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HABECpm2 : rk(A :: B :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: B :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABECpm3 : rk(A :: B :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABECpp1mtmp : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HABECpp1eq HABECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABECpp1mtmp;try rewrite HT2 in HABECpp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Cp :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABECpp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCp1p5 requis par la preuve de (?)ABCp1p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Cp :: p1 :: p5 ::  de rang :  4 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABCp1p5m2 : rk(A :: B :: C :: p1 :: p5 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCECpp1p5mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) >= 4) by (solve_hyps_min HABCECpp1p5eq HABCECpp1p5m4).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: p5 :: nil) (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p5 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: B :: C :: p1 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1p5mtmp;try rewrite HT2 in HABCECpp1p5mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p5 :: nil) (A :: B :: nil) 4 2 4 HABCECpp1p5mtmp HABmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCp1p5M4 : rk(A :: B :: C :: p1 :: p5 :: nil) <= 4).
{
	assert(Hp1Mtmp : rk(p1 :: nil) <= 1) by (solve_hyps_max Hp1eq Hp1M1).
	assert(HABCp5Mtmp : rk(A :: B :: C :: p5 :: nil) <= 3) by (solve_hyps_max HABCp5eq HABCp5M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: nil) (A :: B :: C :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p5 :: nil) (p1 :: A :: B :: C :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: A :: B :: C :: p5 :: nil) ((p1 :: nil) ++ (A :: B :: C :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: nil) (A :: B :: C :: p5 :: nil) (nil) 1 3 0 Hp1Mtmp HABCp5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 -4 et 5*)
assert(HABCp1p5M3 : rk(A :: B :: C :: p1 :: p5 :: nil) <= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HBCp5Mtmp : rk(B :: C :: p5 :: nil) <= 2) by (solve_hyps_max HBCp5eq HBCp5M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (B :: C :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p5 :: nil) (A :: p1 :: B :: C :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: p5 :: nil) ((A :: p1 :: nil) ++ (B :: C :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (B :: C :: p5 :: nil) (nil) 1 2 0 HAp1Mtmp HBCp5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCp1p5 requis par la preuve de (?)BCp1p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCp1p5 requis par la preuve de (?)BCp1p5 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HBCp1p5M3 : rk(B :: C :: p1 :: p5 :: nil) <= 3).
{
	assert(Hp1Mtmp : rk(p1 :: nil) <= 1) by (solve_hyps_max Hp1eq Hp1M1).
	assert(HBCp5Mtmp : rk(B :: C :: p5 :: nil) <= 2) by (solve_hyps_max HBCp5eq HBCp5M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: nil) (B :: C :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (B :: C :: p1 :: p5 :: nil) (p1 :: B :: C :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: B :: C :: p5 :: nil) ((p1 :: nil) ++ (B :: C :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: nil) (B :: C :: p5 :: nil) (nil) 1 2 0 Hp1Mtmp HBCp5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: p1 :: p5 ::  de rang :  2 et 3 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: p1 ::   de rang : 1 et 1 *)
assert(HBCp1p5m2 : rk(B :: C :: p1 :: p5 :: nil) >= 2).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCp1p5mtmp : rk(A :: B :: C :: p1 :: p5 :: nil) >= 2) by (solve_hyps_min HABCp1p5eq HABCp1p5m2).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: p1 :: nil) (B :: C :: p1 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p5 :: nil) (A :: p1 :: B :: C :: p1 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: p1 :: p5 :: nil) ((A :: p1 :: nil) ++ (B :: C :: p1 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp1p5mtmp;try rewrite HT2 in HABCp1p5mtmp.
	assert(HT := rule_4 (A :: p1 :: nil) (B :: C :: p1 :: p5 :: nil) (p1 :: nil) 2 1 1 HABCp1p5mtmp Hp1mtmp HAp1Mtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HBCp1p5m3 : rk(B :: C :: p1 :: p5 :: nil) >= 3).
{
	assert(HBCp1eq : rk(B :: C :: p1 :: nil) = 3) by (apply LBCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1mtmp : rk(B :: C :: p1 :: nil) >= 3) by (solve_hyps_min HBCp1eq HBCp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (B :: C :: p1 :: nil) (B :: C :: p1 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (B :: C :: p1 :: nil) (B :: C :: p1 :: p5 :: nil) 3 3 HBCp1mtmp Hcomp Hincl);apply HT.
}

assert(HBCp1p5M : rk(B :: C :: p1 :: p5 ::  nil) <= 4) (* dim : 5 *) by (solve_hyps_max HBCp1p5eq HBCp1p5M4).
assert(HBCp1p5m : rk(B :: C :: p1 :: p5 ::  nil) >= 1) by (solve_hyps_min HBCp1p5eq HBCp1p5m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LBCp1p2p5 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(B :: C :: p1 :: p2 :: p5 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCp1p2p5 requis par la preuve de (?)BCp1p2p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour BCp1p2p5 requis par la preuve de (?)BCp1p2p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour BCp1p2p5 requis par la preuve de (?)BCp1p2p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCp1p2p5 requis par la preuve de (?)BCp1p2p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCp2p5 requis par la preuve de (?)ABCp1p2p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCp1p2p5 requis par la preuve de (?)ABCp1p2p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCECpp1p2p5 requis par la preuve de (?)ABCp1p2p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p5 requis par la preuve de (?)ABCECpp1p2p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p5 requis par la preuve de (?)ABCDECpp1p2p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1p2p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCECpp1p2p5 requis par la preuve de (?)ABCECpp1p2p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCECpp1p2p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpm2 : rk(A :: B :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpm4 : rk(A :: B :: D :: E :: Cp :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCCpm2 : rk(A :: B :: C :: Cp :: nil) >= 2).
{
	assert(HABDECpMtmp : rk(A :: B :: D :: E :: Cp :: nil) <= 5) by (solve_hyps_max HABDECpeq HABDECpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABDECpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCCpm3 : rk(A :: B :: C :: Cp :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDECpp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1p2p5 requis par la preuve de (?)ABCECpp1p2p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1p2p5 requis par la preuve de (?)ABCECpp1p2p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1p2p5 requis par la preuve de (?)ABCDEApBpCpp1p2p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1p2p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCECpp1p2p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1p2p5 requis par la preuve de (?)ABCECpp1p2p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p5 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1p2p5m2 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp1p2p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1p2p5eq HABCDEApBpCpp1p2p5m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p5 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1p2p5mtmp;try rewrite HT2 in HABCDEApBpCpp1p2p5mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1p2p5mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp1p2p5m3 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p5 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1p2p5m4 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p2p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p5eq HABCDECpp1p2p5m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p5 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p5mtmp;try rewrite HT2 in HABCDECpp1p2p5mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1p2p5mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECp requis par la preuve de (?)ABCp1p2p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpp1m2 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDECpp1M5 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpp1m4 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABECpp1M4 : rk(A :: B :: E :: Cp :: p1 :: nil) <= 4).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HCpMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABECpp1m2 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) 2 2 HABCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Cp :: p1 ::  de rang :  4 et 5 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABECpp1m3 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABDECpp1mtmp : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABDECpp1eq HABDECpp1m4).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDECpp1mtmp;try rewrite HT2 in HABDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) (Cp :: nil) 4 1 2 HABDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: B :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HABECpm2 : rk(A :: B :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: B :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABECpm3 : rk(A :: B :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABECpp1mtmp : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HABECpp1eq HABECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABECpp1mtmp;try rewrite HT2 in HABECpp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Cp :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABECpp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCp1p2p5 requis par la preuve de (?)ABCp1p2p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 ::  de rang :  4 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABCp1p2p5m2 : rk(A :: B :: C :: p1 :: p2 :: p5 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCECpp1p2p5mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) >= 4) by (solve_hyps_min HABCECpp1p2p5eq HABCECpp1p2p5m4).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p2 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p2 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p2 :: p5 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: B :: C :: p1 :: p2 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1p2p5mtmp;try rewrite HT2 in HABCECpp1p2p5mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p2 :: p5 :: nil) (A :: B :: nil) 4 2 4 HABCECpp1p2p5mtmp HABmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HABCp1p2p5M5 : rk(A :: B :: C :: p1 :: p2 :: p5 :: nil) <= 5).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HBCp2p5Mtmp : rk(B :: C :: p2 :: p5 :: nil) <= 4) by (solve_hyps_max HBCp2p5eq HBCp2p5M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (B :: C :: p2 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p2 :: p5 :: nil) (A :: p1 :: B :: C :: p2 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: p2 :: p5 :: nil) ((A :: p1 :: nil) ++ (B :: C :: p2 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (B :: C :: p2 :: p5 :: nil) (nil) 1 4 0 HAp1Mtmp HBCp2p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour BCp1p2p5 requis par la preuve de (?)BCp1p2p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: p1 :: p2 :: p5 ::  de rang :  2 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: p1 ::   de rang : 1 et 1 *)
assert(HBCp1p2p5m2 : rk(B :: C :: p1 :: p2 :: p5 :: nil) >= 2).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCp1p2p5mtmp : rk(A :: B :: C :: p1 :: p2 :: p5 :: nil) >= 2) by (solve_hyps_min HABCp1p2p5eq HABCp1p2p5m2).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: p1 :: nil) (B :: C :: p1 :: p2 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p2 :: p5 :: nil) (A :: p1 :: B :: C :: p1 :: p2 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: p1 :: p2 :: p5 :: nil) ((A :: p1 :: nil) ++ (B :: C :: p1 :: p2 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp1p2p5mtmp;try rewrite HT2 in HABCp1p2p5mtmp.
	assert(HT := rule_4 (A :: p1 :: nil) (B :: C :: p1 :: p2 :: p5 :: nil) (p1 :: nil) 2 1 1 HABCp1p2p5mtmp Hp1mtmp HAp1Mtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HBCp1p2p5m3 : rk(B :: C :: p1 :: p2 :: p5 :: nil) >= 3).
{
	assert(HBCp1eq : rk(B :: C :: p1 :: nil) = 3) by (apply LBCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1mtmp : rk(B :: C :: p1 :: nil) >= 3) by (solve_hyps_min HBCp1eq HBCp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (B :: C :: p1 :: nil) (B :: C :: p1 :: p2 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (B :: C :: p1 :: nil) (B :: C :: p1 :: p2 :: p5 :: nil) 3 3 HBCp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 4 et 5*)
assert(HBCp1p2p5M4 : rk(B :: C :: p1 :: p2 :: p5 :: nil) <= 4).
{
	assert(Hp2Mtmp : rk(p2 :: nil) <= 1) by (solve_hyps_max Hp2eq Hp2M1).
	assert(HBCp1p5eq : rk(B :: C :: p1 :: p5 :: nil) = 3) by (apply LBCp1p5 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1p5Mtmp : rk(B :: C :: p1 :: p5 :: nil) <= 3) by (solve_hyps_max HBCp1p5eq HBCp1p5M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p2 :: nil) (B :: C :: p1 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (B :: C :: p1 :: p2 :: p5 :: nil) (p2 :: B :: C :: p1 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p2 :: B :: C :: p1 :: p5 :: nil) ((p2 :: nil) ++ (B :: C :: p1 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p2 :: nil) (B :: C :: p1 :: p5 :: nil) (nil) 1 3 0 Hp2Mtmp HBCp1p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : 4 -4 et 5*)
assert(HBCp1p2p5M3 : rk(B :: C :: p1 :: p2 :: p5 :: nil) <= 3).
{
	assert(Hp1p2eq : rk(p1 :: p2 :: nil) = 1) by (apply Lp1p2 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(Hp1p2Mtmp : rk(p1 :: p2 :: nil) <= 1) by (solve_hyps_max Hp1p2eq Hp1p2M1).
	assert(HBCp5Mtmp : rk(B :: C :: p5 :: nil) <= 2) by (solve_hyps_max HBCp5eq HBCp5M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: p2 :: nil) (B :: C :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (B :: C :: p1 :: p2 :: p5 :: nil) (p1 :: p2 :: B :: C :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: p2 :: B :: C :: p5 :: nil) ((p1 :: p2 :: nil) ++ (B :: C :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: p2 :: nil) (B :: C :: p5 :: nil) (nil) 1 2 0 Hp1p2Mtmp HBCp5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

assert(HBCp1p2p5M : rk(B :: C :: p1 :: p2 :: p5 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max HBCp1p2p5eq HBCp1p2p5M5).
assert(HBCp1p2p5m : rk(B :: C :: p1 :: p2 :: p5 ::  nil) >= 1) by (solve_hyps_min HBCp1p2p5eq HBCp1p2p5m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LABCp1p2p5 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: p1 :: p2 :: p5 ::  nil) = 3.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCp1p2p5 requis par la preuve de (?)ABCp1p2p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCp1p2p5 requis par la preuve de (?)ABCp1p2p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCp1p2p5 requis par la preuve de (?)ABCp1p2p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCp2p5 requis par la preuve de (?)ABCp1p2p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCp1p2p5 requis par la preuve de (?)ABCp1p2p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCECpp1p2p5 requis par la preuve de (?)ABCp1p2p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p5 requis par la preuve de (?)ABCECpp1p2p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p5 requis par la preuve de (?)ABCDECpp1p2p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1p2p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCECpp1p2p5 requis par la preuve de (?)ABCECpp1p2p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCECpp1p2p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpm2 : rk(A :: B :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpm4 : rk(A :: B :: D :: E :: Cp :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCCpm2 : rk(A :: B :: C :: Cp :: nil) >= 2).
{
	assert(HABDECpMtmp : rk(A :: B :: D :: E :: Cp :: nil) <= 5) by (solve_hyps_max HABDECpeq HABDECpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABDECpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCCpm3 : rk(A :: B :: C :: Cp :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDECpp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1p2p5 requis par la preuve de (?)ABCECpp1p2p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1p2p5 requis par la preuve de (?)ABCECpp1p2p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1p2p5 requis par la preuve de (?)ABCDEApBpCpp1p2p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1p2p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCECpp1p2p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1p2p5 requis par la preuve de (?)ABCECpp1p2p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p5 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1p2p5m2 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp1p2p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1p2p5eq HABCDEApBpCpp1p2p5m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p5 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1p2p5mtmp;try rewrite HT2 in HABCDEApBpCpp1p2p5mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1p2p5mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp1p2p5m3 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p5 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1p2p5m4 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p2p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p5eq HABCDECpp1p2p5m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p5 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p5mtmp;try rewrite HT2 in HABCDECpp1p2p5mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1p2p5mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECp requis par la preuve de (?)ABCp1p2p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpp1m2 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDECpp1M5 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpp1m4 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABECpp1M4 : rk(A :: B :: E :: Cp :: p1 :: nil) <= 4).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HCpMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABECpp1m2 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) 2 2 HABCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Cp :: p1 ::  de rang :  4 et 5 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABECpp1m3 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABDECpp1mtmp : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABDECpp1eq HABDECpp1m4).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDECpp1mtmp;try rewrite HT2 in HABDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) (Cp :: nil) 4 1 2 HABDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: B :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HABECpm2 : rk(A :: B :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: B :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABECpm3 : rk(A :: B :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABECpp1mtmp : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HABECpp1eq HABECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABECpp1mtmp;try rewrite HT2 in HABECpp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Cp :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABECpp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCp1p2p5 requis par la preuve de (?)ABCp1p2p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 ::  de rang :  4 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABCp1p2p5m2 : rk(A :: B :: C :: p1 :: p2 :: p5 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCECpp1p2p5mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) >= 4) by (solve_hyps_min HABCECpp1p2p5eq HABCECpp1p2p5m4).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p2 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: p2 :: p5 :: nil) (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p2 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p2 :: p5 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: B :: C :: p1 :: p2 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1p2p5mtmp;try rewrite HT2 in HABCECpp1p2p5mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p2 :: p5 :: nil) (A :: B :: nil) 4 2 4 HABCECpp1p2p5mtmp HABmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HABCp1p2p5M5 : rk(A :: B :: C :: p1 :: p2 :: p5 :: nil) <= 5).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HBCp2p5Mtmp : rk(B :: C :: p2 :: p5 :: nil) <= 4) by (solve_hyps_max HBCp2p5eq HBCp2p5M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (B :: C :: p2 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p2 :: p5 :: nil) (A :: p1 :: B :: C :: p2 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: p2 :: p5 :: nil) ((A :: p1 :: nil) ++ (B :: C :: p2 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (B :: C :: p2 :: p5 :: nil) (nil) 1 4 0 HAp1Mtmp HBCp2p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp1p2p5m3 : rk(A :: B :: C :: p1 :: p2 :: p5 :: nil) >= 3).
{
	assert(HBCp1eq : rk(B :: C :: p1 :: nil) = 3) by (apply LBCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1mtmp : rk(B :: C :: p1 :: nil) >= 3) by (solve_hyps_min HBCp1eq HBCp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p2 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p2 :: p5 :: nil) 3 3 HBCp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 4 et 5*)
assert(HABCp1p2p5M4 : rk(A :: B :: C :: p1 :: p2 :: p5 :: nil) <= 4).
{
	assert(Hp2Mtmp : rk(p2 :: nil) <= 1) by (solve_hyps_max Hp2eq Hp2M1).
	assert(HABCp1p5eq : rk(A :: B :: C :: p1 :: p5 :: nil) = 3) by (apply LABCp1p5 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCp1p5Mtmp : rk(A :: B :: C :: p1 :: p5 :: nil) <= 3) by (solve_hyps_max HABCp1p5eq HABCp1p5M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p2 :: nil) (A :: B :: C :: p1 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p2 :: p5 :: nil) (p2 :: A :: B :: C :: p1 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p2 :: A :: B :: C :: p1 :: p5 :: nil) ((p2 :: nil) ++ (A :: B :: C :: p1 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p2 :: nil) (A :: B :: C :: p1 :: p5 :: nil) (nil) 1 3 0 Hp2Mtmp HABCp1p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 4 et -2*)
assert(HABCp1p2p5M3 : rk(A :: B :: C :: p1 :: p2 :: p5 :: nil) <= 3).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp1p5eq : rk(A :: B :: C :: p1 :: p5 :: nil) = 3) by (apply LABCp1p5 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCp1p5Mtmp : rk(A :: B :: C :: p1 :: p5 :: nil) <= 3) by (solve_hyps_max HABCp1p5eq HABCp1p5M3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p2 :: nil) (A :: B :: C :: p1 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p2 :: p5 :: nil) (A :: p2 :: A :: B :: C :: p1 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: A :: B :: C :: p1 :: p5 :: nil) ((A :: p2 :: nil) ++ (A :: B :: C :: p1 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (A :: B :: C :: p1 :: p5 :: nil) (A :: nil) 1 3 1 HAp2Mtmp HABCp1p5Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

assert(HABCp1p2p5M : rk(A :: B :: C :: p1 :: p2 :: p5 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HABCp1p2p5m : rk(A :: B :: C :: p1 :: p2 :: p5 ::  nil) >= 1) by (solve_hyps_min HABCp1p2p5eq HABCp1p2p5m1).
intuition.
Qed.

(* dans constructLemma(), requis par LBCp1p2p3p5 *)
(* dans la couche 0 *)
Lemma LABCp1p2p3p5 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCp1p2p3p5 requis par la preuve de (?)ABCp1p2p3p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCp1p2p3p5 requis par la preuve de (?)ABCp1p2p3p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCp1p3p5 requis par la preuve de (?)ABCp1p2p3p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCp1p3p5 requis par la preuve de (?)ABCp1p3p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCp3p5 requis par la preuve de (?)ABCp1p3p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCp1p3p5 requis par la preuve de (?)ABCp1p3p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCECpp1p3p5 requis par la preuve de (?)ABCp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p3p5 requis par la preuve de (?)ABCECpp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p3p5 requis par la preuve de (?)ABCDECpp1p3p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p3p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCECpp1p3p5 requis par la preuve de (?)ABCECpp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCECpp1p3p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpm2 : rk(A :: B :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpm4 : rk(A :: B :: D :: E :: Cp :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCCpm2 : rk(A :: B :: C :: Cp :: nil) >= 2).
{
	assert(HABDECpMtmp : rk(A :: B :: D :: E :: Cp :: nil) <= 5) by (solve_hyps_max HABDECpeq HABDECpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABDECpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCCpm3 : rk(A :: B :: C :: Cp :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDECpp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1p3p5 requis par la preuve de (?)ABCECpp1p3p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1p3p5 requis par la preuve de (?)ABCECpp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1p3p5 requis par la preuve de (?)ABCDEApBpCpp1p3p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1p3p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p3 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p3 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCECpp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1p3p5 requis par la preuve de (?)ABCECpp1p3p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p3 :: p5 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1p3p5m2 : rk(A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp1p3p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p3 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1p3p5eq HABCDEApBpCpp1p3p5m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p3 :: p5 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1p3p5mtmp;try rewrite HT2 in HABCDEApBpCpp1p3p5mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1p3p5mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp1p3p5m3 : rk(A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1p3p5m4 : rk(A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p3p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p5eq HABCDECpp1p3p5m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p5mtmp;try rewrite HT2 in HABCDECpp1p3p5mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1p3p5mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECp requis par la preuve de (?)ABCp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpp1m2 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDECpp1M5 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpp1m4 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABECpp1M4 : rk(A :: B :: E :: Cp :: p1 :: nil) <= 4).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HCpMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABECpp1m2 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) 2 2 HABCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Cp :: p1 ::  de rang :  4 et 5 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABECpp1m3 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABDECpp1mtmp : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABDECpp1eq HABDECpp1m4).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDECpp1mtmp;try rewrite HT2 in HABDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) (Cp :: nil) 4 1 2 HABDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: B :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HABECpm2 : rk(A :: B :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: B :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABECpm3 : rk(A :: B :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABECpp1mtmp : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HABECpp1eq HABECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABECpp1mtmp;try rewrite HT2 in HABECpp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Cp :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABECpp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCp1p3p5 requis par la preuve de (?)ABCp1p3p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 ::  de rang :  4 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABCp1p3p5m2 : rk(A :: B :: C :: p1 :: p3 :: p5 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCECpp1p3p5mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil) >= 4) by (solve_hyps_min HABCECpp1p3p5eq HABCECpp1p3p5m4).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: p3 :: p5 :: nil) (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p3 :: p5 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: B :: C :: p1 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1p3p5mtmp;try rewrite HT2 in HABCECpp1p3p5mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p3 :: p5 :: nil) (A :: B :: nil) 4 2 4 HABCECpp1p3p5mtmp HABmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HABCp1p3p5M5 : rk(A :: B :: C :: p1 :: p3 :: p5 :: nil) <= 5).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HBCp3p5Mtmp : rk(B :: C :: p3 :: p5 :: nil) <= 4) by (solve_hyps_max HBCp3p5eq HBCp3p5M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (B :: C :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p3 :: p5 :: nil) (A :: p1 :: B :: C :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: p3 :: p5 :: nil) ((A :: p1 :: nil) ++ (B :: C :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (B :: C :: p3 :: p5 :: nil) (nil) 1 4 0 HAp1Mtmp HBCp3p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp1p3p5m3 : rk(A :: B :: C :: p1 :: p3 :: p5 :: nil) >= 3).
{
	assert(HBCp1eq : rk(B :: C :: p1 :: nil) = 3) by (apply LBCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1mtmp : rk(B :: C :: p1 :: nil) >= 3) by (solve_hyps_min HBCp1eq HBCp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p3 :: p5 :: nil) 3 3 HBCp1mtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCp1p2p3p5 requis par la preuve de (?)ABCp1p2p3p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCp1p2p3p5 requis par la preuve de (?)ABCp1p2p3p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCECpp1p2p3p5 requis par la preuve de (?)ABCp1p2p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p3p5 requis par la preuve de (?)ABCECpp1p2p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p3p5 requis par la preuve de (?)ABCDECpp1p2p3p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p3p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCECpp1p2p3p5 requis par la preuve de (?)ABCECpp1p2p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1p2p3p5 requis par la preuve de (?)ABCECpp1p2p3p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1p2p3p5 requis par la preuve de (?)ABCECpp1p2p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1p2p3p5 requis par la preuve de (?)ABCDEApBpCpp1p2p3p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1p2p3p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1p2p3p5 requis par la preuve de (?)ABCECpp1p2p3p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p5 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1p2p3p5m2 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp1p2p3p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1p2p3p5eq HABCDEApBpCpp1p2p3p5m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1p2p3p5mtmp;try rewrite HT2 in HABCDEApBpCpp1p2p3p5mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1p2p3p5mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp1p2p3p5m3 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p5 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1p2p3p5m4 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p2p3p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p5eq HABCDECpp1p2p3p5m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p5mtmp;try rewrite HT2 in HABCDECpp1p2p3p5mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1p2p3p5mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCp1p2p3p5 requis par la preuve de (?)ABCp1p2p3p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 ::  de rang :  4 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABCp1p2p3p5m2 : rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCECpp1p2p3p5mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 4) by (solve_hyps_min HABCECpp1p2p3p5eq HABCECpp1p2p3p5m4).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1p2p3p5mtmp;try rewrite HT2 in HABCECpp1p2p3p5mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) (A :: B :: nil) 4 2 4 HABCECpp1p2p3p5mtmp HABmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp1p2p3p5m3 : rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) >= 3).
{
	assert(HBCp1eq : rk(B :: C :: p1 :: nil) = 3) by (apply LBCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1mtmp : rk(B :: C :: p1 :: nil) >= 3) by (solve_hyps_min HBCp1eq HBCp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) 3 3 HBCp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HABCp1p2p3p5M5 : rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) <= 5).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp1p3p5Mtmp : rk(A :: B :: C :: p1 :: p3 :: p5 :: nil) <= 5) by (solve_hyps_max HABCp1p3p5eq HABCp1p3p5M5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p2 :: nil) (A :: B :: C :: p1 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) (A :: p2 :: A :: B :: C :: p1 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: A :: B :: C :: p1 :: p3 :: p5 :: nil) ((A :: p2 :: nil) ++ (A :: B :: C :: p1 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (A :: B :: C :: p1 :: p3 :: p5 :: nil) (A :: nil) 1 5 1 HAp2Mtmp HABCp1p3p5Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 4 et 5*)
assert(HABCp1p2p3p5M4 : rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) <= 4).
{
	assert(Hp3Mtmp : rk(p3 :: nil) <= 1) by (solve_hyps_max Hp3eq Hp3M1).
	assert(HABCp1p2p5eq : rk(A :: B :: C :: p1 :: p2 :: p5 :: nil) = 3) by (apply LABCp1p2p5 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCp1p2p5Mtmp : rk(A :: B :: C :: p1 :: p2 :: p5 :: nil) <= 3) by (solve_hyps_max HABCp1p2p5eq HABCp1p2p5M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p3 :: nil) (A :: B :: C :: p1 :: p2 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) (p3 :: A :: B :: C :: p1 :: p2 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p3 :: A :: B :: C :: p1 :: p2 :: p5 :: nil) ((p3 :: nil) ++ (A :: B :: C :: p1 :: p2 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p3 :: nil) (A :: B :: C :: p1 :: p2 :: p5 :: nil) (nil) 1 3 0 Hp3Mtmp HABCp1p2p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp1p2p3p5m4 : rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) >= 4).
{
	assert(HABCp3eq : rk(A :: B :: C :: p3 :: nil) = 4) by (apply LABCp3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCp3mtmp : rk(A :: B :: C :: p3 :: nil) >= 4) by (solve_hyps_min HABCp3eq HABCp3m4).
	assert(Hcomp : 4 <= 4) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: p3 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: p3 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) 4 4 HABCp3mtmp Hcomp Hincl);apply HT.
}

assert(HABCp1p2p3p5M : rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HABCp1p2p3p5m : rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 ::  nil) >= 1) by (solve_hyps_min HABCp1p2p3p5eq HABCp1p2p3p5m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LBCp1p2p3p5 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(B :: C :: p1 :: p2 :: p3 :: p5 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCp1p2p3p5 requis par la preuve de (?)BCp1p2p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour BCp1p2p3p5 requis par la preuve de (?)BCp1p2p3p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCp3p5 requis par la preuve de (?)BCp1p2p3p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour BCEp1p3p5 requis par la preuve de (?)BCp3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour BCDEp1p3p5 requis par la preuve de (?)BCEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p3p5 requis par la preuve de (?)BCDEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p3p5 requis par la preuve de (?)ABCDEp1p3p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p3p5m5 : rk(A :: B :: C :: D :: E :: p1 :: p3 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p3 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour BCDEp1p3p5 requis par la preuve de (?)BCDEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEDpp1p3p5 requis par la preuve de (?)BCDEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEDpp1p3p5 requis par la preuve de (?)ABCDEDpp1p3p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEDpp1p3p5m5 : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p3 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Dp :: p1 :: p3 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp requis par la preuve de (?)BCDEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour BCDEp1p3p5 requis par la preuve de (?)BCDEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p3p5 requis par la preuve de (?)BCDEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p3p5 requis par la preuve de (?)ABCDECpp1p3p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p3p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BE requis par la preuve de (?)BCDEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECp requis par la preuve de (?)BCDEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpp1m2 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDECpp1M5 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpp1m4 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABECpp1M4 : rk(A :: B :: E :: Cp :: p1 :: nil) <= 4).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HCpMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABECpp1m2 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) 2 2 HABCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Cp :: p1 ::  de rang :  4 et 5 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABECpp1m3 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABDECpp1mtmp : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABDECpp1eq HABDECpp1m4).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDECpp1mtmp;try rewrite HT2 in HABDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) (Cp :: nil) 4 1 2 HABDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: B :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HABECpm2 : rk(A :: B :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: B :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABECpm3 : rk(A :: B :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABECpp1mtmp : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HABECpp1eq HABECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABECpp1mtmp;try rewrite HT2 in HABECpp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Cp :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABECpp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour BCDEp1p3p5 requis par la preuve de (?)BCDEp1p3p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 ::  de rang :  5 et 6 	 AiB : B :: E ::  de rang :  1 et 2 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HBCDEp1p3p5m2 : rk(B :: C :: D :: E :: p1 :: p3 :: p5 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCDECpp1p3p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p5eq HABCDECpp1p3p5m5).
	assert(HBEmtmp : rk(B :: E :: nil) >= 1) by (solve_hyps_min HBEeq HBEm1).
	assert(Hincl : incl (B :: E :: nil) (list_inter (A :: B :: E :: Cp :: nil) (B :: C :: D :: E :: p1 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 :: nil) (A :: B :: E :: Cp :: B :: C :: D :: E :: p1 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: B :: C :: D :: E :: p1 :: p3 :: p5 :: nil) ((A :: B :: E :: Cp :: nil) ++ (B :: C :: D :: E :: p1 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p5mtmp;try rewrite HT2 in HABCDECpp1p3p5mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (B :: C :: D :: E :: p1 :: p3 :: p5 :: nil) (B :: E :: nil) 5 1 4 HABCDECpp1p3p5mtmp HBEmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Dp :: p1 :: p3 :: p5 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : A :: Dp ::   de rang : 1 et 2 *)
assert(HBCDEp1p3p5m3 : rk(B :: C :: D :: E :: p1 :: p3 :: p5 :: nil) >= 3).
{
	assert(HADpMtmp : rk(A :: Dp :: nil) <= 2) by (solve_hyps_max HADpeq HADpM2).
	assert(HABCDEDpp1p3p5mtmp : rk(A :: B :: C :: D :: E :: Dp :: p1 :: p3 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEDpp1p3p5eq HABCDEDpp1p3p5m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: Dp :: nil) (B :: C :: D :: E :: p1 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Dp :: p1 :: p3 :: p5 :: nil) (A :: Dp :: B :: C :: D :: E :: p1 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: Dp :: B :: C :: D :: E :: p1 :: p3 :: p5 :: nil) ((A :: Dp :: nil) ++ (B :: C :: D :: E :: p1 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEDpp1p3p5mtmp;try rewrite HT2 in HABCDEDpp1p3p5mtmp.
	assert(HT := rule_4 (A :: Dp :: nil) (B :: C :: D :: E :: p1 :: p3 :: p5 :: nil) (nil) 5 0 2 HABCDEDpp1p3p5mtmp Hmtmp HADpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p3 :: p5 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: p1 ::   de rang : 1 et 1 *)
assert(HBCDEp1p3p5m5 : rk(B :: C :: D :: E :: p1 :: p3 :: p5 :: nil) >= 5).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCDEp1p3p5mtmp : rk(A :: B :: C :: D :: E :: p1 :: p3 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEp1p3p5eq HABCDEp1p3p5m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: p1 :: nil) (B :: C :: D :: E :: p1 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p3 :: p5 :: nil) (A :: p1 :: B :: C :: D :: E :: p1 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: D :: E :: p1 :: p3 :: p5 :: nil) ((A :: p1 :: nil) ++ (B :: C :: D :: E :: p1 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p3p5mtmp;try rewrite HT2 in HABCDEp1p3p5mtmp.
	assert(HT := rule_4 (A :: p1 :: nil) (B :: C :: D :: E :: p1 :: p3 :: p5 :: nil) (p1 :: nil) 5 1 1 HABCDEp1p3p5mtmp Hp1mtmp HAp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour BCEp1p3p5 requis par la preuve de (?)BCEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEp1p3p5 requis par la preuve de (?)BCEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEp1p3p5 requis par la preuve de (?)ABCEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p3p5 requis par la preuve de (?)ABCEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p3p5 requis par la preuve de (?)ABCDEApBpp1p3p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p3p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEp1p3p5 requis par la preuve de (?)ABCEp1p3p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p5 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCEp1p3p5m2 : rk(A :: B :: C :: E :: p1 :: p3 :: p5 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpp1p3p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p3p5eq HABCDEApBpp1p3p5m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: p1 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p5 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: p1 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: p1 :: p3 :: p5 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: p1 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p3p5mtmp;try rewrite HT2 in HABCDEApBpp1p3p5mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: p1 :: p3 :: p5 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpp1p3p5mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCEp1p3p5m3 : rk(A :: B :: C :: E :: p1 :: p3 :: p5 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p3p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p5eq HABCDECpp1p3p5m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: p1 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 :: nil) (D :: Cp :: A :: B :: C :: E :: p1 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: p1 :: p3 :: p5 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: p1 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p5mtmp;try rewrite HT2 in HABCDECpp1p3p5mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: p1 :: p3 :: p5 :: nil) (nil) 5 0 2 HABCDECpp1p3p5mtmp Hmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour BCEp1p3p5 requis par la preuve de (?)BCEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ADECp requis par la preuve de (?)BCEp1p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ADECpp1 requis par la preuve de (?)ADECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDECpp1 requis par la preuve de (?)ADECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ACDECpp1 requis par la preuve de (?)ACDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEp1m3 : rk(A :: C :: D :: E :: p1 :: nil) >= 3).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDECpp1 requis par la preuve de (?)ACDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDECpp1 requis par la preuve de (?)ACDECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDECpp1m2 : rk(A :: C :: D :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: Cp :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: Cp :: p1 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpCpp1mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDECpp1M5 : rk(A :: C :: D :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: C :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDECpp1m4 : rk(A :: C :: D :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: Cp :: A :: C :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: Cp :: p1 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HBCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADECpp1 requis par la preuve de (?)ADECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ADECpp1 requis par la preuve de (?)ADECpp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADECpp1M4 : rk(A :: D :: E :: Cp :: p1 :: nil) <= 4).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: D :: E :: p1 :: nil) (nil) 1 3 0 HCpMtmp HADEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Cp :: p1 ::  de rang :  4 et 5 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HADECpp1m3 : rk(A :: D :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HACDECpp1mtmp : rk(A :: C :: D :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HACDECpp1eq HACDECpp1m4).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Cp :: p1 :: nil) (C :: Cp :: A :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: D :: E :: Cp :: p1 :: nil) ((C :: Cp :: nil) ++ (A :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDECpp1mtmp;try rewrite HT2 in HACDECpp1mtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 4 1 2 HACDECpp1mtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ADECp requis par la preuve de (?)ADECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADCp requis par la preuve de (?)ADECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADCp requis par la preuve de (?)ADCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HADCpm2 : rk(A :: D :: Cp :: nil) >= 2).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HADECpp1mtmp : rk(A :: D :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HADECpp1eq HADECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: D :: Cp :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: Cp :: p1 :: nil) (A :: D :: Cp :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: Cp :: A :: E :: p1 :: nil) ((A :: D :: Cp :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADECpp1mtmp;try rewrite HT2 in HADECpp1mtmp.
	assert(HT := rule_2 (A :: D :: Cp :: nil) (A :: E :: p1 :: nil) (A :: nil) 3 1 2 HADECpp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADECp requis par la preuve de (?)ADECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: D :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HADECpm2 : rk(A :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HADCpmtmp : rk(A :: D :: Cp :: nil) >= 2) by (solve_hyps_min HADCpeq HADCpm2).
	assert(Hincl : incl (A :: D :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: D :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: D :: E :: Cp :: nil) (A :: D :: Cp :: nil) 5 2 5 HABCDECpmtmp HADCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HADECpm3 : rk(A :: D :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HADECpp1mtmp : rk(A :: D :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HADECpp1eq HADECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: D :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: Cp :: p1 :: nil) (A :: D :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: E :: Cp :: A :: p1 :: nil) ((A :: D :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADECpp1mtmp;try rewrite HT2 in HADECpp1mtmp.
	assert(HT := rule_2 (A :: D :: E :: Cp :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HADECpp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour BCEp1p3p5 requis par la preuve de (?)BCEp1p3p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : A :: D :: E :: Cp ::   de rang : 3 et 4 *)
assert(HBCEp1p3p5m2 : rk(B :: C :: E :: p1 :: p3 :: p5 :: nil) >= 2).
{
	assert(HADECpMtmp : rk(A :: D :: E :: Cp :: nil) <= 4) by (solve_hyps_max HADECpeq HADECpM4).
	assert(HABCDECpp1p3p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p5eq HABCDECpp1p3p5m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (A :: D :: E :: Cp :: nil) (B :: C :: E :: p1 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p5 :: nil) (A :: D :: E :: Cp :: B :: C :: E :: p1 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: E :: Cp :: B :: C :: E :: p1 :: p3 :: p5 :: nil) ((A :: D :: E :: Cp :: nil) ++ (B :: C :: E :: p1 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p5mtmp;try rewrite HT2 in HABCDECpp1p3p5mtmp.
	assert(HT := rule_4 (A :: D :: E :: Cp :: nil) (B :: C :: E :: p1 :: p3 :: p5 :: nil) (E :: nil) 5 1 4 HABCDECpp1p3p5mtmp HEmtmp HADECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: E :: p1 :: p3 :: p5 ::  de rang :  3 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: p1 ::   de rang : 1 et 1 *)
assert(HBCEp1p3p5m3 : rk(B :: C :: E :: p1 :: p3 :: p5 :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEp1p3p5mtmp : rk(A :: B :: C :: E :: p1 :: p3 :: p5 :: nil) >= 3) by (solve_hyps_min HABCEp1p3p5eq HABCEp1p3p5m3).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: p1 :: nil) (B :: C :: E :: p1 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: p3 :: p5 :: nil) (A :: p1 :: B :: C :: E :: p1 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: E :: p1 :: p3 :: p5 :: nil) ((A :: p1 :: nil) ++ (B :: C :: E :: p1 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEp1p3p5mtmp;try rewrite HT2 in HABCEp1p3p5mtmp.
	assert(HT := rule_4 (A :: p1 :: nil) (B :: C :: E :: p1 :: p3 :: p5 :: nil) (p1 :: nil) 3 1 1 HABCEp1p3p5mtmp Hp1mtmp HAp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : B :: C :: D :: E :: p1 :: p3 :: p5 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : D :: p1 ::   de rang : 2 et 2 *)
assert(HBCEp1p3p5m4 : rk(B :: C :: E :: p1 :: p3 :: p5 :: nil) >= 4).
{
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HDp1Mtmp : rk(D :: p1 :: nil) <= 2) by (solve_hyps_max HDp1eq HDp1M2).
	assert(HBCDEp1p3p5mtmp : rk(B :: C :: D :: E :: p1 :: p3 :: p5 :: nil) >= 5) by (solve_hyps_min HBCDEp1p3p5eq HBCDEp1p3p5m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (B :: C :: E :: p1 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (B :: C :: D :: E :: p1 :: p3 :: p5 :: nil) (D :: p1 :: B :: C :: E :: p1 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: B :: C :: E :: p1 :: p3 :: p5 :: nil) ((D :: p1 :: nil) ++ (B :: C :: E :: p1 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HBCDEp1p3p5mtmp;try rewrite HT2 in HBCDEp1p3p5mtmp.
	assert(HT := rule_4 (D :: p1 :: nil) (B :: C :: E :: p1 :: p3 :: p5 :: nil) (p1 :: nil) 5 1 2 HBCDEp1p3p5mtmp Hp1mtmp HDp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCp3p5 requis par la preuve de (?)BCp3p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 4*)
(* ensembles concernés AUB : B :: C :: E :: p1 :: p3 :: p5 ::  de rang :  4 et 6 	 AiB :  de rang :  0 et 0 	 A : E :: p1 ::   de rang : 2 et 2 *)
assert(HBCp3p5m2 : rk(B :: C :: p3 :: p5 :: nil) >= 2).
{
	assert(HEp1eq : rk(E :: p1 :: nil) = 2) by (apply LEp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HEp1Mtmp : rk(E :: p1 :: nil) <= 2) by (solve_hyps_max HEp1eq HEp1M2).
	assert(HBCEp1p3p5mtmp : rk(B :: C :: E :: p1 :: p3 :: p5 :: nil) >= 4) by (solve_hyps_min HBCEp1p3p5eq HBCEp1p3p5m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: p1 :: nil) (B :: C :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (B :: C :: E :: p1 :: p3 :: p5 :: nil) (E :: p1 :: B :: C :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: p1 :: B :: C :: p3 :: p5 :: nil) ((E :: p1 :: nil) ++ (B :: C :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HBCEp1p3p5mtmp;try rewrite HT2 in HBCEp1p3p5mtmp.
	assert(HT := rule_4 (E :: p1 :: nil) (B :: C :: p3 :: p5 :: nil) (nil) 4 0 2 HBCEp1p3p5mtmp Hmtmp HEp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour BCp1p2p3p5 requis par la preuve de (?)BCp1p2p3p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour BCp1p2p3p5 requis par la preuve de (?)BCp1p2p3p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCp1p2p3p5 requis par la preuve de (?)BCp1p2p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCECpp1p2p3p5 requis par la preuve de (?)ABCp1p2p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p3p5 requis par la preuve de (?)ABCECpp1p2p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p3p5 requis par la preuve de (?)ABCDECpp1p2p3p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p3p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCECpp1p2p3p5 requis par la preuve de (?)ABCECpp1p2p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCECpp1p2p3p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpm2 : rk(A :: B :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpm4 : rk(A :: B :: D :: E :: Cp :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCCpm2 : rk(A :: B :: C :: Cp :: nil) >= 2).
{
	assert(HABDECpMtmp : rk(A :: B :: D :: E :: Cp :: nil) <= 5) by (solve_hyps_max HABDECpeq HABDECpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABDECpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCCpm3 : rk(A :: B :: C :: Cp :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDECpp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1p2p3p5 requis par la preuve de (?)ABCECpp1p2p3p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1p2p3p5 requis par la preuve de (?)ABCECpp1p2p3p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1p2p3p5 requis par la preuve de (?)ABCDEApBpCpp1p2p3p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1p2p3p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1p2p3p5 requis par la preuve de (?)ABCECpp1p2p3p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p5 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1p2p3p5m2 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp1p2p3p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1p2p3p5eq HABCDEApBpCpp1p2p3p5m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1p2p3p5mtmp;try rewrite HT2 in HABCDEApBpCpp1p2p3p5mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1p2p3p5mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp1p2p3p5m3 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p5 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1p2p3p5m4 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p2p3p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p5eq HABCDECpp1p2p3p5m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p5mtmp;try rewrite HT2 in HABCDECpp1p2p3p5mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1p2p3p5mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCp1p2p3p5 requis par la preuve de (?)ABCp1p2p3p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 ::  de rang :  4 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABCp1p2p3p5m2 : rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCECpp1p2p3p5mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) >= 4) by (solve_hyps_min HABCECpp1p2p3p5eq HABCECpp1p2p3p5m4).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p5 :: nil) (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1p2p3p5mtmp;try rewrite HT2 in HABCECpp1p2p3p5mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) (A :: B :: nil) 4 2 4 HABCECpp1p2p3p5mtmp HABmtmp HABECpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour BCp1p2p3p5 requis par la preuve de (?)BCp1p2p3p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: p1 :: p2 :: p3 :: p5 ::  de rang :  2 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: p1 ::   de rang : 1 et 1 *)
assert(HBCp1p2p3p5m2 : rk(B :: C :: p1 :: p2 :: p3 :: p5 :: nil) >= 2).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCp1p2p3p5mtmp : rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) >= 2) by (solve_hyps_min HABCp1p2p3p5eq HABCp1p2p3p5m2).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: p1 :: nil) (B :: C :: p1 :: p2 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) (A :: p1 :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) ((A :: p1 :: nil) ++ (B :: C :: p1 :: p2 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp1p2p3p5mtmp;try rewrite HT2 in HABCp1p2p3p5mtmp.
	assert(HT := rule_4 (A :: p1 :: nil) (B :: C :: p1 :: p2 :: p3 :: p5 :: nil) (p1 :: nil) 2 1 1 HABCp1p2p3p5mtmp Hp1mtmp HAp1Mtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HBCp1p2p3p5m3 : rk(B :: C :: p1 :: p2 :: p3 :: p5 :: nil) >= 3).
{
	assert(HBCp1eq : rk(B :: C :: p1 :: nil) = 3) by (apply LBCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1mtmp : rk(B :: C :: p1 :: nil) >= 3) by (solve_hyps_min HBCp1eq HBCp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (B :: C :: p1 :: nil) (B :: C :: p1 :: p2 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (B :: C :: p1 :: nil) (B :: C :: p1 :: p2 :: p3 :: p5 :: nil) 3 3 HBCp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : 4 5 et 5*)
assert(HBCp1p2p3p5M5 : rk(B :: C :: p1 :: p2 :: p3 :: p5 :: nil) <= 5).
{
	assert(Hp1p2eq : rk(p1 :: p2 :: nil) = 1) by (apply Lp1p2 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(Hp1p2Mtmp : rk(p1 :: p2 :: nil) <= 1) by (solve_hyps_max Hp1p2eq Hp1p2M1).
	assert(HBCp3p5Mtmp : rk(B :: C :: p3 :: p5 :: nil) <= 4) by (solve_hyps_max HBCp3p5eq HBCp3p5M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: p2 :: nil) (B :: C :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (B :: C :: p1 :: p2 :: p3 :: p5 :: nil) (p1 :: p2 :: B :: C :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: p2 :: B :: C :: p3 :: p5 :: nil) ((p1 :: p2 :: nil) ++ (B :: C :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: p2 :: nil) (B :: C :: p3 :: p5 :: nil) (nil) 1 4 0 Hp1p2Mtmp HBCp3p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 4 et 5*)
assert(HBCp1p2p3p5M4 : rk(B :: C :: p1 :: p2 :: p3 :: p5 :: nil) <= 4).
{
	assert(Hp3Mtmp : rk(p3 :: nil) <= 1) by (solve_hyps_max Hp3eq Hp3M1).
	assert(HBCp1p2p5eq : rk(B :: C :: p1 :: p2 :: p5 :: nil) = 3) by (apply LBCp1p2p5 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1p2p5Mtmp : rk(B :: C :: p1 :: p2 :: p5 :: nil) <= 3) by (solve_hyps_max HBCp1p2p5eq HBCp1p2p5M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p3 :: nil) (B :: C :: p1 :: p2 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (B :: C :: p1 :: p2 :: p3 :: p5 :: nil) (p3 :: B :: C :: p1 :: p2 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p3 :: B :: C :: p1 :: p2 :: p5 :: nil) ((p3 :: nil) ++ (B :: C :: p1 :: p2 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p3 :: nil) (B :: C :: p1 :: p2 :: p5 :: nil) (nil) 1 3 0 Hp3Mtmp HBCp1p2p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 4 et 4*)
(* ensembles concernés AUB : A :: B :: C :: p1 :: p2 :: p3 :: p5 ::  de rang :  4 et 4 	 AiB : p1 :: p3 ::  de rang :  2 et 2 	 A : A :: p1 :: p3 ::   de rang : 2 et 2 *)
assert(HBCp1p2p3p5m4 : rk(B :: C :: p1 :: p2 :: p3 :: p5 :: nil) >= 4).
{
	assert(HAp1p3eq : rk(A :: p1 :: p3 :: nil) = 2) by (apply LAp1p3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAp1p3Mtmp : rk(A :: p1 :: p3 :: nil) <= 2) by (solve_hyps_max HAp1p3eq HAp1p3M2).
	assert(HABCp1p2p3p5eq : rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) = 4) by (apply LABCp1p2p3p5 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCp1p2p3p5mtmp : rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) >= 4) by (solve_hyps_min HABCp1p2p3p5eq HABCp1p2p3p5m4).
	assert(Hp1p3eq : rk(p1 :: p3 :: nil) = 2) by (apply Lp1p3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(Hp1p3mtmp : rk(p1 :: p3 :: nil) >= 2) by (solve_hyps_min Hp1p3eq Hp1p3m2).
	assert(Hincl : incl (p1 :: p3 :: nil) (list_inter (A :: p1 :: p3 :: nil) (B :: C :: p1 :: p2 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) (A :: p1 :: p3 :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: p3 :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) ((A :: p1 :: p3 :: nil) ++ (B :: C :: p1 :: p2 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp1p2p3p5mtmp;try rewrite HT2 in HABCp1p2p3p5mtmp.
	assert(HT := rule_4 (A :: p1 :: p3 :: nil) (B :: C :: p1 :: p2 :: p3 :: p5 :: nil) (p1 :: p3 :: nil) 4 2 2 HABCp1p2p3p5mtmp Hp1p3mtmp HAp1p3Mtmp Hincl); apply HT.
}

assert(HBCp1p2p3p5M : rk(B :: C :: p1 :: p2 :: p3 :: p5 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HBCp1p2p3p5m : rk(B :: C :: p1 :: p2 :: p3 :: p5 ::  nil) >= 1) by (solve_hyps_min HBCp1p2p3p5eq HBCp1p2p3p5m1).
intuition.
Qed.

(* dans constructLemma(), requis par LBCp1p2p3p4p5 *)
(* dans constructLemma(), requis par LABCp1p2p3p4p5 *)
(* dans la couche 0 *)
Lemma LABCEp1p2p3p4p5 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 ::  nil) = 5.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEp1p2p3p4p5 requis par la preuve de (?)ABCEp1p2p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p2p3p4p5 requis par la preuve de (?)ABCEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p2p3p4p5 requis par la preuve de (?)ABCDEp1p2p3p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p2p3p4p5m5 : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEp1p2p3p4p5 requis par la preuve de (?)ABCEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEp1p2p3p4p5 requis par la preuve de (?)ABCEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p3p4p5 requis par la preuve de (?)ABCEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p3p4p5 requis par la preuve de (?)ABCDECpp1p2p3p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p3p4p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEp1p2p3p4p5 requis par la preuve de (?)ABCEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p2p3p4p5 requis par la preuve de (?)ABCEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p2p3p4p5 requis par la preuve de (?)ABCDEApBpp1p2p3p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p2p3p4p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEp1p2p3p4p5 requis par la preuve de (?)ABCEp1p2p3p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCEp1p2p3p4p5m2 : rk(A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpp1p2p3p4p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p2p3p4p5eq HABCDEApBpp1p2p3p4p5m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p2p3p4p5mtmp;try rewrite HT2 in HABCDEApBpp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpp1p2p3p4p5mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCEp1p2p3p4p5m3 : rk(A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p2p3p4p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p4p5eq HABCDECpp1p2p3p4p5m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (D :: Cp :: A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p4p5mtmp;try rewrite HT2 in HABCDECpp1p2p3p4p5mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (nil) 5 0 2 HABCDECpp1p2p3p4p5mtmp Hmtmp HDCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : D :: p1 ::   de rang : 2 et 2 *)
assert(HABCEp1p2p3p4p5m4 : rk(A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 4).
{
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HDp1Mtmp : rk(D :: p1 :: nil) <= 2) by (solve_hyps_max HDp1eq HDp1M2).
	assert(HABCDEp1p2p3p4p5mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p3p4p5eq HABCDEp1p2p3p4p5m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (D :: p1 :: A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((D :: p1 :: nil) ++ (A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p3p4p5mtmp;try rewrite HT2 in HABCDEp1p2p3p4p5mtmp.
	assert(HT := rule_4 (D :: p1 :: nil) (A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p2p3p4p5mtmp Hp1mtmp HDp1Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : A :: p3 ::  de rang :  2 et 2 	 A : A :: D :: p3 ::   de rang : 2 et 2 *)
assert(HABCEp1p2p3p4p5m5 : rk(A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(HABCDEp1p2p3p4p5mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p3p4p5eq HABCDEp1p2p3p4p5m5).
	assert(HAp3mtmp : rk(A :: p3 :: nil) >= 2) by (solve_hyps_min HAp3eq HAp3m2).
	assert(Hincl : incl (A :: p3 :: nil) (list_inter (A :: D :: p3 :: nil) (A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: D :: p3 :: A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p3 :: A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: D :: p3 :: nil) ++ (A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p3p4p5mtmp;try rewrite HT2 in HABCDEp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: D :: p3 :: nil) (A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: p3 :: nil) 5 2 2 HABCDEp1p2p3p4p5mtmp HAp3mtmp HADp3Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 4 et -2*)
assert(HABCEp1p2p3p4p5M5 : rk(A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) <= 5).
{
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(HABCp1p2p3p5eq : rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) = 4) by (apply LABCp1p2p3p5 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCp1p2p3p5Mtmp : rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) <= 4) by (solve_hyps_max HABCp1p2p3p5eq HABCp1p2p3p5M4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: E :: p4 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: E :: p4 :: A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: E :: p4 :: A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) ((A :: E :: p4 :: nil) ++ (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: E :: p4 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) (A :: nil) 2 4 1 HAEp4Mtmp HABCp1p2p3p5Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

assert(HABCEp1p2p3p4p5M : rk(A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HABCEp1p2p3p4p5m : rk(A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 ::  nil) >= 1) by (solve_hyps_min HABCEp1p2p3p4p5eq HABCEp1p2p3p4p5m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LABCp1p2p3p4p5 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 ::  nil) = 5.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCp1p2p3p4p5 requis par la preuve de (?)ABCp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCp1p2p3p4p5 requis par la preuve de (?)ABCp1p2p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCp1p2p3p4p5 requis par la preuve de (?)ABCp1p2p3p4p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCp1p2p3p4p5 requis par la preuve de (?)ABCp1p2p3p4p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCECpp1p2p3p4p5 requis par la preuve de (?)ABCp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p3p4p5 requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p3p4p5 requis par la preuve de (?)ABCDECpp1p2p3p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p3p4p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCECpp1p2p3p4p5 requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpm2 : rk(A :: B :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpm4 : rk(A :: B :: D :: E :: Cp :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCCpm2 : rk(A :: B :: C :: Cp :: nil) >= 2).
{
	assert(HABDECpMtmp : rk(A :: B :: D :: E :: Cp :: nil) <= 5) by (solve_hyps_max HABDECpeq HABDECpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABDECpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCCpm3 : rk(A :: B :: C :: Cp :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDECpp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1p2p3p4p5 requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1p2p3p4p5 requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1p2p3p4p5 requis par la preuve de (?)ABCDEApBpCpp1p2p3p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1p2p3p4p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1p2p3p4p5 requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1p2p3p4p5m2 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp1p2p3p4p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1p2p3p4p5eq HABCDEApBpCpp1p2p3p4p5m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1p2p3p4p5mtmp;try rewrite HT2 in HABCDEApBpCpp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1p2p3p4p5mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp1p2p3p4p5m3 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1p2p3p4p5m4 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p2p3p4p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p4p5eq HABCDECpp1p2p3p4p5m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p4p5mtmp;try rewrite HT2 in HABCDECpp1p2p3p4p5mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1p2p3p4p5mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECp requis par la preuve de (?)ABCp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpp1m2 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDECpp1M5 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpp1m4 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABECpp1M4 : rk(A :: B :: E :: Cp :: p1 :: nil) <= 4).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HCpMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABECpp1m2 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) 2 2 HABCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Cp :: p1 ::  de rang :  4 et 5 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABECpp1m3 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABDECpp1mtmp : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABDECpp1eq HABDECpp1m4).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDECpp1mtmp;try rewrite HT2 in HABDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) (Cp :: nil) 4 1 2 HABDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: B :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HABECpm2 : rk(A :: B :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: B :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABECpm3 : rk(A :: B :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABECpp1mtmp : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HABECpp1eq HABECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABECpp1mtmp;try rewrite HT2 in HABECpp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Cp :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABECpp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCp1p2p3p4p5 requis par la preuve de (?)ABCp1p2p3p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  4 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABCp1p2p3p4p5m2 : rk(A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCECpp1p2p3p4p5mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 4) by (solve_hyps_min HABCECpp1p2p3p4p5eq HABCECpp1p2p3p4p5m4).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1p2p3p4p5mtmp;try rewrite HT2 in HABCECpp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: B :: nil) 4 2 4 HABCECpp1p2p3p4p5mtmp HABmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp1p2p3p4p5m3 : rk(A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 3).
{
	assert(HBCp1eq : rk(B :: C :: p1 :: nil) = 3) by (apply LBCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1mtmp : rk(B :: C :: p1 :: nil) >= 3) by (solve_hyps_min HBCp1eq HBCp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 3 3 HBCp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp1p2p3p4p5m4 : rk(A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 4).
{
	assert(HABCp3eq : rk(A :: B :: C :: p3 :: nil) = 4) by (apply LABCp3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCp3mtmp : rk(A :: B :: C :: p3 :: nil) >= 4) by (solve_hyps_min HABCp3eq HABCp3m4).
	assert(Hcomp : 4 <= 4) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: p3 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: p3 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 4 4 HABCp3mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 4 et 5*)
assert(HABCp1p2p3p4p5M5 : rk(A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) <= 5).
{
	assert(Hp4Mtmp : rk(p4 :: nil) <= 1) by (solve_hyps_max Hp4eq Hp4M1).
	assert(HABCp1p2p3p5eq : rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) = 4) by (apply LABCp1p2p3p5 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCp1p2p3p5Mtmp : rk(A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) <= 4) by (solve_hyps_max HABCp1p2p3p5eq HABCp1p2p3p5M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p4 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (p4 :: A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p4 :: A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) ((p4 :: nil) ++ (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p4 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) (nil) 1 4 0 Hp4Mtmp HABCp1p2p3p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 5) *)
(* marque des antécédents AUB AiB A: 4 -4 et -4*)
(* ensembles concernés AUB : A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  5 et 5 	 AiB : A :: p4 ::  de rang :  2 et 2 	 A : A :: E :: p4 ::   de rang : 2 et 2 *)
assert(HABCp1p2p3p4p5m5 : rk(A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(HABCEp1p2p3p4p5eq : rk(A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) = 5) by (apply LABCEp1p2p3p4p5 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCEp1p2p3p4p5mtmp : rk(A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCEp1p2p3p4p5eq HABCEp1p2p3p4p5m5).
	assert(HAp4mtmp : rk(A :: p4 :: nil) >= 2) by (solve_hyps_min HAp4eq HAp4m2).
	assert(Hincl : incl (A :: p4 :: nil) (list_inter (A :: E :: p4 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: E :: p4 :: A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: E :: p4 :: A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: E :: p4 :: nil) ++ (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEp1p2p3p4p5mtmp;try rewrite HT2 in HABCEp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: E :: p4 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: p4 :: nil) 5 2 2 HABCEp1p2p3p4p5mtmp HAp4mtmp HAEp4Mtmp Hincl); apply HT.
}

assert(HABCp1p2p3p4p5M : rk(A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HABCp1p2p3p4p5m : rk(A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 ::  nil) >= 1) by (solve_hyps_min HABCp1p2p3p4p5eq HABCp1p2p3p4p5m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma LBCp1p2p3p4p5 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(B :: C :: p1 :: p2 :: p3 :: p4 :: p5 ::  nil) = 5.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour BCp1p2p3p4p5 requis par la preuve de (?)BCp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour BCp1p2p3p4p5 requis par la preuve de (?)BCp1p2p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCp1p2p3p4p5 requis par la preuve de (?)BCp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCp1p2p3p4p5 requis par la preuve de (?)ABCp1p2p3p4p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCp1p2p3p4p5 requis par la preuve de (?)ABCp1p2p3p4p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCECpp1p2p3p4p5 requis par la preuve de (?)ABCp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p3p4p5 requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p3p4p5 requis par la preuve de (?)ABCDECpp1p2p3p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p3p4p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCECpp1p2p3p4p5 requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpm2 : rk(A :: B :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpm4 : rk(A :: B :: D :: E :: Cp :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCCpm2 : rk(A :: B :: C :: Cp :: nil) >= 2).
{
	assert(HABDECpMtmp : rk(A :: B :: D :: E :: Cp :: nil) <= 5) by (solve_hyps_max HABDECpeq HABDECpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABDECpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCCpm3 : rk(A :: B :: C :: Cp :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDECpp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1p2p3p4p5 requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1p2p3p4p5 requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1p2p3p4p5 requis par la preuve de (?)ABCDEApBpCpp1p2p3p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1p2p3p4p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1p2p3p4p5 requis par la preuve de (?)ABCECpp1p2p3p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1p2p3p4p5m2 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp1p2p3p4p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1p2p3p4p5eq HABCDEApBpCpp1p2p3p4p5m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1p2p3p4p5mtmp;try rewrite HT2 in HABCDEApBpCpp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1p2p3p4p5mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp1p2p3p4p5m3 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1p2p3p4p5m4 : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1p2p3p4p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p4p5eq HABCDECpp1p2p3p4p5m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p4p5mtmp;try rewrite HT2 in HABCDECpp1p2p3p4p5mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1p2p3p4p5mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECp requis par la preuve de (?)ABCp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEp1m3 : rk(A :: B :: D :: E :: p1 :: nil) >= 3).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDECpp1 requis par la preuve de (?)ABDECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpp1m2 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDECpp1M5 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: D :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpp1m4 : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: p1 :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEp1m2 : rk(A :: B :: E :: p1 :: nil) >= 2).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 4 0 2 HABDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABECpp1 requis par la preuve de (?)ABECpp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABECpp1M4 : rk(A :: B :: E :: Cp :: p1 :: nil) <= 4).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HCpMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABECpp1m2 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) 2 2 HABCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Cp :: p1 ::  de rang :  4 et 5 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABECpp1m3 : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABDECpp1mtmp : rk(A :: B :: D :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABDECpp1eq HABDECpp1m4).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDECpp1mtmp;try rewrite HT2 in HABDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: E :: Cp :: p1 :: nil) (Cp :: nil) 4 1 2 HABDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABECp requis par la preuve de (?)ABECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : A :: B :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HABECpm2 : rk(A :: B :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: A :: B :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (A :: B :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (A :: B :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABECpm3 : rk(A :: B :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABECpp1mtmp : rk(A :: B :: E :: Cp :: p1 :: nil) >= 3) by (solve_hyps_min HABECpp1eq HABECpp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Cp :: p1 :: nil) (A :: B :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: p1 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABECpp1mtmp;try rewrite HT2 in HABECpp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Cp :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABECpp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCp1p2p3p4p5 requis par la preuve de (?)ABCp1p2p3p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  4 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Cp ::   de rang : 3 et 4 *)
assert(HABCp1p2p3p4p5m2 : rk(A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 2).
{
	assert(HABECpMtmp : rk(A :: B :: E :: Cp :: nil) <= 4) by (solve_hyps_max HABECpeq HABECpM4).
	assert(HABCECpp1p2p3p4p5mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 4) by (solve_hyps_min HABCECpp1p2p3p4p5eq HABCECpp1p2p3p4p5m4).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Cp :: A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: B :: E :: Cp :: nil) ++ (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1p2p3p4p5mtmp;try rewrite HT2 in HABCECpp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: B :: E :: Cp :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: B :: nil) 4 2 4 HABCECpp1p2p3p4p5mtmp HABmtmp HABECpMtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp1p2p3p4p5m3 : rk(A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 3).
{
	assert(HBCp1eq : rk(B :: C :: p1 :: nil) = 3) by (apply LBCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1mtmp : rk(B :: C :: p1 :: nil) >= 3) by (solve_hyps_min HBCp1eq HBCp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (B :: C :: p1 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 3 3 HBCp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp1p2p3p4p5m4 : rk(A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 4).
{
	assert(HABCp3eq : rk(A :: B :: C :: p3 :: nil) = 4) by (apply LABCp3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCp3mtmp : rk(A :: B :: C :: p3 :: nil) >= 4) by (solve_hyps_min HABCp3eq HABCp3m4).
	assert(Hcomp : 4 <= 4) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: p3 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: p3 :: nil) (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 4 4 HABCp3mtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour BCp1p2p3p4p5 requis par la preuve de (?)BCp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour BCp1p2p3p4p5 requis par la preuve de (?)BCp1p2p3p4p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour BCp1p2p3p4p5 requis par la preuve de (?)BCp1p2p3p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et -4*)
(* ensembles concernés AUB : A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  2 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : A :: p1 ::   de rang : 1 et 1 *)
assert(HBCp1p2p3p4p5m2 : rk(B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 2).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCp1p2p3p4p5mtmp : rk(A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 2) by (solve_hyps_min HABCp1p2p3p4p5eq HABCp1p2p3p4p5m2).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (A :: p1 :: nil) (B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: p1 :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: p1 :: nil) ++ (B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp1p2p3p4p5mtmp;try rewrite HT2 in HABCp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: p1 :: nil) (B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (p1 :: nil) 2 1 1 HABCp1p2p3p4p5mtmp Hp1mtmp HAp1Mtmp Hincl); apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HBCp1p2p3p4p5m3 : rk(B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 3).
{
	assert(HBCp1eq : rk(B :: C :: p1 :: nil) = 3) by (apply LBCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1mtmp : rk(B :: C :: p1 :: nil) >= 3) by (solve_hyps_min HBCp1eq HBCp1m3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (B :: C :: p1 :: nil) (B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (B :: C :: p1 :: nil) (B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 3 3 HBCp1mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 4*)
(* ensembles concernés AUB : A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  4 et 6 	 AiB : p1 :: p3 ::  de rang :  2 et 2 	 A : A :: p1 :: p3 ::   de rang : 2 et 2 *)
assert(HBCp1p2p3p4p5m4 : rk(B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 4).
{
	assert(HAp1p3eq : rk(A :: p1 :: p3 :: nil) = 2) by (apply LAp1p3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAp1p3Mtmp : rk(A :: p1 :: p3 :: nil) <= 2) by (solve_hyps_max HAp1p3eq HAp1p3M2).
	assert(HABCp1p2p3p4p5mtmp : rk(A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 4) by (solve_hyps_min HABCp1p2p3p4p5eq HABCp1p2p3p4p5m4).
	assert(Hp1p3eq : rk(p1 :: p3 :: nil) = 2) by (apply Lp1p3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(Hp1p3mtmp : rk(p1 :: p3 :: nil) >= 2) by (solve_hyps_min Hp1p3eq Hp1p3m2).
	assert(Hincl : incl (p1 :: p3 :: nil) (list_inter (A :: p1 :: p3 :: nil) (B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: p1 :: p3 :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: p3 :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: p1 :: p3 :: nil) ++ (B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp1p2p3p4p5mtmp;try rewrite HT2 in HABCp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: p1 :: p3 :: nil) (B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (p1 :: p3 :: nil) 4 2 2 HABCp1p2p3p4p5mtmp Hp1p3mtmp HAp1p3Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 4 et 5*)
assert(HBCp1p2p3p4p5M5 : rk(B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) <= 5).
{
	assert(Hp4Mtmp : rk(p4 :: nil) <= 1) by (solve_hyps_max Hp4eq Hp4M1).
	assert(HBCp1p2p3p5eq : rk(B :: C :: p1 :: p2 :: p3 :: p5 :: nil) = 4) by (apply LBCp1p2p3p5 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1p2p3p5Mtmp : rk(B :: C :: p1 :: p2 :: p3 :: p5 :: nil) <= 4) by (solve_hyps_max HBCp1p2p3p5eq HBCp1p2p3p5M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p4 :: nil) (B :: C :: p1 :: p2 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (p4 :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p4 :: B :: C :: p1 :: p2 :: p3 :: p5 :: nil) ((p4 :: nil) ++ (B :: C :: p1 :: p2 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p4 :: nil) (B :: C :: p1 :: p2 :: p3 :: p5 :: nil) (nil) 1 4 0 Hp4Mtmp HBCp1p2p3p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 5) *)
(* marque des antécédents AUB AiB A: 4 4 et 4*)
(* ensembles concernés AUB : A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  5 et 5 	 AiB : p1 :: p4 ::  de rang :  2 et 2 	 A : A :: p1 :: p4 ::   de rang : 2 et 2 *)
assert(HBCp1p2p3p4p5m5 : rk(B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HAp1p4eq : rk(A :: p1 :: p4 :: nil) = 2) by (apply LAp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAp1p4Mtmp : rk(A :: p1 :: p4 :: nil) <= 2) by (solve_hyps_max HAp1p4eq HAp1p4M2).
	assert(HABCp1p2p3p4p5eq : rk(A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) = 5) by (apply LABCp1p2p3p4p5 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABCp1p2p3p4p5mtmp : rk(A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCp1p2p3p4p5eq HABCp1p2p3p4p5m5).
	assert(Hp1p4eq : rk(p1 :: p4 :: nil) = 2) by (apply Lp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(Hp1p4mtmp : rk(p1 :: p4 :: nil) >= 2) by (solve_hyps_min Hp1p4eq Hp1p4m2).
	assert(Hincl : incl (p1 :: p4 :: nil) (list_inter (A :: p1 :: p4 :: nil) (B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: p1 :: p4 :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: p4 :: B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: p1 :: p4 :: nil) ++ (B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp1p2p3p4p5mtmp;try rewrite HT2 in HABCp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: p1 :: p4 :: nil) (B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (p1 :: p4 :: nil) 5 2 2 HABCp1p2p3p4p5mtmp Hp1p4mtmp HAp1p4Mtmp Hincl); apply HT.
}

assert(HBCp1p2p3p4p5M : rk(B :: C :: p1 :: p2 :: p3 :: p4 :: p5 ::  nil) <= 6) by (apply rk_upper_dim).
assert(HBCp1p2p3p4p5m : rk(B :: C :: p1 :: p2 :: p3 :: p4 :: p5 ::  nil) >= 1) by (solve_hyps_min HBCp1p2p3p4p5eq HBCp1p2p3p4p5m1).
intuition.
Qed.

(* dans la couche 0 *)
Lemma Lp1p2p3p4p5 : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> rk(p1 :: p2 :: p3 :: p4 :: p5 ::  nil) = 4.
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .

(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour p1p2p3p4p5 requis par la preuve de (?)p1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour Ap1p2p3p4p5 requis par la preuve de (?)p1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour AEp1p2p3p4p5 requis par la preuve de (?)Ap1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour Ap1p2p3p5 requis par la preuve de (?)AEp1p2p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour Ap1p2p3p5 requis par la preuve de (?)Ap1p2p3p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour Ap1p3p5 requis par la preuve de (?)Ap1p2p3p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour p3p5 requis par la preuve de (?)Ap1p3p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour Ap1p3p5 requis par la preuve de (?)Ap1p3p5 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HAp1p3p5M3 : rk(A :: p1 :: p3 :: p5 :: nil) <= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hp3p5Mtmp : rk(p3 :: p5 :: nil) <= 2) by (solve_hyps_max Hp3p5eq Hp3p5M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p3 :: p5 :: nil) (A :: p1 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: p3 :: p5 :: nil) ((A :: p1 :: nil) ++ (p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (p3 :: p5 :: nil) (nil) 1 2 0 HAp1Mtmp Hp3p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour Ap1p2p3p5 requis par la preuve de (?)Ap1p2p3p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour p2p3p5 requis par la preuve de (?)Ap1p2p3p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour Ap1p2p3p5 requis par la preuve de (?)Ap1p2p3p5 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HAp1p2p3p5M4 : rk(A :: p1 :: p2 :: p3 :: p5 :: nil) <= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hp2p3p5Mtmp : rk(p2 :: p3 :: p5 :: nil) <= 3) by (solve_hyps_max Hp2p3p5eq Hp2p3p5M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (p2 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p3 :: p5 :: nil) (A :: p1 :: p2 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: p2 :: p3 :: p5 :: nil) ((A :: p1 :: nil) ++ (p2 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (p2 :: p3 :: p5 :: nil) (nil) 1 3 0 HAp1Mtmp Hp2p3p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HAp1p2p3p5M3 : rk(A :: p1 :: p2 :: p3 :: p5 :: nil) <= 3).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HAp1p3p5Mtmp : rk(A :: p1 :: p3 :: p5 :: nil) <= 3) by (solve_hyps_max HAp1p3p5eq HAp1p3p5M3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p2 :: nil) (A :: p1 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p3 :: p5 :: nil) (A :: p2 :: A :: p1 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: A :: p1 :: p3 :: p5 :: nil) ((A :: p2 :: nil) ++ (A :: p1 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (A :: p1 :: p3 :: p5 :: nil) (A :: nil) 1 3 1 HAp2Mtmp HAp1p3p5Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HAp1p2p3p5m2 : rk(A :: p1 :: p2 :: p3 :: p5 :: nil) >= 2).
{
	assert(HAp3mtmp : rk(A :: p3 :: nil) >= 2) by (solve_hyps_min HAp3eq HAp3m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p3 :: nil) (A :: p1 :: p2 :: p3 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p3 :: nil) (A :: p1 :: p2 :: p3 :: p5 :: nil) 2 2 HAp3mtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour AEp1p2p3p4p5 requis par la preuve de (?)AEp1p2p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ADEp1p2p3p4p5 requis par la preuve de (?)AEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour AEp1p2p4p5 requis par la preuve de (?)ADEp1p2p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour AEp1p4p5 requis par la preuve de (?)AEp1p2p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ADEp1p4p5 requis par la preuve de (?)AEp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p4p5 requis par la preuve de (?)ADEp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p4p5 requis par la preuve de (?)ACDEp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p4p5 requis par la preuve de (?)ABCDEp1p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p4p5m5 : rk(A :: B :: C :: D :: E :: p1 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p4p5 requis par la preuve de (?)ACDEp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p4p5 requis par la preuve de (?)ACDEp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p4p5 requis par la preuve de (?)ABCDECpp1p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p4p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BCp requis par la preuve de (?)ACDEp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p4p5 requis par la preuve de (?)ACDEp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p4p5 requis par la preuve de (?)ACDEp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p4p5 requis par la preuve de (?)ABCDEApBpp1p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p4p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ACDEp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBp requis par la preuve de (?)ABCDEApBp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApp1 requis par la preuve de (?)ABCDEApp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApp1m5 : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DAp requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour BAp requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDEp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACDp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ACp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ACp1 requis par la preuve de (?)ACp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HACp1M2 : rk(A :: C :: p1 :: nil) <= 2).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: p1 :: nil) (C :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: p1 :: nil) ((C :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: p1 :: nil) (nil) 1 1 0 HCMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ACDp1 requis par la preuve de (?)ACDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDp1M3 : rk(A :: C :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HACp1Mtmp : rk(A :: C :: p1 :: nil) <= 2) by (solve_hyps_max HACp1eq HACp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: p1 :: nil) (D :: A :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: C :: p1 :: nil) ((D :: nil) ++ (A :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: C :: p1 :: nil) (nil) 1 2 0 HDMtmp HACp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ACDEp1 requis par la preuve de (?)ACDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEp1M4 : rk(A :: C :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HACDp1Mtmp : rk(A :: C :: D :: p1 :: nil) <= 3) by (solve_hyps_max HACDp1eq HACDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: C :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: nil) (E :: A :: C :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: C :: D :: p1 :: nil) ((E :: nil) ++ (A :: C :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: C :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HACDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEApp1 requis par la preuve de (?)ACDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HACDEApp1M5 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HACDEp1Mtmp : rk(A :: C :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HACDEp1eq HACDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: C :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: C :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: C :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: C :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: C :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HACDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : B :: Ap ::   de rang : 1 et 2 *)
assert(HACDEApp1m4 : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HBApMtmp : rk(B :: Ap :: nil) <= 2) by (solve_hyps_max HBApeq HBApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Ap :: A :: C :: D :: E :: Ap :: p1 :: nil) ((B :: Ap :: nil) ++ (A :: C :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (B :: Ap :: nil) (A :: C :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HBApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CAp requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ADp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ADp1 requis par la preuve de (?)ADp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HADp1M2 : rk(A :: D :: p1 :: nil) <= 2).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: p1 :: nil) (D :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: p1 :: nil) ((D :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: p1 :: nil) (nil) 1 1 0 HDMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ADEp1 requis par la preuve de (?)ADEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HADEp1M3 : rk(A :: D :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: nil) (E :: A :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: D :: p1 :: nil) ((E :: nil) ++ (A :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: D :: p1 :: nil) (nil) 1 2 0 HEMtmp HADp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 3) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: C :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB :  de rang :  0 et 0 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HADEp1m2 : rk(A :: D :: E :: p1 :: nil) >= 2).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HACDEApp1mtmp : rk(A :: C :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HACDEApp1eq HACDEApp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: D :: E :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEApp1mtmp;try rewrite HT2 in HACDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (nil) 4 0 2 HACDEApp1mtmp Hmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABC requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABC pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp2 requis par la preuve de (?)ABCp2 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp2M3 : rk(A :: B :: C :: p2 :: nil) <= 3).
{
	assert(HBMtmp : rk(B :: nil) <= 1) by (solve_hyps_max HBeq HBM1).
	assert(HACp2Mtmp : rk(A :: C :: p2 :: nil) <= 2) by (solve_hyps_max HACp2eq HACp2M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: nil) (A :: C :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (B :: A :: C :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: A :: C :: p2 :: nil) ((B :: nil) ++ (A :: C :: p2 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (B :: nil) (A :: C :: p2 :: nil) (nil) 1 2 0 HBMtmp HACp2Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 4 *)
assert(HABCp2m2 : rk(A :: B :: C :: p2 :: nil) >= 2).
{
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: nil) (A :: B :: C :: p2 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: nil) (A :: B :: C :: p2 :: nil) 2 2 HABmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABC requis par la preuve de (?)ABC pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCm2 : rk(A :: B :: C :: nil) >= 2).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HABCp2mtmp : rk(A :: B :: C :: p2 :: nil) >= 2) by (solve_hyps_min HABCp2eq HABCp2m2).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: nil) (A :: p2 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p2 :: nil) (A :: B :: C :: A :: p2 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: A :: p2 :: nil) ((A :: B :: C :: nil) ++ (A :: p2 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCp2mtmp;try rewrite HT2 in HABCp2mtmp.
	assert(HT := rule_2 (A :: B :: C :: nil) (A :: p2 :: nil) (A :: nil) 2 1 1 HABCp2mtmp HAmtmp HAp2Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEBpCpDpEp requis par la preuve de (?)ABCDEBpCpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEBpCpDpEpm5 : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCAp requis par la preuve de (?)ABCAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCApm2 : rk(A :: B :: C :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCApm3 : rk(A :: B :: C :: Ap :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Ap :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Ap :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDEApp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABAp requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABAp requis par la preuve de (?)ABAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABApm2 : rk(A :: B :: Ap :: nil) >= 2).
{
	assert(HABCDEBpCpDpEpMtmp : rk(A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEBpCpDpEpeq HABCDEBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Ap :: A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: Ap :: nil) ++ (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Ap :: nil) (A :: B :: C :: D :: E :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEBpCpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCp1 requis par la preuve de (?)ABCp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABCp1M3 : rk(A :: B :: C :: p1 :: nil) <= 3).
{
	assert(HCMtmp : rk(C :: nil) <= 1) by (solve_hyps_max HCeq HCM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (C :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: p1 :: nil) (C :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: A :: B :: p1 :: nil) ((C :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (C :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HCMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEp1 requis par la preuve de (?)ABCEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEp1M4 : rk(A :: B :: C :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABCp1Mtmp : rk(A :: B :: C :: p1 :: nil) <= 3) by (solve_hyps_max HABCp1eq HABCp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: C :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: p1 :: nil) (E :: A :: B :: C :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: C :: p1 :: nil) ((E :: nil) ++ (A :: B :: C :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: C :: p1 :: nil) (nil) 1 3 0 HEMtmp HABCp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApp1 requis par la preuve de (?)ABCEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCEApp1M5 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: C :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m2 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCEApp1m3 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) 3 3 HABCApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApp1m4 : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EAp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCD requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDApBpCpDpEp requis par la preuve de (?)ABCDApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: D ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCDApBpCpDpEpm2 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCDmtmp : rk(A :: B :: C :: D :: nil) >= 1) by (solve_hyps_min HABCDeq HABCDm1).
	assert(Hincl : incl (A :: B :: C :: D :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCDmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCDApBpCpDpEpm5 : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCE requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBpCpDpEp requis par la preuve de (?)ABCEApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C :: E ::  de rang :  1 et 4 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCEApBpCpDpEpm2 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 2).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCEmtmp : rk(A :: B :: C :: E :: nil) >= 1) by (solve_hyps_min HABCEeq HABCEm1).
	assert(Hincl : incl (A :: B :: C :: E :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: nil) 6 1 5 HABCDEApBpCpDpEpmtmp HABCEmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 5 et 6) *)
(* marque des antécédents AUB AiB A: -4 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEApBpCpDpEpm5 : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 6 1 2 HABCDEApBpCpDpEpmtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCApBpCpDpEp requis par la preuve de (?)ABCApBpCpDpEp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: -4 5 et -4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  6 et 6 	 AiB : A :: B :: C ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: E ::   de rang : 5 et 5 *)
assert(HABCApBpCpDpEpm3 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 3).
{
	assert(HABCDEMtmp : rk(A :: B :: C :: D :: E :: nil) <= 5) by (solve_hyps_max HABCDEeq HABCDEM5).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCmtmp : rk(A :: B :: C :: nil) >= 2) by (solve_hyps_min HABCeq HABCm2).
	assert(Hincl : incl (A :: B :: C :: nil) (list_inter (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: D :: E :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: nil) 6 2 5 HABCDEApBpCpDpEpmtmp HABCmtmp HABCDEMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : E :: Ap ::   de rang : 1 et 2 *)
assert(HABCApBpCpDpEpm4 : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 4).
{
	assert(HEApMtmp : rk(E :: Ap :: nil) <= 2) by (solve_hyps_max HEApeq HEApM2).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_4 (E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (Ap :: nil) 5 1 2 HABCEApBpCpDpEpmtmp HApmtmp HEApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCEAp requis par la preuve de (?)ABCEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCEApm2 : rk(A :: B :: C :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCEApBpCpDpEpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 5) by (solve_hyps_min HABCEApBpCpDpEpeq HABCEApBpCpDpEpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpCpDpEpmtmp;try rewrite HT2 in HABCEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCEApBpCpDpEpmtmp HABCApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABCEApm3 : rk(A :: B :: C :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: C :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABCApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABCEApm4 : rk(A :: B :: C :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCEApp1mtmp : rk(A :: B :: C :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABCEApp1eq HABCEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: p1 :: nil) (A :: B :: C :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: E :: Ap :: A :: p1 :: nil) ((A :: B :: C :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApp1mtmp;try rewrite HT2 in HABCEApp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABCEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEAp requis par la preuve de (?)ABCDEAp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApm5 : rk(A :: B :: C :: D :: E :: Ap :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCEApBp requis par la preuve de (?)ABCEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCEApBpm3 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCEApmtmp : rk(A :: B :: C :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABCEApeq HABCEApm4).
	assert(Hincl : incl (A :: B :: C :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (A :: B :: C :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABCEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABCEApBpm4 : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: C :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: C :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour EBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCApBp requis par la preuve de (?)ABCApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: C :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABCApBpm2 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABCApmtmp : rk(A :: B :: C :: Ap :: nil) >= 3) by (solve_hyps_min HABCApeq HABCApm3).
	assert(Hincl : incl (A :: B :: C :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: C :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABCApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABCApBpm3 : rk(A :: B :: C :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABCEApBpmtmp : rk(A :: B :: C :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABCEApBpeq HABCEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: C :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: C :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCEApBpmtmp;try rewrite HT2 in HABCEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: C :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABCEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p4p5 requis par la preuve de (?)ACDEp1p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p4p5m2 : rk(A :: C :: D :: E :: p1 :: p4 :: p5 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p4p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p4p5eq HABCDEApBpp1p4p5m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p4 :: p5 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p4 :: p5 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p4p5mtmp;try rewrite HT2 in HABCDEApBpp1p4p5mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p4 :: p5 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p4p5mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p4p5m3 : rk(A :: C :: D :: E :: p1 :: p4 :: p5 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p4p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p4p5eq HABCDECpp1p4p5m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: p5 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p4 :: p5 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p4p5mtmp;try rewrite HT2 in HABCDECpp1p4p5mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p4 :: p5 :: nil) (nil) 5 0 2 HABCDECpp1p4p5mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p4p5m4 : rk(A :: C :: D :: E :: p1 :: p4 :: p5 :: nil) >= 4).
{
	assert(HBp1eq : rk(B :: p1 :: nil) = 2) by (apply LBp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p4p5mtmp : rk(A :: B :: C :: D :: E :: p1 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEp1p4p5eq HABCDEp1p4p5m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p4 :: p5 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p4 :: p5 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p4p5mtmp;try rewrite HT2 in HABCDEp1p4p5mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p4 :: p5 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p4p5mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ADEp1p4p5 requis par la preuve de (?)ADEp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour DEp4p5 requis par la preuve de (?)ADEp1p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADEp1p4p5 requis par la preuve de (?)ADEp1p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour BCECp requis par la preuve de (?)ADEp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1 requis par la preuve de (?)ABCDECpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour DCp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECp requis par la preuve de (?)ABCDECp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpm5 : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpDpEp requis par la preuve de (?)ABCDEApBpDpEp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpDpEpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABCp requis par la preuve de (?)ABCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 4 et 5*)
assert(HABCpm2 : rk(A :: B :: Cp :: nil) >= 2).
{
	assert(HABCDEApBpDpEpMtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDEApBpDpEpeq HABCDEApBpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: Cp :: A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) ((A :: B :: Cp :: nil) ++ (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: Cp :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Dp :: Ep :: nil) (A :: B :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABmtmp HABCDEApBpDpEpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCp requis par la preuve de (?)ABCDEApBpCp pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpm5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDECp requis par la preuve de (?)ABDECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABDECpm2 : rk(A :: B :: D :: E :: Cp :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : C :: Cp ::   de rang : 1 et 2 *)
assert(HABDECpm4 : rk(A :: B :: D :: E :: Cp :: nil) >= 4).
{
	assert(HCCpMtmp : rk(C :: Cp :: nil) <= 2) by (solve_hyps_max HCCpeq HCCpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HCCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABCCp requis par la preuve de (?)ABCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 5 et 5*)
assert(HABCCpm2 : rk(A :: B :: C :: Cp :: nil) >= 2).
{
	assert(HABDECpMtmp : rk(A :: B :: D :: E :: Cp :: nil) <= 5) by (solve_hyps_max HABDECpeq HABDECpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HABCpmtmp : rk(A :: B :: Cp :: nil) >= 2) by (solve_hyps_min HABCpeq HABCpm2).
	assert(Hincl : incl (A :: B :: Cp :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: B :: D :: E :: Cp :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: B :: D :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: B :: D :: E :: Cp :: nil) (A :: B :: Cp :: nil) 5 2 5 HABCDECpmtmp HABCpmtmp HABDECpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCCpm3 : rk(A :: B :: C :: Cp :: nil) >= 3).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((A :: B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (A :: B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (A :: nil) 5 1 3 HABCDECpp1mtmp HAmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABCEp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABCEp1m3 : rk(A :: B :: C :: E :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: C :: E :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 5 0 2 HABCDEApp1mtmp Hmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpCpp1 requis par la preuve de (?)ABCDEApBpCpp1 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpCpp1m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour CBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDEp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABDp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDp1 requis par la preuve de (?)ABDp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABDp1M3 : rk(A :: B :: D :: p1 :: nil) <= 3).
{
	assert(HDMtmp : rk(D :: nil) <= 1) by (solve_hyps_max HDeq HDM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (D :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: p1 :: nil) (D :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: A :: B :: p1 :: nil) ((D :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (D :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HDMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEp1 requis par la preuve de (?)ABDEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEp1M4 : rk(A :: B :: D :: E :: p1 :: nil) <= 4).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABDp1Mtmp : rk(A :: B :: D :: p1 :: nil) <= 3) by (solve_hyps_max HABDp1eq HABDp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: D :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: p1 :: nil) (E :: A :: B :: D :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: D :: p1 :: nil) ((E :: nil) ++ (A :: B :: D :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: D :: p1 :: nil) (nil) 1 3 0 HEMtmp HABDp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApp1 requis par la preuve de (?)ABDEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABDEApp1M5 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) <= 5).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABDEp1Mtmp : rk(A :: B :: D :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABDEp1eq HABDEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: D :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: D :: E :: p1 :: nil) (nil) 1 4 0 HApMtmp HABDEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABDEApp1m2 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: p1 ::  de rang :  5 et 6 	 AiB : Ap ::  de rang :  1 et 1 	 A : C :: Ap ::   de rang : 1 et 2 *)
assert(HABDEApp1m4 : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4).
{
	assert(HCApMtmp : rk(C :: Ap :: nil) <= 2) by (solve_hyps_max HCApeq HCApM2).
	assert(HABCDEApp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApp1eq HABCDEApp1m5).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: p1 :: nil) (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Ap :: A :: B :: D :: E :: Ap :: p1 :: nil) ((C :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApp1mtmp;try rewrite HT2 in HABCDEApp1mtmp.
	assert(HT := rule_4 (C :: Ap :: nil) (A :: B :: D :: E :: Ap :: p1 :: nil) (Ap :: nil) 5 1 2 HABCDEApp1mtmp HApmtmp HCApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour AEp1 requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour AEp1 requis par la preuve de (?)AEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HAEp1M2 : rk(A :: E :: p1 :: nil) <= 2).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: nil) (E :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: p1 :: nil) ((E :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: p1 :: nil) (nil) 1 1 0 HEMtmp HAp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABDAp requis par la preuve de (?)ABDAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDApm2 : rk(A :: B :: D :: Ap :: nil) >= 2).
{
	assert(HABCEApBpCpDpEpMtmp : rk(A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCEApBpCpDpEpeq HABCEApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: B :: C :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCEApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABDApm3 : rk(A :: B :: D :: Ap :: nil) >= 3).
{
	assert(HAEp1Mtmp : rk(A :: E :: p1 :: nil) <= 2) by (solve_hyps_max HAEp1eq HAEp1M2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: Ap :: A :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: A :: E :: p1 :: nil) ((A :: B :: D :: Ap :: nil) ++ (A :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: Ap :: nil) (A :: E :: p1 :: nil) (A :: nil) 4 1 2 HABDEApp1mtmp HAmtmp HAEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDEAp requis par la preuve de (?)ABDEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm2 : rk(A :: B :: D :: E :: Ap :: nil) >= 2).
{
	assert(HABCApBpCpDpEpMtmp : rk(A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCApBpCpDpEpeq HABCApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABDEApm3 : rk(A :: B :: D :: E :: Ap :: nil) >= 3).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: D :: Ap :: nil) 6 3 6 HABCDEApBpCpDpEpmtmp HABDApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABDEApm4 : rk(A :: B :: D :: E :: Ap :: nil) >= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (A :: B :: D :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: E :: Ap :: A :: p1 :: nil) ((A :: B :: D :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_2 (A :: B :: D :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 4 1 1 HABDEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABDEApBp requis par la preuve de (?)ABDEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: E :: Ap ::  de rang :  4 et 5 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDEApBpm3 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDEApmtmp : rk(A :: B :: D :: E :: Ap :: nil) >= 4) by (solve_hyps_min HABDEApeq HABDEApm4).
	assert(Hincl : incl (A :: B :: D :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (A :: B :: D :: E :: Ap :: nil) 5 4 6 HABCDEApBpmtmp HABDEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : C :: Bp ::   de rang : 1 et 2 *)
assert(HABDEApBpm4 : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4).
{
	assert(HCBpMtmp : rk(C :: Bp :: nil) <= 2) by (solve_hyps_max HCBpeq HCBpM2).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: Bp :: A :: B :: D :: E :: Ap :: Bp :: nil) ((C :: Bp :: nil) ++ (A :: B :: D :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (C :: Bp :: nil) (A :: B :: D :: E :: Ap :: Bp :: nil) (Bp :: nil) 5 1 2 HABCDEApBpmtmp HBpmtmp HCBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABDApBp requis par la preuve de (?)ABDApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: D :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABDApBpm2 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABDApmtmp : rk(A :: B :: D :: Ap :: nil) >= 3) by (solve_hyps_min HABDApeq HABDApm3).
	assert(Hincl : incl (A :: B :: D :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: D :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: D :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABDApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : E :: Bp ::   de rang : 1 et 2 *)
assert(HABDApBpm3 : rk(A :: B :: D :: Ap :: Bp :: nil) >= 3).
{
	assert(HEBpMtmp : rk(E :: Bp :: nil) <= 2) by (solve_hyps_max HEBpeq HEBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: Bp :: A :: B :: D :: Ap :: Bp :: nil) ((E :: Bp :: nil) ++ (A :: B :: D :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (E :: Bp :: nil) (A :: B :: D :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HEBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCECpp1 requis par la preuve de (?)ABCECpp1 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: D :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCECpp1m2 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 2).
{
	assert(HABDApBpMtmp : rk(A :: B :: D :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABDApBpeq HABDApBpM5).
	assert(HABCDEApBpCpp1mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpp1eq HABCDEApBpCpp1m5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: p1 :: nil) (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: D :: Ap :: Bp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((A :: B :: D :: Ap :: Bp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpp1mtmp;try rewrite HT2 in HABCDEApBpCpp1mtmp.
	assert(HT := rule_4 (A :: B :: D :: Ap :: Bp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpp1mtmp HABmtmp HABDApBpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABCECpp1M5 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) <= 5).
{
	assert(HCpMtmp : rk(Cp :: nil) <= 1) by (solve_hyps_max HCpeq HCpM1).
	assert(HABCEp1Mtmp : rk(A :: B :: C :: E :: p1 :: nil) <= 4) by (solve_hyps_max HABCEp1eq HABCEp1M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Cp :: nil) (A :: B :: C :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: A :: B :: C :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Cp :: A :: B :: C :: E :: p1 :: nil) ((Cp :: nil) ++ (A :: B :: C :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Cp :: nil) (A :: B :: C :: E :: p1 :: nil) (nil) 1 4 0 HCpMtmp HABCEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABCECpp1m3 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 3).
{
	assert(HABCCpmtmp : rk(A :: B :: C :: Cp :: nil) >= 3) by (solve_hyps_min HABCCpeq HABCCpm3).
	assert(Hcomp : 3 <= 3) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) 3 3 HABCCpmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 ::  de rang :  5 et 6 	 AiB : Cp ::  de rang :  1 et 1 	 A : D :: Cp ::   de rang : 1 et 2 *)
assert(HABCECpp1m4 : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4).
{
	assert(HDCpMtmp : rk(D :: Cp :: nil) <= 2) by (solve_hyps_max HDCpeq HDCpM2).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Cp :: A :: B :: C :: E :: Cp :: p1 :: nil) ((D :: Cp :: nil) ++ (A :: B :: C :: E :: Cp :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_4 (D :: Cp :: nil) (A :: B :: C :: E :: Cp :: p1 :: nil) (Cp :: nil) 5 1 2 HABCDECpp1mtmp HCpmtmp HDCpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 3 pour BCCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour BCCp requis par la preuve de (?)BCCp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -1 et 5*)
assert(HBCCpm2 : rk(B :: C :: Cp :: nil) >= 2).
{
	assert(HADEp1Mtmp : rk(A :: D :: E :: p1 :: nil) <= 3) by (solve_hyps_max HADEp1eq HADEp1M3).
	assert(HABCDECpp1mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: nil) >= 5) by (solve_hyps_min HABCDECpp1eq HABCDECpp1m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: nil) (B :: C :: Cp :: A :: D :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: Cp :: A :: D :: E :: p1 :: nil) ((B :: C :: Cp :: nil) ++ (A :: D :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1mtmp;try rewrite HT2 in HABCDECpp1mtmp.
	assert(HT := rule_2 (B :: C :: Cp :: nil) (A :: D :: E :: p1 :: nil) (nil) 5 0 3 HABCDECpp1mtmp Hmtmp HADEp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 4 <= rg <= 5 pour ABCDCp requis par la preuve de (?)BCECp pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour ECp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 2  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour ABEp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEp1 requis par la preuve de (?)ABEp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 -4 et 5*)
assert(HABEp1M3 : rk(A :: B :: E :: p1 :: nil) <= 3).
{
	assert(HEMtmp : rk(E :: nil) <= 1) by (solve_hyps_max HEeq HEM1).
	assert(HABp1Mtmp : rk(A :: B :: p1 :: nil) <= 2) by (solve_hyps_max HABp1eq HABp1M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (E :: nil) (A :: B :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: p1 :: nil) (E :: A :: B :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (E :: A :: B :: p1 :: nil) ((E :: nil) ++ (A :: B :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (E :: nil) (A :: B :: p1 :: nil) (nil) 1 2 0 HEMtmp HABp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApp1 requis par la preuve de (?)ABEApp1 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -2 5 et 5*)
assert(HABEApp1M4 : rk(A :: B :: E :: Ap :: p1 :: nil) <= 4).
{
	assert(HApMtmp : rk(Ap :: nil) <= 1) by (solve_hyps_max HApeq HApM1).
	assert(HABEp1Mtmp : rk(A :: B :: E :: p1 :: nil) <= 3) by (solve_hyps_max HABEp1eq HABEp1M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (Ap :: nil) (A :: B :: E :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (Ap :: A :: B :: E :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (Ap :: A :: B :: E :: p1 :: nil) ((Ap :: nil) ++ (A :: B :: E :: p1 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (Ap :: nil) (A :: B :: E :: p1 :: nil) (nil) 1 3 0 HApMtmp HABEp1Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : 5 *)
assert(HABEApp1m2 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 2).
{
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) 2 2 HABApmtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: p1 ::  de rang :  4 et 5 	 AiB : Ap ::  de rang :  1 et 1 	 A : D :: Ap ::   de rang : 1 et 2 *)
assert(HABEApp1m3 : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3).
{
	assert(HDApMtmp : rk(D :: Ap :: nil) <= 2) by (solve_hyps_max HDApeq HDApM2).
	assert(HABDEApp1mtmp : rk(A :: B :: D :: E :: Ap :: p1 :: nil) >= 4) by (solve_hyps_min HABDEApp1eq HABDEApp1m4).
	assert(HApmtmp : rk(Ap :: nil) >= 1) by (solve_hyps_min HApeq HApm1).
	assert(Hincl : incl (Ap :: nil) (list_inter (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: p1 :: nil) (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Ap :: A :: B :: E :: Ap :: p1 :: nil) ((D :: Ap :: nil) ++ (A :: B :: E :: Ap :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApp1mtmp;try rewrite HT2 in HABDEApp1mtmp.
	assert(HT := rule_4 (D :: Ap :: nil) (A :: B :: E :: Ap :: p1 :: nil) (Ap :: nil) 4 1 2 HABDEApp1mtmp HApmtmp HDApMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour ABEAp requis par la preuve de (?)ABEAp pour la règle 2  *)
(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: -4 5 et 5*)
assert(HABEApm2 : rk(A :: B :: E :: Ap :: nil) >= 2).
{
	assert(HABCDApBpCpDpEpMtmp : rk(A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) <= 6) by (solve_hyps_max HABCDApBpCpDpEpeq HABCDApBpCpDpEpM6).
	assert(HABCDEApBpCpDpEpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) >= 6) by (solve_hyps_min HABCDEApBpCpDpEpeq HABCDEApBpCpDpEpm6).
	assert(HABApmtmp : rk(A :: B :: Ap :: nil) >= 2) by (solve_hyps_min HABApeq HABApm2).
	assert(Hincl : incl (A :: B :: Ap :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpDpEpmtmp;try rewrite HT2 in HABCDEApBpCpDpEpmtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: B :: C :: D :: Ap :: Bp :: Cp :: Dp :: Ep :: nil) (A :: B :: Ap :: nil) 6 2 6 HABCDEApBpCpDpEpmtmp HABApmtmp HABCDApBpCpDpEpMtmp Hincl);apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et -4*)
assert(HABEApm3 : rk(A :: B :: E :: Ap :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABEApp1mtmp : rk(A :: B :: E :: Ap :: p1 :: nil) >= 3) by (solve_hyps_min HABEApp1eq HABEApp1m3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: B :: E :: Ap :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: E :: Ap :: p1 :: nil) (A :: B :: E :: Ap :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: A :: p1 :: nil) ((A :: B :: E :: Ap :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABEApp1mtmp;try rewrite HT2 in HABEApp1mtmp.
	assert(HT := rule_2 (A :: B :: E :: Ap :: nil) (A :: p1 :: nil) (A :: nil) 3 1 1 HABEApp1mtmp HAmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABEApBp requis par la preuve de (?)ABEApBp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp ::  de rang :  5 et 6 	 AiB : A :: B :: E :: Ap ::  de rang :  3 et 4 	 A : A :: B :: C :: D :: E :: Ap ::   de rang : 5 et 6 *)
assert(HABEApBpm2 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 2).
{
	assert(HABCDEApMtmp : rk(A :: B :: C :: D :: E :: Ap :: nil) <= 6) by (solve_hyps_max HABCDEApeq HABCDEApM6).
	assert(HABCDEApBpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: nil) >= 5) by (solve_hyps_min HABCDEApBpeq HABCDEApBpm5).
	assert(HABEApmtmp : rk(A :: B :: E :: Ap :: nil) >= 3) by (solve_hyps_min HABEApeq HABEApm3).
	assert(Hincl : incl (A :: B :: E :: Ap :: nil) (list_inter (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: E :: Ap :: A :: B :: E :: Ap :: Bp :: nil) ((A :: B :: C :: D :: E :: Ap :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpmtmp;try rewrite HT2 in HABCDEApBpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: E :: Ap :: nil) (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: E :: Ap :: nil) 5 3 6 HABCDEApBpmtmp HABEApmtmp HABCDEApMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: D :: E :: Ap :: Bp ::  de rang :  4 et 6 	 AiB : Bp ::  de rang :  1 et 1 	 A : D :: Bp ::   de rang : 1 et 2 *)
assert(HABEApBpm3 : rk(A :: B :: E :: Ap :: Bp :: nil) >= 3).
{
	assert(HDBpMtmp : rk(D :: Bp :: nil) <= 2) by (solve_hyps_max HDBpeq HDBpM2).
	assert(HABDEApBpmtmp : rk(A :: B :: D :: E :: Ap :: Bp :: nil) >= 4) by (solve_hyps_min HABDEApBpeq HABDEApBpm4).
	assert(HBpmtmp : rk(Bp :: nil) >= 1) by (solve_hyps_min HBpeq HBpm1).
	assert(Hincl : incl (Bp :: nil) (list_inter (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: D :: E :: Ap :: Bp :: nil) (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: Bp :: A :: B :: E :: Ap :: Bp :: nil) ((D :: Bp :: nil) ++ (A :: B :: E :: Ap :: Bp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABDEApBpmtmp;try rewrite HT2 in HABDEApBpmtmp.
	assert(HT := rule_4 (D :: Bp :: nil) (A :: B :: E :: Ap :: Bp :: nil) (Bp :: nil) 4 1 2 HABDEApBpmtmp HBpmtmp HDBpMtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour ABCDCp requis par la preuve de (?)ABCDCp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: Cp ::  de rang :  5 et 6 	 AiB : A :: B ::  de rang :  2 et 2 	 A : A :: B :: E :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HABCDCpm2 : rk(A :: B :: C :: D :: Cp :: nil) >= 2).
{
	assert(HABEApBpMtmp : rk(A :: B :: E :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABEApBpeq HABEApBpM5).
	assert(HABCDEApBpCpmtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) >= 5) by (solve_hyps_min HABCDEApBpCpeq HABCDEApBpCpm5).
	assert(HABeq : rk(A :: B :: nil) = 2) by (apply LAB with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HABmtmp : rk(A :: B :: nil) >= 2) by (solve_hyps_min HABeq HABm2).
	assert(Hincl : incl (A :: B :: nil) (list_inter (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: nil) (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: E :: Ap :: Bp :: A :: B :: C :: D :: Cp :: nil) ((A :: B :: E :: Ap :: Bp :: nil) ++ (A :: B :: C :: D :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpCpmtmp;try rewrite HT2 in HABCDEApBpCpmtmp.
	assert(HT := rule_4 (A :: B :: E :: Ap :: Bp :: nil) (A :: B :: C :: D :: Cp :: nil) (A :: B :: nil) 5 2 5 HABCDEApBpCpmtmp HABmtmp HABEApBpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -2 et 5*)
assert(HABCDCpm4 : rk(A :: B :: C :: D :: Cp :: nil) >= 4).
{
	assert(HECpMtmp : rk(E :: Cp :: nil) <= 2) by (solve_hyps_max HECpeq HECpM2).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HCpmtmp : rk(Cp :: nil) >= 1) by (solve_hyps_min HCpeq HCpm1).
	assert(Hincl : incl (Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_2 (A :: B :: C :: D :: Cp :: nil) (E :: Cp :: nil) (Cp :: nil) 5 1 2 HABCDECpmtmp HCpmtmp HECpMtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour BCECp requis par la preuve de (?)BCECp pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 5 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp ::  de rang :  5 et 6 	 AiB : B :: C :: Cp ::  de rang :  2 et 3 	 A : A :: B :: C :: D :: Cp ::   de rang : 4 et 5 *)
assert(HBCECpm2 : rk(B :: C :: E :: Cp :: nil) >= 2).
{
	assert(HABCDCpMtmp : rk(A :: B :: C :: D :: Cp :: nil) <= 5) by (solve_hyps_max HABCDCpeq HABCDCpM5).
	assert(HABCDECpmtmp : rk(A :: B :: C :: D :: E :: Cp :: nil) >= 5) by (solve_hyps_min HABCDECpeq HABCDECpm5).
	assert(HBCCpmtmp : rk(B :: C :: Cp :: nil) >= 2) by (solve_hyps_min HBCCpeq HBCCpm2).
	assert(Hincl : incl (B :: C :: Cp :: nil) (list_inter (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: nil) (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: D :: Cp :: B :: C :: E :: Cp :: nil) ((A :: B :: C :: D :: Cp :: nil) ++ (B :: C :: E :: Cp :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpmtmp;try rewrite HT2 in HABCDECpmtmp.
	assert(HT := rule_4 (A :: B :: C :: D :: Cp :: nil) (B :: C :: E :: Cp :: nil) (B :: C :: Cp :: nil) 5 2 5 HABCDECpmtmp HBCCpmtmp HABCDCpMtmp Hincl); apply HT.
}

(* Application de la règle 2 code (7 ou 8 dans la thèse) conclusion A*)
(* marque des antécédents AUB AiB B: 5 -1 et -4*)
assert(HBCECpm3 : rk(B :: C :: E :: Cp :: nil) >= 3).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HABCECpp1mtmp : rk(A :: B :: C :: E :: Cp :: p1 :: nil) >= 4) by (solve_hyps_min HABCECpp1eq HABCECpp1m4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: p1 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: E :: Cp :: p1 :: nil) (B :: C :: E :: Cp :: A :: p1 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: p1 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: p1 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCECpp1mtmp;try rewrite HT2 in HABCECpp1mtmp.
	assert(HT := rule_2 (B :: C :: E :: Cp :: nil) (A :: p1 :: nil) (nil) 4 0 1 HABCECpp1mtmp Hmtmp HAp1Mtmp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADEp1p4p5 requis par la preuve de (?)ADEp1p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1p4p5m2 : rk(A :: D :: E :: p1 :: p4 :: p5 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1p4p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p4p5eq HABCDECpp1p4p5m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p4 :: p5 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p4 :: p5 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p4p5mtmp;try rewrite HT2 in HABCDECpp1p4p5mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p4 :: p5 :: nil) (E :: nil) 5 1 4 HABCDECpp1p4p5mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HADEp1p4p5M5 : rk(A :: D :: E :: p1 :: p4 :: p5 :: nil) <= 5).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HDEp4p5Mtmp : rk(D :: E :: p4 :: p5 :: nil) <= 4) by (solve_hyps_max HDEp4p5eq HDEp4p5M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (D :: E :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p4 :: p5 :: nil) (A :: p1 :: D :: E :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: D :: E :: p4 :: p5 :: nil) ((A :: p1 :: nil) ++ (D :: E :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (D :: E :: p4 :: p5 :: nil) (nil) 1 4 0 HAp1Mtmp HDEp4p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p4 :: p5 ::  de rang :  4 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p4p5m3 : rk(A :: D :: E :: p1 :: p4 :: p5 :: nil) >= 3).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p4p5mtmp : rk(A :: C :: D :: E :: p1 :: p4 :: p5 :: nil) >= 4) by (solve_hyps_min HACDEp1p4p5eq HACDEp1p4p5m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p4 :: p5 :: nil) (C :: p1 :: A :: D :: E :: p1 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: p4 :: p5 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p4p5mtmp;try rewrite HT2 in HACDEp1p4p5mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: p4 :: p5 :: nil) (p1 :: nil) 4 1 2 HACDEp1p4p5mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour AEp1p4p5 requis par la preuve de (?)AEp1p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour Ep4p5 requis par la preuve de (?)AEp1p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour AEp1p4p5 requis par la preuve de (?)AEp1p4p5 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HAEp1p4p5M4 : rk(A :: E :: p1 :: p4 :: p5 :: nil) <= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HEp4p5Mtmp : rk(E :: p4 :: p5 :: nil) <= 3) by (solve_hyps_max HEp4p5eq HEp4p5M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (E :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p4 :: p5 :: nil) (A :: p1 :: E :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: E :: p4 :: p5 :: nil) ((A :: p1 :: nil) ++ (E :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (E :: p4 :: p5 :: nil) (nil) 1 3 0 HAp1Mtmp HEp4p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 4) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: D :: E :: p1 :: p4 :: p5 ::  de rang :  3 et 5 	 AiB : p1 ::  de rang :  1 et 1 	 A : D :: p1 ::   de rang : 2 et 2 *)
assert(HAEp1p4p5m2 : rk(A :: E :: p1 :: p4 :: p5 :: nil) >= 2).
{
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HDp1Mtmp : rk(D :: p1 :: nil) <= 2) by (solve_hyps_max HDp1eq HDp1M2).
	assert(HADEp1p4p5mtmp : rk(A :: D :: E :: p1 :: p4 :: p5 :: nil) >= 3) by (solve_hyps_min HADEp1p4p5eq HADEp1p4p5m3).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (A :: E :: p1 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p4 :: p5 :: nil) (D :: p1 :: A :: E :: p1 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: A :: E :: p1 :: p4 :: p5 :: nil) ((D :: p1 :: nil) ++ (A :: E :: p1 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1p4p5mtmp;try rewrite HT2 in HADEp1p4p5mtmp.
	assert(HT := rule_4 (D :: p1 :: nil) (A :: E :: p1 :: p4 :: p5 :: nil) (p1 :: nil) 3 1 2 HADEp1p4p5mtmp Hp1mtmp HDp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour AEp1p2p4p5 requis par la preuve de (?)AEp1p2p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ADEp1p2p4p5 requis par la preuve de (?)AEp1p2p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p2p4p5 requis par la preuve de (?)ADEp1p2p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p2p4p5 requis par la preuve de (?)ACDEp1p2p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p2p4p5 requis par la preuve de (?)ABCDEp1p2p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p2p4p5m5 : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p2p4p5 requis par la preuve de (?)ACDEp1p2p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p4p5 requis par la preuve de (?)ACDEp1p2p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p4p5 requis par la preuve de (?)ABCDECpp1p2p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p4p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p2p4p5 requis par la preuve de (?)ACDEp1p2p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p2p4p5 requis par la preuve de (?)ACDEp1p2p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p2p4p5 requis par la preuve de (?)ABCDEApBpp1p2p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p2p4p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p2p4p5 requis par la preuve de (?)ACDEp1p2p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p2p4p5m2 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p2p4p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p2p4p5eq HABCDEApBpp1p2p4p5m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p4 :: p5 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p2p4p5mtmp;try rewrite HT2 in HABCDEApBpp1p2p4p5mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p2p4p5mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p2p4p5m3 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p2p4p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p4p5eq HABCDECpp1p2p4p5m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: p5 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p4p5mtmp;try rewrite HT2 in HABCDECpp1p2p4p5mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) (nil) 5 0 2 HABCDECpp1p2p4p5mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p4p5m4 : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) >= 4).
{
	assert(HBp1eq : rk(B :: p1 :: nil) = 2) by (apply LBp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p2p4p5mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p4p5eq HABCDEp1p2p4p5m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p4p5mtmp;try rewrite HT2 in HABCDEp1p2p4p5mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p2p4p5mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADEp1p2p4p5 requis par la preuve de (?)ADEp1p2p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADEp1p2p4p5 requis par la preuve de (?)ADEp1p2p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1p2p4p5m2 : rk(A :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1p2p4p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p4p5eq HABCDECpp1p2p4p5m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p4 :: p5 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p4p5mtmp;try rewrite HT2 in HABCDECpp1p2p4p5mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) (E :: nil) 5 1 4 HABCDECpp1p2p4p5mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 ::  de rang :  4 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p2p4p5m3 : rk(A :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) >= 3).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p2p4p5mtmp : rk(A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) >= 4) by (solve_hyps_min HACDEp1p2p4p5eq HACDEp1p2p4p5m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) (C :: p1 :: A :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p2p4p5mtmp;try rewrite HT2 in HACDEp1p2p4p5mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) (p1 :: nil) 4 1 2 HACDEp1p2p4p5mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour AEp1p2p4p5 requis par la preuve de (?)AEp1p2p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour Ep2p4p5 requis par la preuve de (?)AEp1p2p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour AEp1p2p4p5 requis par la preuve de (?)AEp1p2p4p5 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HAEp1p2p4p5M5 : rk(A :: E :: p1 :: p2 :: p4 :: p5 :: nil) <= 5).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HEp2p4p5Mtmp : rk(E :: p2 :: p4 :: p5 :: nil) <= 4) by (solve_hyps_max HEp2p4p5eq HEp2p4p5M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (E :: p2 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p2 :: p4 :: p5 :: nil) (A :: p1 :: E :: p2 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: E :: p2 :: p4 :: p5 :: nil) ((A :: p1 :: nil) ++ (E :: p2 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (E :: p2 :: p4 :: p5 :: nil) (nil) 1 4 0 HAp1Mtmp HEp2p4p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: D :: E :: p1 :: p2 :: p4 :: p5 ::  de rang :  3 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : D :: p1 ::   de rang : 2 et 2 *)
assert(HAEp1p2p4p5m2 : rk(A :: E :: p1 :: p2 :: p4 :: p5 :: nil) >= 2).
{
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HDp1Mtmp : rk(D :: p1 :: nil) <= 2) by (solve_hyps_max HDp1eq HDp1M2).
	assert(HADEp1p2p4p5mtmp : rk(A :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) >= 3) by (solve_hyps_min HADEp1p2p4p5eq HADEp1p2p4p5m3).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (A :: E :: p1 :: p2 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p2 :: p4 :: p5 :: nil) (D :: p1 :: A :: E :: p1 :: p2 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: A :: E :: p1 :: p2 :: p4 :: p5 :: nil) ((D :: p1 :: nil) ++ (A :: E :: p1 :: p2 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1p2p4p5mtmp;try rewrite HT2 in HADEp1p2p4p5mtmp.
	assert(HT := rule_4 (D :: p1 :: nil) (A :: E :: p1 :: p2 :: p4 :: p5 :: nil) (p1 :: nil) 3 1 2 HADEp1p2p4p5mtmp Hp1mtmp HDp1Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HAEp1p2p4p5M4 : rk(A :: E :: p1 :: p2 :: p4 :: p5 :: nil) <= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HAEp1p4p5Mtmp : rk(A :: E :: p1 :: p4 :: p5 :: nil) <= 4) by (solve_hyps_max HAEp1p4p5eq HAEp1p4p5M4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p2 :: nil) (A :: E :: p1 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p2 :: p4 :: p5 :: nil) (A :: p2 :: A :: E :: p1 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: A :: E :: p1 :: p4 :: p5 :: nil) ((A :: p2 :: nil) ++ (A :: E :: p1 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (A :: E :: p1 :: p4 :: p5 :: nil) (A :: nil) 1 4 1 HAp2Mtmp HAEp1p4p5Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ADEp1p2p3p4p5 requis par la preuve de (?)ADEp1p2p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p2p3p4p5 requis par la preuve de (?)ADEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p2p3p4p5 requis par la preuve de (?)ACDEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p2p3p4p5 requis par la preuve de (?)ABCDEp1p2p3p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p2p3p4p5m5 : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p2p3p4p5 requis par la preuve de (?)ACDEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p2p3p4p5 requis par la preuve de (?)ACDEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p2p3p4p5 requis par la preuve de (?)ABCDECpp1p2p3p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p2p3p4p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p2p3p4p5 requis par la preuve de (?)ACDEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p2p3p4p5 requis par la preuve de (?)ACDEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p2p3p4p5 requis par la preuve de (?)ABCDEApBpp1p2p3p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p2p3p4p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p2p3p4p5 requis par la preuve de (?)ACDEp1p2p3p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p2p3p4p5m2 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p2p3p4p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p2p3p4p5eq HABCDEApBpp1p2p3p4p5m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p2p3p4p5mtmp;try rewrite HT2 in HABCDEApBpp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p2p3p4p5mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p2p3p4p5m3 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p2p3p4p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p4p5eq HABCDECpp1p2p3p4p5m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p4p5mtmp;try rewrite HT2 in HABCDECpp1p2p3p4p5mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (nil) 5 0 2 HABCDECpp1p2p3p4p5mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p2p3p4p5m4 : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 4).
{
	assert(HBp1eq : rk(B :: p1 :: nil) = 2) by (apply LBp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p2p3p4p5mtmp : rk(A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEp1p2p3p4p5eq HABCDEp1p2p3p4p5m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p2p3p4p5mtmp;try rewrite HT2 in HABCDEp1p2p3p4p5mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p2p3p4p5mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADEp1p2p3p4p5 requis par la preuve de (?)ADEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADEp1p2p3p4p5 requis par la preuve de (?)ADEp1p2p3p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1p2p3p4p5m2 : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1p2p3p4p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p2p3p4p5eq HABCDECpp1p2p3p4p5m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p2p3p4p5mtmp;try rewrite HT2 in HABCDECpp1p2p3p4p5mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (E :: nil) 5 1 4 HABCDECpp1p2p3p4p5mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  4 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p2p3p4p5m3 : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 3).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p2p3p4p5mtmp : rk(A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 4) by (solve_hyps_min HACDEp1p2p3p4p5eq HACDEp1p2p3p4p5m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (C :: p1 :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p2p3p4p5mtmp;try rewrite HT2 in HACDEp1p2p3p4p5mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (p1 :: nil) 4 1 2 HACDEp1p2p3p4p5mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HADEp1p2p3p4p5M5 : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) <= 5).
{
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(HAEp1p2p4p5Mtmp : rk(A :: E :: p1 :: p2 :: p4 :: p5 :: nil) <= 4) by (solve_hyps_max HAEp1p2p4p5eq HAEp1p2p4p5M4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: D :: p3 :: nil) (A :: E :: p1 :: p2 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: D :: p3 :: A :: E :: p1 :: p2 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p3 :: A :: E :: p1 :: p2 :: p4 :: p5 :: nil) ((A :: D :: p3 :: nil) ++ (A :: E :: p1 :: p2 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: D :: p3 :: nil) (A :: E :: p1 :: p2 :: p4 :: p5 :: nil) (A :: nil) 2 4 1 HADp3Mtmp HAEp1p2p4p5Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour AEp1p2p3p4p5 requis par la preuve de (?)AEp1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour AEp1p3p4p5 requis par la preuve de (?)AEp1p2p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ADEp1p3p4p5 requis par la preuve de (?)AEp1p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 4 <= rg <= 6 pour ACDEp1p3p4p5 requis par la preuve de (?)ADEp1p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEp1p3p4p5 requis par la preuve de (?)ACDEp1p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEp1p3p4p5 requis par la preuve de (?)ABCDEp1p3p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEp1p3p4p5m5 : rk(A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 3 <= rg <= 6 pour ACDEp1p3p4p5 requis par la preuve de (?)ACDEp1p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDECpp1p3p4p5 requis par la preuve de (?)ACDEp1p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDECpp1p3p4p5 requis par la preuve de (?)ABCDECpp1p3p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDECpp1p3p4p5m5 : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ACDEp1p3p4p5 requis par la preuve de (?)ACDEp1p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 5 <= rg <= 6 pour ABCDEApBpp1p3p4p5 requis par la preuve de (?)ACDEp1p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ABCDEApBpp1p3p4p5 requis par la preuve de (?)ABCDEApBpp1p3p4p5 pour la règle 5  *)
(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HABCDEApBpp1p3p4p5m5 : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: p5 :: nil) >= 5).
{
	assert(HABCDEmtmp : rk(A :: B :: C :: D :: E :: nil) >= 5) by (solve_hyps_min HABCDEeq HABCDEm5).
	assert(Hcomp : 5 <= 5) by (repeat constructor).
	assert(Hincl : incl (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: B :: C :: D :: E :: nil) (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: p5 :: nil) 5 5 HABCDEmtmp Hcomp Hincl);apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ACDEp1p3p4p5 requis par la preuve de (?)ACDEp1p3p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 4 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : A :: C ::  de rang :  2 et 2 	 A : A :: B :: C :: Ap :: Bp ::   de rang : 3 et 5 *)
assert(HACDEp1p3p4p5m2 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) >= 2).
{
	assert(HABCApBpMtmp : rk(A :: B :: C :: Ap :: Bp :: nil) <= 5) by (solve_hyps_max HABCApBpeq HABCApBpM5).
	assert(HABCDEApBpp1p3p4p5mtmp : rk(A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEApBpp1p3p4p5eq HABCDEApBpp1p3p4p5m5).
	assert(HACeq : rk(A :: C :: nil) = 2) by (apply LAC with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HACmtmp : rk(A :: C :: nil) >= 2) by (solve_hyps_min HACeq HACm2).
	assert(Hincl : incl (A :: C :: nil) (list_inter (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Ap :: Bp :: p1 :: p3 :: p4 :: p5 :: nil) (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: B :: C :: Ap :: Bp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) ((A :: B :: C :: Ap :: Bp :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEApBpp1p3p4p5mtmp;try rewrite HT2 in HABCDEApBpp1p3p4p5mtmp.
	assert(HT := rule_4 (A :: B :: C :: Ap :: Bp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) (A :: C :: nil) 5 2 5 HABCDEApBpp1p3p4p5mtmp HACmtmp HABCApBpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -1 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB :  de rang :  0 et 0 	 A : B :: Cp ::   de rang : 1 et 2 *)
assert(HACDEp1p3p4p5m3 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) >= 3).
{
	assert(HBCpMtmp : rk(B :: Cp :: nil) <= 2) by (solve_hyps_max HBCpeq HBCpM2).
	assert(HABCDECpp1p3p4p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p4p5eq HABCDECpp1p3p4p5m5).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: p5 :: nil) (B :: Cp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: Cp :: A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) ((B :: Cp :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p4p5mtmp;try rewrite HT2 in HABCDECpp1p3p4p5mtmp.
	assert(HT := rule_4 (B :: Cp :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) (nil) 5 0 2 HABCDECpp1p3p4p5mtmp Hmtmp HBCpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : B :: p1 ::   de rang : 2 et 2 *)
assert(HACDEp1p3p4p5m4 : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) >= 4).
{
	assert(HBp1eq : rk(B :: p1 :: nil) = 2) by (apply LBp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBp1Mtmp : rk(B :: p1 :: nil) <= 2) by (solve_hyps_max HBp1eq HBp1M2).
	assert(HABCDEp1p3p4p5mtmp : rk(A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDEp1p3p4p5eq HABCDEp1p3p4p5m5).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) (B :: p1 :: A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: p1 :: A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) ((B :: p1 :: nil) ++ (A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDEp1p3p4p5mtmp;try rewrite HT2 in HABCDEp1p3p4p5mtmp.
	assert(HT := rule_4 (B :: p1 :: nil) (A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) (p1 :: nil) 5 1 2 HABCDEp1p3p4p5mtmp Hp1mtmp HBp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour ADEp1p3p4p5 requis par la preuve de (?)ADEp1p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour ADEp1p3p4p5 requis par la preuve de (?)ADEp1p3p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 5*)
(* ensembles concernés AUB : A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: p5 ::  de rang :  5 et 6 	 AiB : E ::  de rang :  1 et 1 	 A : B :: C :: E :: Cp ::   de rang : 3 et 4 *)
assert(HADEp1p3p4p5m2 : rk(A :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) >= 2).
{
	assert(HBCECpMtmp : rk(B :: C :: E :: Cp :: nil) <= 4) by (solve_hyps_max HBCECpeq HBCECpM4).
	assert(HABCDECpp1p3p4p5mtmp : rk(A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HABCDECpp1p3p4p5eq HABCDECpp1p3p4p5m5).
	assert(HEmtmp : rk(E :: nil) >= 1) by (solve_hyps_min HEeq HEm1).
	assert(Hincl : incl (E :: nil) (list_inter (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: B :: C :: D :: E :: Cp :: p1 :: p3 :: p4 :: p5 :: nil) (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: E :: Cp :: A :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) ((B :: C :: E :: Cp :: nil) ++ (A :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HABCDECpp1p3p4p5mtmp;try rewrite HT2 in HABCDECpp1p3p4p5mtmp.
	assert(HT := rule_4 (B :: C :: E :: Cp :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) (E :: nil) 5 1 4 HABCDECpp1p3p4p5mtmp HEmtmp HBCECpMtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 6) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 ::  de rang :  4 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : C :: p1 ::   de rang : 2 et 2 *)
assert(HADEp1p3p4p5m3 : rk(A :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) >= 3).
{
	assert(HCp1eq : rk(C :: p1 :: nil) = 2) by (apply LCp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HCp1Mtmp : rk(C :: p1 :: nil) <= 2) by (solve_hyps_max HCp1eq HCp1M2).
	assert(HACDEp1p3p4p5mtmp : rk(A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) >= 4) by (solve_hyps_min HACDEp1p3p4p5eq HACDEp1p3p4p5m4).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (C :: p1 :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: C :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) (C :: p1 :: A :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (C :: p1 :: A :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) ((C :: p1 :: nil) ++ (A :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HACDEp1p3p4p5mtmp;try rewrite HT2 in HACDEp1p3p4p5mtmp.
	assert(HT := rule_4 (C :: p1 :: nil) (A :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) (p1 :: nil) 4 1 2 HACDEp1p3p4p5mtmp Hp1mtmp HCp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour AEp1p3p4p5 requis par la preuve de (?)AEp1p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour Ep3p4p5 requis par la preuve de (?)AEp1p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour AEp1p3p4p5 requis par la preuve de (?)AEp1p3p4p5 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HAEp1p3p4p5M5 : rk(A :: E :: p1 :: p3 :: p4 :: p5 :: nil) <= 5).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(HEp3p4p5Mtmp : rk(E :: p3 :: p4 :: p5 :: nil) <= 4) by (solve_hyps_max HEp3p4p5eq HEp3p4p5M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (E :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p3 :: p4 :: p5 :: nil) (A :: p1 :: E :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: E :: p3 :: p4 :: p5 :: nil) ((A :: p1 :: nil) ++ (E :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (E :: p3 :: p4 :: p5 :: nil) (nil) 1 4 0 HAp1Mtmp HEp3p4p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 -2 et 4*)
(* ensembles concernés AUB : A :: D :: E :: p1 :: p3 :: p4 :: p5 ::  de rang :  3 et 6 	 AiB : p1 ::  de rang :  1 et 1 	 A : D :: p1 ::   de rang : 2 et 2 *)
assert(HAEp1p3p4p5m2 : rk(A :: E :: p1 :: p3 :: p4 :: p5 :: nil) >= 2).
{
	assert(HDp1eq : rk(D :: p1 :: nil) = 2) by (apply LDp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HDp1Mtmp : rk(D :: p1 :: nil) <= 2) by (solve_hyps_max HDp1eq HDp1M2).
	assert(HADEp1p3p4p5mtmp : rk(A :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) >= 3) by (solve_hyps_min HADEp1p3p4p5eq HADEp1p3p4p5m3).
	assert(Hp1mtmp : rk(p1 :: nil) >= 1) by (solve_hyps_min Hp1eq Hp1m1).
	assert(Hincl : incl (p1 :: nil) (list_inter (D :: p1 :: nil) (A :: E :: p1 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p3 :: p4 :: p5 :: nil) (D :: p1 :: A :: E :: p1 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (D :: p1 :: A :: E :: p1 :: p3 :: p4 :: p5 :: nil) ((D :: p1 :: nil) ++ (A :: E :: p1 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1p3p4p5mtmp;try rewrite HT2 in HADEp1p3p4p5mtmp.
	assert(HT := rule_4 (D :: p1 :: nil) (A :: E :: p1 :: p3 :: p4 :: p5 :: nil) (p1 :: nil) 3 1 2 HADEp1p3p4p5mtmp Hp1mtmp HDp1Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 6 pour AEp1p2p3p4p5 requis par la preuve de (?)AEp1p2p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour AEp1p2p3p4p5 requis par la preuve de (?)AEp1p2p3p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 6) *)
(* marque des antécédents AUB AiB A: 5 -4 et 4*)
(* ensembles concernés AUB : A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  3 et 6 	 AiB : A :: p1 ::  de rang :  1 et 1 	 A : A :: D :: p1 ::   de rang : 2 et 2 *)
assert(HAEp1p2p3p4p5m2 : rk(A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 2).
{
	assert(HADp1eq : rk(A :: D :: p1 :: nil) = 2) by (apply LADp1 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HADp1Mtmp : rk(A :: D :: p1 :: nil) <= 2) by (solve_hyps_max HADp1eq HADp1M2).
	assert(HADEp1p2p3p4p5mtmp : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 3) by (solve_hyps_min HADEp1p2p3p4p5eq HADEp1p2p3p4p5m3).
	assert(HAp1mtmp : rk(A :: p1 :: nil) >= 1) by (solve_hyps_min HAp1eq HAp1m1).
	assert(Hincl : incl (A :: p1 :: nil) (list_inter (A :: D :: p1 :: nil) (A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: D :: p1 :: A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p1 :: A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: D :: p1 :: nil) ++ (A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1p2p3p4p5mtmp;try rewrite HT2 in HADEp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: D :: p1 :: nil) (A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: p1 :: nil) 3 1 2 HADEp1p2p3p4p5mtmp HAp1mtmp HADp1Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HAEp1p2p3p4p5M5 : rk(A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) <= 5).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HAEp1p3p4p5Mtmp : rk(A :: E :: p1 :: p3 :: p4 :: p5 :: nil) <= 5) by (solve_hyps_max HAEp1p3p4p5eq HAEp1p3p4p5M5).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p2 :: nil) (A :: E :: p1 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: p2 :: A :: E :: p1 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: A :: E :: p1 :: p3 :: p4 :: p5 :: nil) ((A :: p2 :: nil) ++ (A :: E :: p1 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (A :: E :: p1 :: p3 :: p4 :: p5 :: nil) (A :: nil) 1 5 1 HAp2Mtmp HAEp1p3p4p5Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 5) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  3 et 5 	 AiB : A :: p3 ::  de rang :  2 et 2 	 A : A :: D :: p3 ::   de rang : 2 et 2 *)
assert(HAEp1p2p3p4p5m3 : rk(A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 3).
{
	assert(HADp3Mtmp : rk(A :: D :: p3 :: nil) <= 2) by (solve_hyps_max HADp3eq HADp3M2).
	assert(HADEp1p2p3p4p5mtmp : rk(A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 3) by (solve_hyps_min HADEp1p2p3p4p5eq HADEp1p2p3p4p5m3).
	assert(HAp3mtmp : rk(A :: p3 :: nil) >= 2) by (solve_hyps_min HAp3eq HAp3m2).
	assert(Hincl : incl (A :: p3 :: nil) (list_inter (A :: D :: p3 :: nil) (A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: D :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: D :: p3 :: A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: D :: p3 :: A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: D :: p3 :: nil) ++ (A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HADEp1p2p3p4p5mtmp;try rewrite HT2 in HADEp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: D :: p3 :: nil) (A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: p3 :: nil) 3 2 2 HADEp1p2p3p4p5mtmp HAp3mtmp HADp3Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HAEp1p2p3p4p5M4 : rk(A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) <= 4).
{
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(HAp1p2p3p5Mtmp : rk(A :: p1 :: p2 :: p3 :: p5 :: nil) <= 3) by (solve_hyps_max HAp1p2p3p5eq HAp1p2p3p5M3).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: E :: p4 :: nil) (A :: p1 :: p2 :: p3 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: E :: p4 :: A :: p1 :: p2 :: p3 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: E :: p4 :: A :: p1 :: p2 :: p3 :: p5 :: nil) ((A :: E :: p4 :: nil) ++ (A :: p1 :: p2 :: p3 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: E :: p4 :: nil) (A :: p1 :: p2 :: p3 :: p5 :: nil) (A :: nil) 2 3 1 HAEp4Mtmp HAp1p2p3p5Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour Ap1p2p3p4p5 requis par la preuve de (?)Ap1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour Ap1p2p3p4p5 requis par la preuve de (?)Ap1p2p3p4p5 pour la règle 5  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour Ap1p3p4p5 requis par la preuve de (?)Ap1p2p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 3 pour p3p4p5 requis par la preuve de (?)Ap1p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour Ap1p3p4p5 requis par la preuve de (?)Ap1p3p4p5 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HAp1p3p4p5M4 : rk(A :: p1 :: p3 :: p4 :: p5 :: nil) <= 4).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hp3p4p5Mtmp : rk(p3 :: p4 :: p5 :: nil) <= 3) by (solve_hyps_max Hp3p4p5eq Hp3p4p5M3).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p3 :: p4 :: p5 :: nil) (A :: p1 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: p3 :: p4 :: p5 :: nil) ((A :: p1 :: nil) ++ (p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (p3 :: p4 :: p5 :: nil) (nil) 1 3 0 HAp1Mtmp Hp3p4p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour Ap1p2p3p4p5 requis par la preuve de (?)Ap1p2p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 4 pour p2p3p4p5 requis par la preuve de (?)Ap1p2p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 6 pour Ap1p2p3p4p5 requis par la preuve de (?)Ap1p2p3p4p5 pour la règle 1  *)
(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et 5*)
assert(HAp1p2p3p4p5M5 : rk(A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) <= 5).
{
	assert(HAp1Mtmp : rk(A :: p1 :: nil) <= 1) by (solve_hyps_max HAp1eq HAp1M1).
	assert(Hp2p3p4p5Mtmp : rk(p2 :: p3 :: p4 :: p5 :: nil) <= 4) by (solve_hyps_max Hp2p3p4p5eq Hp2p3p4p5M4).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (A :: p1 :: nil) (p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: p1 :: nil) ++ (p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p1 :: nil) (p2 :: p3 :: p4 :: p5 :: nil) (nil) 1 4 0 HAp1Mtmp Hp2p3p4p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : -4 5 et -2*)
assert(HAp1p2p3p4p5M4 : rk(A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) <= 4).
{
	assert(HAp2Mtmp : rk(A :: p2 :: nil) <= 1) by (solve_hyps_max HAp2eq HAp2M1).
	assert(HAp1p3p4p5Mtmp : rk(A :: p1 :: p3 :: p4 :: p5 :: nil) <= 4) by (solve_hyps_max HAp1p3p4p5eq HAp1p3p4p5M4).
	assert(HAmtmp : rk(A :: nil) >= 1) by (solve_hyps_min HAeq HAm1).
	assert(Hincl : incl (A :: nil) (list_inter (A :: p2 :: nil) (A :: p1 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: p2 :: A :: p1 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p2 :: A :: p1 :: p3 :: p4 :: p5 :: nil) ((A :: p2 :: nil) ++ (A :: p1 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (A :: p2 :: nil) (A :: p1 :: p3 :: p4 :: p5 :: nil) (A :: nil) 1 4 1 HAp2Mtmp HAp1p3p4p5Mtmp HAmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 5 code (1 ou 2 dans la thèse) *)
(* marque de l'antécédent : -4 *)
assert(HAp1p2p3p4p5m2 : rk(A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 2).
{
	assert(HAp3mtmp : rk(A :: p3 :: nil) >= 2) by (solve_hyps_min HAp3eq HAp3m2).
	assert(Hcomp : 2 <= 2) by (repeat constructor).
	assert(Hincl : incl (A :: p3 :: nil) (A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (repeat clear_all_rk;my_inO).
	assert(HT := rule_5 (A :: p3 :: nil) (A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) 2 2 HAp3mtmp Hcomp Hincl);apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 -4 et -4*)
(* ensembles concernés AUB : A :: E :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  3 et 4 	 AiB : A :: p4 ::  de rang :  2 et 2 	 A : A :: E :: p4 ::   de rang : 2 et 2 *)
assert(HAp1p2p3p4p5m3 : rk(A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 3).
{
	assert(HAEp4Mtmp : rk(A :: E :: p4 :: nil) <= 2) by (solve_hyps_max HAEp4eq HAEp4M2).
	assert(HAEp1p2p3p4p5mtmp : rk(A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 3) by (solve_hyps_min HAEp1p2p3p4p5eq HAEp1p2p3p4p5m3).
	assert(HAp4mtmp : rk(A :: p4 :: nil) >= 2) by (solve_hyps_min HAp4eq HAp4m2).
	assert(Hincl : incl (A :: p4 :: nil) (list_inter (A :: E :: p4 :: nil) (A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: E :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: E :: p4 :: A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: E :: p4 :: A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: E :: p4 :: nil) ++ (A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HAEp1p2p3p4p5mtmp;try rewrite HT2 in HAEp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: E :: p4 :: nil) (A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: p4 :: nil) 3 2 2 HAEp1p2p3p4p5mtmp HAp4mtmp HAEp4Mtmp Hincl); apply HT.
}

(* dans constructProofaux(), preuve de 2 <= rg <= 4 pour p1p2p3p4p5 requis par la preuve de (?)p1p2p3p4p5 pour la règle 4  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 2 pour p4p5 requis par la preuve de (?)p1p2p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 2 <= rg <= 5 pour p1p2p3p4p5 requis par la preuve de (?)p1p2p3p4p5 pour la règle 1  *)
(* dans constructProofaux(), preuve de 1 <= rg <= 5 pour p1p2p3p4p5 requis par la preuve de (?)p1p2p3p4p5 pour la règle 4  *)
(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 2 et 5) *)
(* marque des antécédents AUB AiB A: 5 4 et 4*)
(* ensembles concernés AUB : A :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  2 et 4 	 AiB : p1 :: p3 ::  de rang :  2 et 2 	 A : A :: p1 :: p3 ::   de rang : 2 et 2 *)
assert(Hp1p2p3p4p5m2 : rk(p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 2).
{
	assert(HAp1p3eq : rk(A :: p1 :: p3 :: nil) = 2) by (apply LAp1p3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAp1p3Mtmp : rk(A :: p1 :: p3 :: nil) <= 2) by (solve_hyps_max HAp1p3eq HAp1p3M2).
	assert(HAp1p2p3p4p5mtmp : rk(A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 2) by (solve_hyps_min HAp1p2p3p4p5eq HAp1p2p3p4p5m2).
	assert(Hp1p3eq : rk(p1 :: p3 :: nil) = 2) by (apply Lp1p3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(Hp1p3mtmp : rk(p1 :: p3 :: nil) >= 2) by (solve_hyps_min Hp1p3eq Hp1p3m2).
	assert(Hincl : incl (p1 :: p3 :: nil) (list_inter (A :: p1 :: p3 :: nil) (p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: p1 :: p3 :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: p3 :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: p1 :: p3 :: nil) ++ (p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HAp1p2p3p4p5mtmp;try rewrite HT2 in HAp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: p1 :: p3 :: nil) (p1 :: p2 :: p3 :: p4 :: p5 :: nil) (p1 :: p3 :: nil) 2 2 2 HAp1p2p3p4p5mtmp Hp1p3mtmp HAp1p3Mtmp Hincl); apply HT.
}

(* Application de la règle 1 code (5 dans la thèse) conclusion AUB *)
(* marque des antécédents A B AiB : 4 5 et 5*)
assert(Hp1p2p3p4p5M4 : rk(p1 :: p2 :: p3 :: p4 :: p5 :: nil) <= 4).
{
	assert(Hp1p2p3eq : rk(p1 :: p2 :: p3 :: nil) = 2) by (apply Lp1p2p3 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(Hp1p2p3Mtmp : rk(p1 :: p2 :: p3 :: nil) <= 2) by (solve_hyps_max Hp1p2p3eq Hp1p2p3M2).
	assert(Hp4p5Mtmp : rk(p4 :: p5 :: nil) <= 2) by (solve_hyps_max Hp4p5eq Hp4p5M2).
	assert(Hmtmp : rk(nil) >= 0) by (solve_hyps_min Hnuleq Hm).
	assert(Hincl : incl (nil) (list_inter (p1 :: p2 :: p3 :: nil) (p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (p1 :: p2 :: p3 :: p4 :: p5 :: nil) (p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((p1 :: p2 :: p3 :: nil) ++ (p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	assert(HT := rule_1 (p1 :: p2 :: p3 :: nil) (p4 :: p5 :: nil) (nil) 2 2 0 Hp1p2p3Mtmp Hp4p5Mtmp Hmtmp Hincl);
	rewrite <-HT2 in HT;try rewrite <-HT1 in HT;apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 3 et 4) *)
(* marque des antécédents AUB AiB A: 5 4 et 4*)
(* ensembles concernés AUB : A :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  3 et 4 	 AiB : p1 :: p4 ::  de rang :  2 et 2 	 A : A :: p1 :: p4 ::   de rang : 2 et 2 *)
assert(Hp1p2p3p4p5m3 : rk(p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 3).
{
	assert(HAp1p4eq : rk(A :: p1 :: p4 :: nil) = 2) by (apply LAp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HAp1p4Mtmp : rk(A :: p1 :: p4 :: nil) <= 2) by (solve_hyps_max HAp1p4eq HAp1p4M2).
	assert(HAp1p2p3p4p5mtmp : rk(A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 3) by (solve_hyps_min HAp1p2p3p4p5eq HAp1p2p3p4p5m3).
	assert(Hp1p4eq : rk(p1 :: p4 :: nil) = 2) by (apply Lp1p4 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(Hp1p4mtmp : rk(p1 :: p4 :: nil) >= 2) by (solve_hyps_min Hp1p4eq Hp1p4m2).
	assert(Hincl : incl (p1 :: p4 :: nil) (list_inter (A :: p1 :: p4 :: nil) (p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (A :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (A :: p1 :: p4 :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (A :: p1 :: p4 :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((A :: p1 :: p4 :: nil) ++ (p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HAp1p2p3p4p5mtmp;try rewrite HT2 in HAp1p2p3p4p5mtmp.
	assert(HT := rule_4 (A :: p1 :: p4 :: nil) (p1 :: p2 :: p3 :: p4 :: p5 :: nil) (p1 :: p4 :: nil) 3 2 2 HAp1p2p3p4p5mtmp Hp1p4mtmp HAp1p4Mtmp Hincl); apply HT.
}

(* Application de la règle 4 code (7 ou 8 dans la thèse) concerne B (rang 4 et 4) *)
(* marque des antécédents AUB AiB A: 4 -2 et -4*)
(* ensembles concernés AUB : B :: C :: p1 :: p2 :: p3 :: p4 :: p5 ::  de rang :  5 et 5 	 AiB : p5 ::  de rang :  1 et 1 	 A : B :: C :: p5 ::   de rang : 2 et 2 *)
assert(Hp1p2p3p4p5m4 : rk(p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 4).
{
	assert(HBCp5Mtmp : rk(B :: C :: p5 :: nil) <= 2) by (solve_hyps_max HBCp5eq HBCp5M2).
	assert(HBCp1p2p3p4p5eq : rk(B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) = 5) by (apply LBCp1p2p3p4p5 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption).
	assert(HBCp1p2p3p4p5mtmp : rk(B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) >= 5) by (solve_hyps_min HBCp1p2p3p4p5eq HBCp1p2p3p4p5m5).
	assert(Hp5mtmp : rk(p5 :: nil) >= 1) by (solve_hyps_min Hp5eq Hp5m1).
	assert(Hincl : incl (p5 :: nil) (list_inter (B :: C :: p5 :: nil) (p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (repeat clear_all_rk;my_inO).
	assert(HT1 : equivlist (B :: C :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) (B :: C :: p5 :: p1 :: p2 :: p3 :: p4 :: p5 :: nil)) by (clear_all_rk;my_inO).
	assert(HT2 : equivlist (B :: C :: p5 :: p1 :: p2 :: p3 :: p4 :: p5 :: nil) ((B :: C :: p5 :: nil) ++ (p1 :: p2 :: p3 :: p4 :: p5 :: nil))) by (clear_all_rk;my_inO).
	try rewrite HT1 in HBCp1p2p3p4p5mtmp;try rewrite HT2 in HBCp1p2p3p4p5mtmp.
	assert(HT := rule_4 (B :: C :: p5 :: nil) (p1 :: p2 :: p3 :: p4 :: p5 :: nil) (p5 :: nil) 5 1 2 HBCp1p2p3p4p5mtmp Hp5mtmp HBCp5Mtmp Hincl); apply HT.
}

assert(Hp1p2p3p4p5M : rk(p1 :: p2 :: p3 :: p4 :: p5 ::  nil) <= 5) (* dim : 5 *) by (solve_hyps_max Hp1p2p3p4p5eq Hp1p2p3p4p5M5).
assert(Hp1p2p3p4p5m : rk(p1 :: p2 :: p3 :: p4 :: p5 ::  nil) >= 1) by (solve_hyps_min Hp1p2p3p4p5eq Hp1p2p3p4p5m1).
intuition.
Qed.

(* dans la couche 0 *)
Theorem def_Conclusion : forall A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 ,
rk(A :: B :: C :: D :: E ::  nil) = 5 -> rk(Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 5 -> rk(A :: B :: C :: D :: E :: Ap :: Bp :: Cp :: Dp :: Ep ::  nil) = 6 ->
rk(A :: p1 ::  nil) = 1 -> rk(A :: B :: p1 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p1 ::  nil) = 5 ->
rk(A :: p2 ::  nil) = 1 -> rk(A :: C :: p2 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p2 ::  nil) = 5 ->
rk(A :: p3 ::  nil) = 2 -> rk(A :: D :: p3 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p3 ::  nil) = 5 ->
rk(A :: p4 ::  nil) = 2 -> rk(A :: E :: p4 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p4 ::  nil) = 5 ->
rk(B :: C :: p5 ::  nil) = 2 -> rk(Ap :: Bp :: Cp :: Dp :: Ep :: p5 ::  nil) = 5 -> 
	 rk(p1 :: p2 :: p3 :: p4 :: p5 ::  nil) = 4  .
Proof.

intros A B C D E Ap Bp Cp Dp Ep p1 p2 p3 p4 p5 
HABCDEeq HApBpCpDpEpeq HABCDEApBpCpDpEpeq HAp1eq HABp1eq HApBpCpDpEpp1eq HAp2eq HACp2eq HApBpCpDpEpp2eq HAp3eq
HADp3eq HApBpCpDpEpp3eq HAp4eq HAEp4eq HApBpCpDpEpp4eq HBCp5eq HApBpCpDpEpp5eq .
repeat split.

	apply Lp1p2p3p4p5 with (A := A) (B := B) (C := C) (D := D) (E := E) (Ap := Ap) (Bp := Bp) (Cp := Cp) (Dp := Dp) (Ep := Ep) (p1 := p1) (p2 := p2) (p3 := p3) (p4 := p4) (p5 := p5) ; assumption.
Qed .
